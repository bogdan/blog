<!doctype html>
%html{:lang => "en"}
  %head
    %meta{:charset => "utf-8"}/
    %title How to report a lot?
    %meta{:content => "", :name => "description"}/
    %meta{:content => "Bogdan Gusiev", :name => "author"}/
    %meta{:content => "yes", :name => "apple-mobile-web-app-capable"}/
    %meta{:content => "black-translucent", :name => "apple-mobile-web-app-status-bar-style"}/
    %meta{:content => "width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no", :name => "viewport"}/
    %link{:href => "http://lab.hakim.se/reveal-js/css/reveal.css", :rel => "stylesheet"}/
    %link{:href => "http://lab.hakim.se/reveal-js/css/theme/night.css", :rel => "stylesheet"}/
    / For syntax highlighting
    %link{:href => "http://lab.hakim.se/reveal-js/lib/css/zenburn.css", :rel => "stylesheet"}/
    / If the query includes 'print-pdf', use the PDF print sheet
    :javascript
      document.write( '<link rel="stylesheet" href="http://lab.hakim.se/reveal-js/css/print/' + ( window.location.search.match( /print-pdf/gi ) ? 'pdf' : 'paper' ) + '.css" type="text/css" media="print">' );
    :sass
      .yellow
        color: yellow
      .reveal
        pre
          code
            padding: 20px 5px
            font-size: 1.00em
            line-height: 1.3em
        ul
          min-width: 50%
        .red
          color: #ff2c2d
        .green
          color: #17ff2e
        .yellow
          color: yellow
        .blue
          color: #1b91ff
        .left
          float: left
        .right
          float: right
        .clearfix
          overflow: hidden
        
  %body
    .reveal
      .slides
          
        %section
          %h2 How to Report 
          %h1 a LOT?
          %h3 Bogdan Gusiev
        %section
          %h3 Bogdan G.

          %ul
            %li.fragment in IT for ~ 8 years
            %li.fragment 5 of them with Ruby and Rails
            %li.fragment 3 of them in Talkable Inc.
        %section
          %h2 Talkable Inc.
            
          .clearfix
            .left
              %img{style: 'width: 450px', src: "http://take.ms/7KhUZ"}
              %br
              %img{style: 'width: 450px', src: "http://take.ms/TZ8UV"}
            .right
              %img{style: 'width: 450px', src: "http://take.ms/s1pvm"}
              %br
              %img{style: 'width: 450px', src: "http://take.ms/i2EFe"}

            


        %section
          %h1 Report?
        
          %aside.notes
            Let's have a quick overview on what is a report
        %section
          %h3 Why to Report?
          
          %pre
            %code
              :preserve
                ActiveRecord::Base.send(:subclasses).map do |klass|
                  klass.where(
                    "created_at &gt; ?", 1.day.ago
                  ).count
                end.sum
        %section
          %h2 At some point you know everything
          %aside.notes
            You know about every single event happening in your application every day.

        %section
          %h2 At another point you can't do it anymore



        %section
          %h2.red a LOT?
              

          %h2 How many people want reports?

          %aside.notes
            %ul
              %li not how big numbers are
              %li not how often needed

    
        %section
          %h3 How many people 
          %h3 would it be hard to support?

          %aside.notes
            %p At some point you can pull all required number as they are needed
            %p At some point you can't

        %section
          %h1 Plan

          %ul
            %li Basic Operations 
            %li Problems as number of metrics growth
            %li What is even a metric?
            %li What is a filter?
            %li Data Model
            %li Live examples


        %section
          %h3 Business speaks with you like this:

          %p Good ones
          %ul
            %li How many new users do we acquire a month at average?
            %li How much sales did we get from this advertising campaign?

          %p And bad ones
          %ul
            %li Please visualise the data.
            %li Can I see how we are performing overall in the last time?

        %section
          %h3 Basic Data Operations in Reporting

          %ul
            %li How many ...?
            %li What is a total amount of ...?
            %li ... in this scope/date range
            %li ... for each period/category
          .fragment
            %br
            %h4 In the SQL
            %ul
              %li count(...)
              %li sum(...)
              %li group by ...
              %li where ...

        %section
          %h3 The basic model of doing all that

          [you are doing the work in a middle]
        %section
          %h3 Stages

          %ol
            %li At first you learn: SQL, CSV, Graphs, S3 file uploading
            %li Then you feel like an Reporting Machine
            %li And then you say: No thanks...

        %section
          %h3 Let the machine do the work
          %h4 Let you become a software developer again

          [machine in a middle graph]

        %section
          %h2 Requirement of unification 
          %h2 and code reuse
          
        %section 
          %h3 Problems:

          %h3 Total Sales = ?
          
          1st Developer:
          %pre.fragment
            %code
              :preserve
                Purchase.group(:marketing_campaign).
                  sum(:subtotal)
          2nd Developer:
          %pre.fragment
            %code
              :preserve
                Purchase.group("month(created_at)").
                  successfully_delivered.sum(:subtotal)
          3rd Developer:
          %pre.fragment
            %code
              :preserve
                Purchase.
                  group(:marketing_campaign, "month(paid_at)").
                  successfully_delivered.
                  sum(:subtotal)

        %section
          %h3 No one database knows about
          %h2 Daylight Saving Time

        %section
          %h3 Does it include a returned sales or not?
          %img{src: "http://monosnap.com/image/8mWPDzrlTJaQEaY9jMR6b9me8yz4zs.png"}

        %section

          %h3 Same metric can be calculated differently 
          %h3 in different parts of project


        %section
          %h2.yellow Conclusion:
          %h3 Same Name =&gt; Same Logic
          %h3 Different Logic =&gt; Different Name
          %h3 No per-person names and reports
          %aside.notes
            %p Each time person wants to see "Total Sales" there should be only one way of calculating it.
            %p If there is a place where sales number needs to be calculated differently, 
            
            %p it should be named differently

        %section
          %h3 "One ring to rule them all!"
            

          %pre
            %code.ruby
              :preserve
                {
                  identifier: 'total_sales',
                  name: 'Total Sales',
                  description: 'Amount ($) of successfully delivered sales'
                  how_to_calculate: -> () { 
                    # comming soon
                  } 
                }

        %section
          %h2 How to Calculate a metric?

          %ul
            %li Be Reusable
            %li Support Multiple Filters
            %li Support all basic operations


        %section
          %h3 How to Be organized?

          %pre
            %code.ruby
              :preserve
                Purchase.where(
                  created_at: ?,
                  marketing_campaign: ?,
                  users: {gender: ?},
                  status: ?,         
                  first_time_buyer: ?,
                  items: { product_category: ? }
                ).joins(...)
          %aside.notes We need to organize aggregation and multiple filters for the same metric:

        %section

          %h3 Words snowball

          %h4 What is total sales for each marketing campaigns in February?

          %pre
            %code
              :preserve
                Purchase.where(
                  created_at: '2015-02-01'..'2015-03-01'
                ).group(:marketing_campaign).sum(:subtotal)

          %h4 What is total sales for each week of February in the given marketing campaign?

          %pre
            %code
              :preserve
                Purchase.where(
                  created_at: '2015-02-01'..'2015-03-01', 
                  marketing_campaign: id,
                ).group('week(created_at)').sum(:subtotal)
          
          
        %section
          %h4 How many first time buyers does that campaign bring?
          %h4 What is purchases ditribution by hour of a day for each state?
          %h4 How much did we sell for each product category this black friday comparing to previous one?
          %h4 What is the average order value of first time buyers compared to non-first time buyers?
          
          %aside.notes
            All these term rotate around in your head like a snowball of mess at some point.

        %section

          %h3 How to share code between all those requests?

        %section

          %h2.yellow Conclusion:
          %h2 one query =&gt; one number
          %h2
            %strike
              GROUP BY

        %section
          %pre
            %code
              :preserve
                marketing_campaigns.map do |campaign|
                  total_sales(created_at: february_month, marketing_campaign: campaign)
                end

                february_month.each_week.map do |week|
                  total_sales(created_at: week, marketing_campaign: selected_campaign)
                end


        %section
          %h3 Filter: 

          %pre
            %code.ruby
              :preserve
                campaigns = Campaign.where(id: [22,81,74]) #selected by user
          %h3 Overall (in the scope) 
          %pre
            %code.ruby
              :preserve
                total_sales(marketing_campaigns: campaigns)

          %h3 Detailed (for each) 

          %pre
            %code.ruby
              :preserve
                campaigns.map do |campaign|
                  total_sales(marketing_campaigns: campaign)
                end
          %aside.notes
            %p Example: 
            %p For each of selected campaigns 
            %p vs 
            %p in the scope of selected campaigns

                
        %section
          %pre
            %code.ruby
              :preserve
                result = []
                marketing_campaigns.each do |campaign|
                  weeks_of_february.each do |week|
                    result &lt;&lt; [ 
                      campaign,
                      week, 
                      total_purchases(created_at: week, marketing_campaign: campaign) 
                      total_sales(created_at: week, marketing_campaign: campaign),
                      unique_buyers(created_at: week, marketing_campaign: campaign)
                    ]
                  end
                end

        %section

          %table
            %thead
              %tr
                %th Week
                %th
                  Campaign
                %th
                  \# Total Sales
                %th
                  $ Total Sales
                %th Number of Buyers
            %tbody
              - ['1st', '2nd', '3rd'].each do |week|
                - ['SF 15Q1 SA', 'SF 25Q2 PP '].each do |cmp|
                  %tr
                    %td=week
                    %td
                      %nobr= cmp
                    %td
                      = a = rand(1000)
                    %td= "$#{((a * rand(3)/100) +1).to_i},#{100+ rand(900)}.#{rand(100)}"
                    %td 
                      = (a * 0.8).to_i
        %section

          %h2.yellow Conclusion:
          %h2 Tables are your friends
          %h2 Numbers =&gt; Table =&gt; Graph

          %aside.notes
            Any data you pull could be put into a table.

        %section

          %h2 Implementation
          %h4 OO Design is optional

          %pre
            %code.ruby
              :preserve
                class ApplicationMetrics
                  def initialize(filters)
                    @filters = filters
                  end
                  def total_sales
                    purchases_scope.sum(:subtotal)
                  end
                  def total_purchases
                    purchases_scope.count
                  end
                  def unique_buyers
                    purchases_scope.count("DISTINCT user_id")
                  end
                  private
                  def purchases_scope
                    Purchases.successfully_delivered.
                      where(paid_at: @filters[:period]).
                      where(marketing_campaign_id: @filters[:marketing_campaign])
                  end
        %section
          %h3 And a metadata:

          %pre
            %code.ruby
              :preserve
                def self.metric(name, metadata = {})
                  @metrics ||= {}
                  @metrics[name] = metadata
                  define_method(name) do
                    yield
                  end
                end

                metric(:total_sales, name: 'Total Sales $', description: '...') do
                  purchases_scope.sum(:subtotal)
                end
        %section

          %h3 Advantages

          %ul
            %li Flexibility
            %li Code is simple
            %li Consistency
            %li Single point of control
            %li Code reuse
            %li Front-end is decoupeled
          %aside.notes
            
            %ul
              %li Any report aggregation and combination possible
              %li SQL is kept simple: code is easier to write
              %li All numbers across all your project are consistent
              %li Single point of control
              %li Better code reuse: You never start new report from scratch
              %li Front-end is now decoupled from back-end

        %section

          %h2 Consistency:
          %h3 Spring = March + April + May
          %h3 Week = Su + Mo + Tu + We + Th + Fr + Sa

          %aside.notes
            Customers can be very captious.
            If you show them numbers they do not like, 
            even small mistake 0.1% can break their trust.
            If DST would happen within a week...
            Users will not trust you unless you gonna be accurate.
        %section
          
          %h2.yellow Conclusion:
          %h3 Being Consistent = Gain Trust

        %section
          %h3 Disadvantages

          %h2 Performance is going down

        %section
          %h3 Caching in reporting

          %ul
            %li 10 marking campaigns
            %li 3 years = 1095 days
            %li 20 product categories
            %li 10 metrics

        %section
          
          %h2 Cache is unmaintainable

          %h3 10  * 1095 * 20 * 10 &asymp; 2_000_000 variants

          %aside.notes
            %p Exponential growth
            %p There are more numbers you can generate than data in your database

        %section
          %h3 Improve performance with
          %h2 Parallel execution &amp; 
          %h2 SSD harddrive

          %h3 Google for: Array parallel map

        %section
          %h3
            Accurate numbers slowly are better 
          %h3 than random numbers fast

          %aside.notes
            %ul
              %li Accurate numbers
              %li Unlike "GROUP BY" this technique is easier to parallelize
              %li Do you still not use SSD hard drive or what?
        %section
          %h3.yellow Summing Up
        %section
          %h3 Same Name =&gt; Same Logic
          %h3 Different Logic =&gt; Different Name

        %section
          %h3 How to reuse code?
          %h3 One Query =&gt; One Number

        %section
          %h3 Unified Report Definition

          %ul
            %li 
              Metrics: Name, Description, ...
            %li Filters
            %li 
              Operations
              %ul
                %li count
                %li sum
        %section
          %h2 Thanks for your attention!
          %ul
            %li My blog: gusiev.com
            %li My code: github.com/bogdan
            %li My company: talkable.com




              

          
    %script{:src => "http://lab.hakim.se/reveal-js/lib/js/head.min.js"}
    %script{:src => "/javascripts/reveal/reveal.js"}
    :javascript
      // https://github.com/hakimel/reveal.js#configuration
      Reveal.initialize({
      	controls: true,
      	progress: true,
      	history: true,
      	center: true,

      	theme: Reveal.getQueryHash().theme || 'simple', // available themes are in /css/theme
      	transition: Reveal.getQueryHash().transition || 'fade', // default/cube/page/concave/zoom/linear/fade/none

      	// Optional libraries used to extend on reveal.js
      	dependencies: [
      		// { src: 'lib/js/classList.js', condition: function() { return !document.body.classList; } },
      		{ src: 'http://lab.hakim.se/reveal-js/plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
      		{ src: 'http://lab.hakim.se/reveal-js/plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
      		{ src: 'http://lab.hakim.se/reveal-js/plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } },
          { src: '/javascripts/reveal/plugin/notes/notes.js', async: true }
      		// { src: 'plugin/zoom-js/zoom.js', async: true, condition: function() { return !!document.body.classList; } },
      		// { src: 'plugin/search/search.js', async: true, condition: function() { return !!document.body.classList; } }
      		// { src: 'plugin/remotes/remotes.js', async: true, condition: function() { return !!document.body.classList; } }
      	]
      });
