<!doctype html>
%html{:lang => "en"}
  %head
    %meta{:charset => "utf-8"}/
    %title Parsers
    %meta{:content => "", :name => "description"}/
    %meta{:content => "Bogdan Gusiev", :name => "author"}/
    %meta{:content => "yes", :name => "apple-mobile-web-app-capable"}/
    %meta{:content => "black-translucent", :name => "apple-mobile-web-app-status-bar-style"}/
    %meta{:content => "width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no", :name => "viewport"}/
    %link{:href => "http://lab.hakim.se/reveal-js/css/reveal.css", :rel => "stylesheet"}/
    %link{:href => "http://lab.hakim.se/reveal-js/css/theme/night.css", :rel => "stylesheet"}/
    / For syntax highlighting
    %link{:href => "http://lab.hakim.se/reveal-js/lib/css/zenburn.css", :rel => "stylesheet"}/
    / If the query includes 'print-pdf', use the PDF print sheet
    :javascript
      document.write( '<link rel="stylesheet" href="http://lab.hakim.se/reveal-js/css/print/' + ( window.location.search.match( /print-pdf/gi ) ? 'pdf' : 'paper' ) + '.css" type="text/css" media="print">' );
    :sass
      .yellow
        color: yellow
      .reveal
        pre
          code
            padding: 20px 5px
            font-size: 1.80em
            line-height: 1.3em
        ul
          min-width: 50%
        .red
          color: #ff2c2d
        .green
          color: #17ff2e
        .blue
          color: #1b91ff
  %body
    .reveal
      .slides
        %section
          %h1 Parsers
          %h4 Rails Router Example
          %h3 Bogdan Gusiev
          %h3 October 2013

        %section
          %h1 P-A-R-S-E-R-S
        %section
          %h3 Why?
          
          %h3 Because best way to pass data from one App to another is
          %h2.fragment.highlight.green Serialization

          %h5 
            %strike COM
            %strike RMI


        %section
          %h3 One more less obvious reason

          %h2{style: 'font-family: arial'}
            == ... сейчас обсуждаем возможность сделать конфу более технической.

          %h2 So this talk required to be 
          %h1.fragment.highlight.red hardcore
          
        %section
          %h1 Plan

          %ul
            %li Easy Part
            %li Classification
            %li Parsers Theory
            %li Simple examples
            %li Live examples


        %section
          %h3 The easiest way to build parser

          %pre.fragment
            %code
              :preserve
                bogdan@example.com
                
          .fragment
            %h3 Regular Expression

            %pre
              %code
                :preserve
                  \w+@\w+(\.\w+)+
          .fragment
            %pre
              %code
                :preserve
                  /\A[^@]+@([^@\.]+\.)+[^@\.]+\z/ 

            %p etc.

        %section
          %h3 Each regular expression can parse particular grammar
          %h2 
            What is a 
            .highlight.green grammar?
          
        %section
          %h3 Regular expressions are great!

          %h3 Their power is huge.
          %h2 
            But what is the 
            .highlight.red limit?

        %section 
          %h3 
            Regular expressions can only be used to parse 
            %span.green Regular grammars

          %h2 
            But what about 
            %span.red Non-regular?

        %section
          %h3 Regular expression can only parse something that could be parsed with one iteration
          %br
          %br
          %br
          .fragment
            %h4 in other words
            %h2 From Left to Right

        %section
          %h3 Several obvious examples
          %pre
            %code
              :preserve
                +380(67)222-33-00
                bogdan@example.com
                192.168.0.1
        %section

          %h2 In order to understand why
          %h2 we need to get into the most boring part
          %h1 The Theory
        %section

          %h3 Grammar in Math is described via Generators concept.

          Each generator represents a transformation from one symbol to group of other symbols
          
        %section
          %h3 Regular Grammars

          %pre
            %code
              :preserve
                ab
                aab
                abb
                abbb
                aabb
                aaab
          %h5 Regexp: a+b+

          %pre
            %code.ruby
              :preserve
                S -> aS
                S -> aR
                R -> bR
                R -> b
          %ul
            %li S,R - non-deterministic symbols
            %li a,b - deterministic symbols
            %li string is not considered final if it contains non-deterministic symbols

          

        %section
          %h3 Regular grammar that describes an Email
          %h5 (almost)
          %pre
            %code
              :preserve
                S -> [0-z]N
                N -> [0-z]N
                N -> @D
                D -> [0-z]D
                D -> [0-z].Z
                Z -> [0-z]Z
                Z -> [0-z]
          %ul
            %li S - start
            %li N - name
            %li D - domain
            %li Z - zone

                  
          
        %section
          %h3 Is there a regular expression that parses this?
          %pre
            %code.ruby
              :preserve
                S -> aSb
                S -> ab
          %pre
            %code
              :preserve
                ab
                aabb
                aaabbb
                aaaabbbb

        %section
          %h2 The answer is NO.
          %h3 We can not parse such a simple case with regular expressions.


        %section
          %h2 Regularity Criteria

          %h3 Grammar is regular if it don't contain "recursive" generators.

        %section
          %h3 So what to do?

          %h2 Not sure
          %h4 the only one thing we know is that regular expressions will not help

          %pre{style: 'font-size: 0.4em'}
            %code.ruby
              :preserve
                def match_aabb_pattern?(string)
                  string.each_char.with_index.each do |c, i|
                    case c
                    when 'a'
                      count_a += 1
                    when 'b'
                      return count_a == string.size - i - 1
                    else
                      return false
                    end
                  end
                  return false
                end

        %section
          %h2 Regular Expressions

          %h1 
            %span.highlight.green Powers 
            %span &amp; 
            %span.highlight.red Limits
          -#%h3 This is where we understand the power of Regex's
          -#%h2 And their limits
          -#%h3 Writing parsers for non-regular grammars is a big problem
        %section
          %h2 Grammars/Parsers can be
          %h1 
            %span.highlight.green Regular 
            %span &amp; 
            %span.highlight.red Recursive


        %section
          %h2 Getting close to real world examples

          -#%pre
            %code
              :preserve
                12*(2+8/(13.5+7))


          %img{src: "http://monosnap.com/image/1BfsQy5LwfhC4khKNTLjvTvnx2M58A.png"}
          %h2 Regex are still possible
          
        %section
          %h2 But not really in the long term

          %img{src: "http://monosnap.com/image/7wOQJ9xYqaX6oxeCvOUZGDjT4Gq8Ve.png"}

        %section
          %h2 Start from Tokenizing
          %pre
            %code
              :preserve
                "12*(2+8/(13.5+7))" =>
                [
                  '12', '*', '(', '2', '+', '8' '/', 
                  '(', '13.5', '+', '7', ')', ')'
                ]


        %section
          %h2 Builing Abstract Syntax Tree (AST)
          %h4 The Hardest Part
          %pre
            -#%code.ruby{style: 'font-size: 1.0em'}
            :preserve
              ['12', <span class='highlight yellow'>'*'</span>, <span class='highlight green'>[</span><span class='highlight red'>'('</span>, '2', '+', '8' '/', '(', '13.5', '+', '7', ')', <span class='highlight red'>')'</span><span class='highlight green'>]</span> ]
              [left = '12', <span class='highlight yellow'>operator</span>, right = <span class='highlight green'>[</span>...<span class='highlight green'>]</span>]

              ['12', '*', [ '2', '+', '8' '/', '(', '13.5', '+', '7', ')'] ]
              Cleanup useless brackets <span class="highlight red">( )</span>
              

              ['12', '*', [ '2', <span class="highlight yellow">'+'</span>, <span class="highlight green">[</span> '8' '/', '(', '13.5', '+', '7', ')' <span class="highlight green">]</span> ] ]
              # Repeat for right and left node

              ['12', '*', [ '2', '+', [ '8', <span class="highlight yellow">'/'</span>, <span class="highlight green">[</span> '13.5', '+', '7', <span class="highlight green">]</span> ]]]
              # Repeat for right and left node
          %ol
            %li Find lowest priority operator
            %li Split Array into 3 parts: left operand, operator, right operand
            %li Repeat 1-3 for before part and after part

        %section
          %h2 Work with AST is easy
          %pre
            %code.ruby
              :preserve
                def evaluate(ast)
                  if ast.is_a?(Array)
                    left, operator, right = ast
                    evaluate(left).send(operator, evaluate(right))
                  else
                    ast.to_f
                  end
                end

        %section
          %h2 After such a heavy infrastructure 
          %h2 it is easies to support
          %img{src: "http://monosnap.com/image/7wOQJ9xYqaX6oxeCvOUZGDjT4Gq8Ve.png"}
          
        %section
          %h2 Building AST
          %h2 is Hard problem

          %h2 But you are able to use tools
          

        %section
          %h2 Recursive parsers library

          %ul
            %li treetop - a little easier, a bit slower
            %li racc - more hard core, used in Rails Router

        %section
          %h2 Rails router sytax

          %pre
            %code
              :preserve
                /users/:id(.:format)
                (/locale/:locale)/users/:id(.:format)
                (/locale/:locale(/currency/:currency))/users/:id(.:format)

          %h3 Regularity criteria can be broken.

        %section
          %h3 This is a huge problem and require router to be parsed by recursive parser.
        %section 
          %h2 Route tokenizer:
          %pre
            %code
              :preserve
                /users/:id(.:format)
          %table 
            %tr 
              %th Token 
              %th Type
            %tr 
              %td / 
              %td SLASH
            %tr 
              %td users 
              %td LITERAL
            %tr 
              %td / 
              %td SLASH
            %tr 
              %td :id 
              %td SYMBOL
            %tr 
              %td ( 
              %td LPAREN
            %tr 
              %td . 
              %td DOT
            %tr 
              %td :format 
              %td SYMBOL
            %tr 
              %td ) 
              %td RPAREN

        %section

          %h2 Fragments from parser
          %a{href: 'https://github.com/rails/rails/blob/master/actionpack/lib/action_dispatch/journey/parser.y'}
            github.com/rails/rails/blob/master/actionpack/lib/action_dispatch/journey/parser.y

          %h4 They are so severe that created their own syntax

          %pre
            .fragment
              &nbsp;
              group
              \: LPAREN expressions RPAREN { ... }
              ;
            .fragment
              expressions
              \: expressions expression  { ... }
              | expression              { ... }
              | or
              ;
            .fragment
              \# Simplied!
              expression
              \: symbol
              | literal
              | slash
              | dot
              | group
              | star
              ;
        %section
          %h2 Parser markup is compiled to ruby

          %pre
            %code
              :preserve
                racc -l -o parser.rb parser.y

          %h3
            %a{href: 'https://github.com/tenderlove/racc'} github.com/tenderlove/racc


          %a{href: 'https://github.com/rails/rails/blob/master/actionpack/lib/action_dispatch/journey/parser.rb'} 
            github.com/rails/rails/blob/master/actionpack/lib/action_dispatch/journey/parser.rb


        %section
          %h2 Ukraine is having a hard time
          %p 
            Software developers have unique opportunity to support economics of our country.
            We are the only one that can really bring money to Ukraine.
          %h2 So, lets do our work better
          %h5 And waste less money on new Smart Phones

        %section

          %h2 Thanks for your attension
          %h3
            %a{href: 'http://gusiev.com'} http://gusiev.com
          %h3
            %a{href: 'http://github.com/bogdan'} http://github.com/bogdan
          %h3
            %a{href: 'http://gusiev.com/slides/parsers'} http://gusiev.com/slides/parsers
          
          
    %script{:src => "http://lab.hakim.se/reveal-js/lib/js/head.min.js"}
    %script{:src => "http://lab.hakim.se/reveal-js/js/reveal.js"}
    :javascript
      // https://github.com/hakimel/reveal.js#configuration
      Reveal.initialize({
      	controls: true,
      	progress: true,
      	history: true,
      	center: true,

      	theme: Reveal.getQueryHash().theme || 'simple', // available themes are in /css/theme
      	transition: Reveal.getQueryHash().transition || 'fade', // default/cube/page/concave/zoom/linear/fade/none

      	// Optional libraries used to extend on reveal.js
      	dependencies: [
      		// { src: 'lib/js/classList.js', condition: function() { return !document.body.classList; } },
      		{ src: 'http://lab.hakim.se/reveal-js/plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
      		{ src: 'http://lab.hakim.se/reveal-js/plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
      		{ src: 'http://lab.hakim.se/reveal-js/plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } },
      		// { src: 'plugin/zoom-js/zoom.js', async: true, condition: function() { return !!document.body.classList; } },
      		// { src: 'plugin/notes/notes.js', async: true, condition: function() { return !!document.body.classList; } }
      		// { src: 'plugin/search/search.js', async: true, condition: function() { return !!document.body.classList; } }
      		// { src: 'plugin/remotes/remotes.js', async: true, condition: function() { return !!document.body.classList; } }
      	]
      });
