!!!
%html
  %head
    %meta{:charset => "utf-8"}/
    %meta{:content => "width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no", :name => "viewport"}/
    %title reveal.js
    %link{:href => "css/reveal.css", :rel => "stylesheet"}/
    %link{:href => "css/theme/black.css", :rel => "stylesheet"}/
    / Theme used for syntax highlighting of code
    %link{:href => "lib/css/zenburn.css", :rel => "stylesheet"}/
    / Printing and PDF exports
    :javascript
      var link = document.createElement( 'link' );
      link.rel = 'stylesheet';
      link.type = 'text/css';
      link.href = window.location.search.match( /print-pdf/gi ) ? 'css/print/pdf.css' : 'css/print/paper.css';
      document.getElementsByTagName( 'head' )[0].appendChild( link );
    :sass
      .yellow
        color: yellow !important
      .green
        color: #17ff2e !important
      .red
        color: red !important
      .first-slide
        width: 100% !important
        height: 100% !important
        top: 0 !important
        position: absolute !important
        max-width: 100% !important
        max-height: 100% !important
        background-color: white !important
    -#:sass
      code
        &.line-numbers
          counter-reset: line_numbers
        span
          &.line-number
            counter-increment: line_numbers
            &:before
              content: counter(line_numbers)
              color: gray
          &.highlight-line:before
            color: yellow
  %body
    .reveal
      .slides
        %section
          %h2 Optimize Database Queries
              
          %h3 Bogdan Gusiev
        %section
          %h3 Bogdan Gusiev:
        
          %ul
            %li Working for startups for 7 years
            %li Ruby on Rails for 7 years

        %section
          %h3 Ultimate goal

          %h2 Make your app spend less time waiting on the query response

        %section

          %h2 Methods

          %ul
            %li Avoid queries
            %li Reduce number of queries
            %li Make queries faster
            %li Query from a faster place than DB

        %section
          %h2
            Types of queries
          %ul
            %li 
              Instant
              %ul
                %li time spent mainly on networking IO and FS read
                %li There are many of them
            %li 
              Slow 
              %ul
                %li time spent on aggregating or searching the data
                %li Slow time comes from joins or aggregation or dynamic conditions

        %section
          %h2 Avoid Instant Queries
          %pre
            %code.ruby
              :preserve
                Campaign.has_many :offers
                Offer.belongs_to :campaign

          %pre
            %code
              :preserve
                 >> campaign.offers.first.campaign
                 SELECT  `offers`.* FROM `offers` WHERE `offers`.`campaign_id` = 1
                 SELECT  `campaigns`.* FROM `campaigns` WHERE `campaigns`.`id` = 1

        %section

          %h2 Why does it happen?
          %pre
            %code.haml
              :preserve
                = render partial: "offers/offer", collection: campaign.offers
          %pre
            %code.haml
              :preserve
                # app/views/offers/_offer.html.haml
                %p= link_to offer.name, 
                  campaign_offer_path(offer.campaign, offer)


        %section
          %h1.yellow Solution

          %pre
            %code.ruby
              :preserve
                Campaign.has_many :offers, inverse_of: :campaign
                Offer.belongs_to :campaign, inverse_of: :offers   

        %section
          %pre
            %code.ruby
              :preserve
                class UserRole &lt; AR::Base
                  validates_uniqness_of :role_id, scope: [:user_id]
                end
          %h2 Pretty useless query
          %h2 Use unique index instead

        %section
          %h3 Rails built-in avoid queries methods:

          %ul
            %li inverse_of
            %li counter_cache
            %li has_many :through

        %section
          %h2 Avoid Queries

          %pre
            %code.ruby
              :preserve
                Coupon.belongs_to :purchase, counter_cache: true
                class Purhcase &lt; AR::Base
                  has_many :coupons
                
                  def coupon_codes
                    coupons.map(&:code)
                  end
                end
          %pre.fragment
            %code.ruby
              :preserve
                def coupon_codes
                  coupon_count > 0 ? coupons.map(&:code) : []
                end
                    
        %section
          %h2 Cache Columns
          %h3 as a way to avoid queries
        %section
          %h2 Cache Columns Strategy
          %h3 Data is immutable from business logic stand point

          %pre
            %code.ruby
              :preserve
                create_table :comments do |t|
                  t.integer :post_id
                  t.integer :author_id
                  t.text :body
                end

            \#body is mutable but #post and #author are not
          %pre.fragment
            %code.ruby
              :preserve
                Comment.has_one :feed_activity
                FeedActivity.before_validation do 
                  self.forum = comment.post.forum
                  self.author = comment.author
                }

        %section
          -#%h2 Cache Columns

          %h3 Pros
          %ul
            %li Cheap to make
            %li Cheap to maintain for immutable data
          %h3 Cons
          %ul
            %li Expensive to maintain for mutable data
            %li Takes disc space

        %section
          %h1 Speedup queries

        %section
          %pre
            %code.ruby
              :preserve
                add_index :users, :email, unique: true
                add_index :products, :category_id

          %ul
            %li Become actual after 100_000 records
            %li Indexes take disk space
            %li Foreign Key index is almost always a good idea

        %section

          %h2 Index Usage Guide

          %p Index by one column will help you make the related query fast
          %pre
            %code.sql
              :preserve
                SELECT * FROM users WHERE email = ?

          .fragment
            %p Multi-column index can be used to query by first column, 1st &amp; 2nd column etc

            %pre
              %code.ruby
                :preserve
                  add_index :users_roles, [:user_id, :role_id], unique: true
                  add_index :users_roles, :role_id

        %section
          %h3 Some Math

          %p 
            If I have a table with N columns, how many indexes do I need to cover 100% of possible where conditions?
        %section
          %h3 2**n
          %h3.fragment How about partial index usage optimization?

        %section
          
          %h3 Well, a little less
          %h3.fragment 2**(n-1)

          %div
            %table
              %tr
                %th Columns
                %th Indexes
                %th List
              %tr
                %td 1
                %td 1
                %td a
              %tr
                %td 2
                %td 2
                %td a-b b
              %tr
                %td 3
                %td 4
                %td a-b-c b-c a-c c
              %tr
                %td 4
                %td 8
                %td 
                  a-b-c-d b-c-d a-c-d a-b-d a-d b-d c-d d
              %tr
                %td 5
                %td 16
                %td 
                  a-b-c-d-e b-c-d-e a-c-d-e a-b-d-e a-b-c-e a-b-e a-c-e b-c-e b-d-e c-d-e a-d a-e b-d b-e c-e e
        %section
          %h3 Indexes are not free 
          %h4 they take the disk space

          %img{src: "https://monosnap.com/file/uy3gMAu72njmGRyvgTQixzqIzVUrNr.png"}
        %section
          

          %h2 Indexes Optimization

          %pre
            %code.sql
              :preserve
                SELECT * FROM posts p 
                WHERE p.forum_id = ? AND p.user_id = ? AND p.created_at = ?
          
          %ul
            %li Index A: forum_id, created_at
            %li Index B: user_id

        %section
          %h3 But the DB may disagree

          %pre
            %code.sql
              :preserve
                SELECT * FROM posts p USE INDEX(index_b)
                WHERE p.forum_id = ? AND p.user_id = ? AND p.created_at = ?
        %section
          %h3 
            Apply indexes to columns that would 
            .yellow cut significant amount of data 
            from the result in where condition

        %section
          %h3 Indexes are the best to speed up your queries
          %h2 But they are not the only one
        %section
          %pre
            %code.ruby
              :preserve
                Site.has_many :visitors
                Site.has_many :traffic_sources
                TrafficSource.belongs_to :site
                Visitor.doesnt_belong_to :site
          %pre
            %code.diff
              :preserve
                -  Site.has_many :visitors
                +  Site.has_many :visitors, ->(traffic_source) { 
                     where(site_id: traffic_source.site_id, traffic_source_id: traffic_source.id) }
        %section
          %h2 Avoid Join

          %pre
            %code.ruby
              :preserve
                Coupon.belongs_to :purchase, counter_cache: true
                Purchase.has_many :coupons

                Purchase.scope :with_free_shipping, -> {
                 joins(:coupons).
                   where(coupons: {free_shipping: true}).
                }

          %pre.fragment
            %code.ruby
              :preserve
                where("coupons_count &gt; 0")
        %section

          %h2 DB is smart on doing JOINS

          %pre
            %code.ruby
              :preserve
                Purchase.
                  where(created_at: 30.days.ago..Time.now).
                  with_free_shipping

          %pre
            %code.sql
              :preserve
                SELECT * FROM purchases 
                INNER JOIN coupons ON purchases.coupon_id = coupons.id
                WHERE 
                  (purchases.created_at BETWEEN ? AND ?) AND 
                  coupons.free_shipping AND 
                  purchases.coupons_count &gt; 0
        %section
          %h2 Query execution mystery

          %pre
            %code.sql
              :preserve
                SELECT * FROM members LEFT JOIN projects ON 
                members.project_id = projects.id
                WHERE projects.organization_id = ?

                SELECT * FROM members WHERE project_id in (
                  SELECT * FROM projects WHERE organization_id = ?)

                SELECT id FROM projects WHERE organization_id = ?
                -- &lt;some ruby code here&gt;
                SELECT * FROM members WHERE project_id in (?)
        %section
          %h3 "Nested queries are evil" 
          %h3 (c) My University Professor 2006

        %section
          %h2 Nested queries are good when

          %ul
            %li 
              The result set has not more than 
              %span.red 100 records
            %li
              They is 
              %span.red no closures
              %ul
                %li  Result is the same for each part query row
            %li They let you define a stricter query execution plan
        %section
          %h3 In most cases, two simple queries will be faster than one complex
          %h3.fragment if nested query didn't work
        %section
          %h2 Query Execution Plan
          %ul
            %li PostgreSQL <code>explain</code> statement is amazing
            %li MySQL <code>explain</code> statement is useless

        %section

          %h2 PostgreSQL Explain
          %pre
            %code
              :preserve
                tpcc=# explain select (
                  select count(*) from item where i_id = empty.i_id
                ) from empty;

                 QUERY PLAN
                ----------------------------------------------------------------------------------
                Seq Scan on empty (cost=0.00..19933.22 rows=2400 width=4)
                  SubPlan
                    -> Aggregate (cost=8.28..8.29 rows=1 width=0)
                      -> Index Scan using pk_item on item (cost=0.00..8.28 rows=1 width=0)
                          Index Cond: (i_id = $0)

          %a{href: "https://wiki.postgresql.org/wiki/File:Explaining_EXPLAIN.pdf"} 
            wiki.postgresql.org/wiki/File:Explaining_EXPLAIN.pdf
        %section
          %h2 Real Example around query execution plan

          %table
            %tr
              %th Rank
              %th Name
              %th Comments
            %tr
              %td 1st
              %td Aaron Peterson
              %td 97
            %tr
              %td 2nd
              %td DHH
              %td 95
            %tr
              %td 3rd
              %td Bogdan Gusiev
              %td 60

            %tr.fragment
              %td 15th
              %td You
              %td 50




        %section
          %h2 Manually controlling the query execution plan
          %pre
            %code.ruby
              :preserve
                find_person_by_id(add_ranking(get_leaderboard), ?)
          %pre.fragment
            %code.sql.line-numbers
              :preserve
                SELECT people.*, leaderboard.* FROM (
                  SELECT leaders.*, CAST(@rnk:=@rnk+1 AS UNSIGNED) leaderboard_rank 
                  FROM (
                    SELECT  `comments`.`person_id` person_id, 
                      COUNT(*) AS `leaderboard_count` 
                    FROM `comments`  
                    WHERE `comments`.`created_at` BETWEEN ? AND ? 
                    GROUP BY `comments`.`person_id` 
                    ORDER BY `leaderboard_count` DESC 
                    LIMIT ?
                  ) AS leaders, (SELECT @rnk:=0) AS ranking
                ) AS leaderboard left join people on people.id = leaderboard.person_id 
                WHERE people.id = ?
                ORDER BY leaderboard_rank
        %section
          Supercomplex SQL query can be fast
          %br
          if you control the execution plan
          %pre
            %code.sql
              :preserve
                SELECT people.*, leaderboard.* FROM (
                  SELECT leaders.*, CAST(@rnk:=@rnk+1 AS UNSIGNED) leaderboard_rank FROM (
                    SELECT `offers`.`person_id` person_id, COUNT(*) AS `leaderboard_count`, SUM(`referrals`.`referred_subtotal`) AS `leaderboard_subtotal` FROM `referrals` 
                      INNER JOIN `offers` ON `offers`.`id` = `referrals`.`offer_id` 
                      INNER JOIN `origins` ON `origins`.`id` = `referrals`.`referred_origin_id` AND `origins`.`type` IN ('Event', 'Purchase') 
                      WHERE `referrals`.`site_id` = 8863 AND `referrals`.`status` IN ('approved', 'unblocked') AND 
                        (`offers`.`person_id` IS NOT NULL) AND `origins`.`event_category_id` = 17201 AND 
                        (`referrals`.`status` != 'blocked') AND `referrals`.`campaign_id` = 51710 AND 
                        (`referrals`.`created_at` BETWEEN '2017-01-26 18:41:00' AND '2017-03-03 12:58:44') 
                      GROUP BY `offers`.`person_id` 
                      ORDER BY `leaderboard_count` DESC, `leaderboard_subtotal` DESC, `offers`.`person_id` ASC
                  ) AS leaders, (SELECT @rnk:=0) AS ranking
                ) AS leaderboard 
                LEFT JOIN people on people.id = leaderboard.person_id 
                WHERE `people`.`site_id` = 8863 AND `people`.`id` = 99443765 
                ORDER BY leaderboard_rank

        %section
          %h3 Query a different place

          %h2 KeyValue Database
        %section
          %h3 Rails Toolbox

          %pre
            %code.ruby
              :preserve
                Rails.cache.set(key, value)
                Rails.cache.get(key)
          %pre
            %code.ruby
              :preserve
                Rails.cache.fetch(key) do
                  # Heavy calculation
                end
        %section
          %h3 Cache Invalidation
          %h4 First things first:
          %h3 Always expire by time
          %h3 I recommend to expire on deploy
          %pre
            %code.ruby
              :preserve
                Rails.configuration.cache_store = :redis_store, {
                  namespace: Deploy.identifier, expires_in: 1.day
                }
          %pre
            %code.ruby
              :preserve
                class Site
                  column :custom_domain, :string

                  def ssl_expires_at
                    Rails.cache.fetch(["ssl_expires_at", custom_domain]) do
                      Net::HTTP.start(custom_domain, 443, { use_ssl: true }) do
                        http.peer_cert.not_after
                      end
                    end
                  end
                end



          %h3 Expiration by key
        %section
          %h2 Thank You

          %br
          %ul
            %li http://github.com/bogdan
            %li http://gusiev.com

    %script{:src => "lib/js/head.min.js"}
    %script{:src => "js/reveal.js"}
    :javascript
      // More info https://github.com/hakimel/reveal.js#configuration
      Reveal.initialize({
      history: true,
      // More info https://github.com/hakimel/reveal.js#dependencies
      dependencies: [
        { src: 'plugin/markdown/marked.js' },
        { src: 'plugin/markdown/markdown.js' },
        { src: 'plugin/notes/notes.js', async: true },
        {src: 'plugin/line-numbers/line-numbers.js', async: false},
        { src: 'plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } }
      ]
      });
