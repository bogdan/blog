!!!
%html
  %head
    %meta{:charset => "utf-8"}/
    %meta{:content => "width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no", :name => "viewport"}/
    %title reveal.js
    %link{:href => "css/reveal.css", :rel => "stylesheet"}/
    %link{:href => "css/theme/black.css", :rel => "stylesheet"}/
    / Theme used for syntax highlighting of code
    %link{:href => "lib/css/zenburn.css", :rel => "stylesheet"}/
    / Printing and PDF exports
    :javascript
      var link = document.createElement( 'link' );
      link.rel = 'stylesheet';
      link.type = 'text/css';
      link.href = window.location.search.match( /print-pdf/gi ) ? 'css/print/pdf.css' : 'css/print/paper.css';
      document.getElementsByTagName( 'head' )[0].appendChild( link );
    :sass
      .splash-image
        position: absolute
        top: 10%
        left: 0
        border: 0 !important
        background-color: transparent !important
        width: 100%
        margin: auto
            
      .yellow
        color: yellow !important
      .green
        color: #17ff2e !important
      .red
        color: red !important
      .first-slide
        width: 100% !important
        height: 100% !important
        top: 0 !important
        position: absolute !important
        max-width: 100% !important
        max-height: 100% !important
        background-color: white !important
    :sass
      code
        &.line-numbers
          counter-reset: line_numbers
        span
          &.line-number
            counter-increment: line_numbers
            &:before
              content: counter(line_numbers)
              color: gray
          &.highlight-line:before
            color: yellow
  %body
    .reveal
      .slides
        %section
          %h2 Optimize Database Queries
              
          %h3 Bogdan Gusiev
          %h3 June 2017
        %section
          %h3 Bogdan Gusiev:
        
          %ul
            %li Working for startups for X years
            %li Contributing to Ruby on Rails X years

        %section
          %h3 2011: Started 
          %img{src: "https://monosnap.com/file/zbsymGAuTXPpwhLrwLf3wmGl0jXBiY.png"}

        %section
          %h3 2017: Won an argument with DHH
          %img{src: "https://monosnap.com/file/e7VO7qmiVjqfhyosW5TIYW7cbH2S80.png"}
          
        %section
          %h3 Optimize Your App

          %ul
            %li Web Server
            %li Application Container
            %li Rack
            %li ActionController
            %li Your code
          %h3.fragment.red 90% it is all yours

        %section

          %h3 Top of the mind

          %ul
            %li Use a different database
            %li Buy a new hardware
            %li Use a magic setting
            %li.fragment.yellow Optimize Slow Parts


        %section
          %h3 What takes time in the app

          %img{src: "https://monosnap.com/file/c7ZZ3fwZzo5KK2m4R51qIbJTZpl5Lz.png"}
        %section

          %h3 What takes time in the app
          %img{src: "https://monosnap.com/file/qKmy2rxT2iJ2vpHqYQez22PLgh9X0q.png"}

          
        -#%section
          %h4 http://contributors.rubyonrails.org
          %img{src: "https://monosnap.com/file/54HY4xFLwAt1mdAosSCuvdygoZnfeO.png"}
        %section
          %h3 Ultimate goal

          %h2 Make your app spend less time waiting on the query response

        %section

          %h2 Methods

          %ul
            %li Avoid queries
            %li Make queries faster
            %li Merge queries (several simple into one complex)
            %li Use Cache

        %section
          %h2
            Types of queries
          %ul
            %li 
              Instant
              %ul
                %li time spent mainly on networking IO and FS read
                %li There are many of them
            %li.fragment 
              Slow 
              %ul
                %li time spent on aggregating or searching the data
                %li Slow time comes from joins or aggregation or dynamic conditions

        %section
          %h2 Avoid Instant Queries
          %pre
            %code.ruby
              :preserve
                Campaign.has_many :offers
                Offer.belongs_to :campaign

          %pre
            %code
              :preserve
                 >> campaign.offers.first.campaign
                 SELECT  `offers`.* FROM `offers` WHERE `offers`.`campaign_id` = 1
                 SELECT  `campaigns`.* FROM `campaigns` WHERE `campaigns`.`id` = 1

        %section

          %h2 Why does it happen?
          %pre
            %code.haml
              :preserve
                = render partial: "offers/offer", collection: campaign.offers
          %pre
            %code.haml
              :preserve
                -# app/views/offers/_offer.html.haml
                %a{href: campaign_offer_path(offer.campaign, offer)}
                  = offer.name
                  


        %section
          %h2.yellow Avoid Queries is Possible

          %pre
            %code.ruby
              :preserve
                Campaign.has_many :offers, inverse_of: :campaign
                Offer.belongs_to :campaign, inverse_of: :offers   


        %section
          %pre
            %code.ruby
              :preserve
                class UserRole &lt; AR::Base
                  validates_uniqueness_of :role_id, scope: [:user_id]
                end
          %img{src: "https://monosnap.com/file/uZ06k8hdnHqF4rbcWS7xgOuoiuGgaP.png"}
          .fragment
            %h2 Use unique index instead

        %section
          %h3 Rails built-in avoid queries methods:

          %ul
            %li inverse_of
            %li counter_cache
            %li has_many :through

        %section
          %h2 Avoid Queries

          %pre
            %code.ruby
              :preserve
                Coupon.belongs_to :purchase, counter_cache: true
                class Purhcase &lt; AR::Base
                  has_many :coupons
                
                  def coupon_codes
                    coupons.map(&:code)
                  end
                end
          %pre.fragment
            %code.ruby
              :preserve
                def coupon_codes
                  coupon_count > 0 ? coupons.map(&:code) : []
                end
        %section
          %pre
            %code.ruby
              :preserve
                Comment.belongs_to :post, counter_cache: true
          %pre
            %code.haml.line-numbers
              - a = "Comments (\#{@post.comments.count})"
              :preserve
                - if @post.comments.any?
                  - @post.comments.each do |comment|
                    #{a}
                    = render partial: "posts/comment", object: comment
                - else
                  No Comments Made yet
          %h3 
            How many queries 
            %br
            in the worst case scenario?
                    
          %h2.fragment 3 Queries
        %section
          %h3 Rails Feature Proposal

          %p 
            %br
            Make use of `counter_cache` in methods like
            %ul
              %li count
              %li any?
              %li empty?
            %br
            Avoid loading completely when counter is 0
          :sass
            .thumb-up
              position: absolute
              right: 0
              top: 10%
          %img.thumb-up.fragment.fade-left{style: "width: 50%; right: 0; border: 0; background-color: transparent", src: "https://files.slack.com/files-tmb/T028ZNCBK-F5KPKCBK3-807a914d8f/bogdan_480.png"}

        %section
          %h2 Cache Columns
          %h3 as a way to avoid queries
        %section
          %h3 Cache immutable data

          %pre
            %code.ruby
              :preserve
                create_table :comments do |t|
                  t.integer :post_id
                  t.integer :author_id
                  t.text :body
                end

            \#body is mutable but #post and #author are not
          %pre.fragment
            %code.ruby
              :preserve
                Comment.has_one :feed_activity
                FeedActivity.before_validation do 
                  self.forum = comment.post.forum
                  self.author = comment.author
                }

        %section
          -#%h2 Cache Columns

          %h3 Pros
          %ul
            %li Cheap to make
            %li Cheap to maintain for immutable data
          %h3 Cons
          %ul
            %li Expensive to maintain for mutable data
            %li Takes disc space

        %section
          %h1 Speedup queries

        %section
          %pre
            %code.ruby
              :preserve
                add_index :users, :email, unique: true
                add_index :products, :category_id

          %ul
            %li Become actual after 100_000 records
            %li Indexes take disk space
            %li Foreign Key index is almost always a good idea

        %section

          %h2 Index Usage Guide

          %p Index by one column will help you make the related query fast
          %pre
            %code.sql
              :preserve
                SELECT * FROM users WHERE email = ?

          .fragment
            %p 
              Multi-column index can be used to query 
              %br
                by 1st column, 1st &amp; 2nd column etc

            %pre
              %code.ruby
                :preserve
                  add_index :users_roles, [:user_id, :role_id], unique: true
                  add_index :users_roles, :role_id

        %section
          %h3 Some Math

          %p 
            If I have a table with N columns, how many indexes do I need to cover 100% of possible where conditions?
        %section
          %h3 2**n
          %h3.fragment How about partial index usage optimization?

        %section
          
          %h3 Well, a little less
          %h3.fragment 2**(n-1)

          %div
            %table
              %tr
                %th Columns
                %th Indexes
                %th List
              %tr
                %td 1
                %td 1
                %td a
              %tr
                %td 2
                %td 2
                %td a-b b
              %tr
                %td 3
                %td 4
                %td a-b-c b-c a-c c
              %tr
                %td 4
                %td 8
                %td 
                  a-b-c-d b-c-d a-c-d a-b-d a-d b-d c-d d
              %tr
                %td 5
                %td 16
                %td 
                  a-b-c-d-e b-c-d-e a-c-d-e a-b-d-e a-b-c-e a-b-e a-c-e b-c-e b-d-e c-d-e a-d a-e b-d b-e c-e e
        %section
          %h3 Indexes are not free 
          %h4 they take the disk space

          %img{src: "https://monosnap.com/file/uy3gMAu72njmGRyvgTQixzqIzVUrNr.png"}
        %section
          %h2 Index Usage Optimization

          %pre
            %code.sql
              :preserve
                SELECT * FROM posts p 
                WHERE p.forum_id = ? AND p.user_id = ? AND p.created_at = ?
          
          %ul
            %li Index A: forum_id, created_at
            %li Index B: user_id

        %section
          %h3 But the DB may disagree

          %pre
            %code.sql
              :preserve
                SELECT * FROM posts p USE INDEX(index_b)
                WHERE p.forum_id = ? AND p.user_id = ? AND p.created_at = ?
        %section
          %h4 
            Apply indexes to columns that would 
          %h3.yellow cut significant amount of data 
          %h4 from the result in where condition

        %section
          %h4 Indexes are the best to speed up your queries
          %h3 But they are not the only one
        %section
          %h3 Extra Conditions
          
          %pre
            %code.sql
              :preserve
                SELECT * FROM offers
                WHERE campaign_id = {campaign.id}
                AND site_id = {campaign.site.id}
          %pre
            %code.ruby
              :preserve
                AND created_at between {campaign.created_at} AND {campaign.expired_at}
                    

        %section
          %h3 What about cache tables?

          Store -&gt; Product &lt;- Category
          %pre
            %code.ruby
              :preserve
                create_table :stores_categories do |t|
                  t.integer :product_id
                  t.integer :category_id
                end
          %p.fragment
            Faster join because of low number of records
                  
        %section
          %h2 Avoid Join

          %pre
            %code.ruby
              :preserve
                Coupon.belongs_to :purchase, counter_cache: true
                Purchase.has_many :coupons

                Purchase.scope :with_free_shipping, -> {
                 joins(:coupons).
                   where(coupons: {free_shipping: true}).
                }

          %pre.fragment
            %code.ruby
              :preserve
                where("coupons_count &gt; 0")
        %section

          %h2 DB is smart on doing JOINS

          %pre
            %code.ruby
              :preserve
                Purchase.
                  where(created_at: 30.days.ago..Time.now).
                  with_free_shipping

          %pre
            %code.sql
              :preserve
                SELECT * FROM purchases 
                INNER JOIN coupons ON purchases.coupon_id = coupons.id
                WHERE 
                  (purchases.created_at BETWEEN ? AND ?) AND 
                  purchases.coupons_count &gt; 0 AND 
                  coupons.free_shipping
        %section
          %h2 Query execution mystery

          %pre
            %code.sql
              :preserve
                SELECT * FROM members LEFT JOIN projects ON 
                members.project_id = projects.id
                WHERE projects.organization_id = ?

                SELECT * FROM members WHERE project_id in (
                  SELECT * FROM projects WHERE organization_id = ?)

                SELECT id FROM projects WHERE organization_id = ?
                -- &lt;some ruby code here&gt;
                SELECT * FROM members WHERE project_id in (?)
        %section
          %h3 Nested Query or Join Avoidance

          %pre
            %code.ruby
              :preserve
                Product.where(
                  category_id: Category.where(archived: false).ids
                )
                
          %pre
            %code.sql
              :preserve
                SELECT id FROM categories WHERE archived = false
                SELECT * FROM product WHERE category_id in (1,2,3,4,5 ....)

          %pre.fragment
            %code.sql
              :preserve
                SELECT * FROM product WHERE category_id = 1 UNION
                SELECT * FROM product WHERE category_id = 2 UNION
                SELECT * FROM product WHERE category_id = 3 UNION ...

          %p.fragment
            "OR" operator is bad for your performance
            %br
            Beware of "OR" in the hidden form

                
        %section
          %h3 "Nested queries are evil" 
          %h3 (c) My University Professor 2006

        %section
          %h2 Nested queries are good when

          %ul
            %li
              They is 
              %span.red no closures
              %ul
                %li  Result is the same for each query row
            %li 
              The result set has not more than 
              %span.red 100 records
            %li They let you define a stricter query execution plan
        %section
          %h3 In most cases, two simple queries will be faster than one complex
          %h3.fragment if nested query didn't work
        %section
          %h2 Query Execution Plan
          %ul
            %li PostgreSQL <code>explain</code> statement is amazing
            %li MySQL <code>explain</code> statement is useless

        %section

          %h2 PostgreSQL Explain
          %pre
            %code
              :preserve
                tpcc=# explain select (
                  select count(*) from item where i_id = empty.i_id
                ) from empty;

                 QUERY PLAN
                ----------------------------------------------------------------------------------
                Seq Scan on empty (cost=0.00..19933.22 rows=2400 width=4)
                  SubPlan
                    -> Aggregate (cost=8.28..8.29 rows=1 width=0)
                      -> Index Scan using pk_item on item (cost=0.00..8.28 rows=1 width=0)
                          Index Cond: (i_id = $0)

          %a{href: "https://wiki.postgresql.org/wiki/File:Explaining_EXPLAIN.pdf"} 
            wiki.postgresql.org/wiki/File:Explaining_EXPLAIN.pdf
        %section
          %h3 Real Example:
          %h2 Leaderboard

          %table
            %tr
              %th Rank
              %th Name
              %th Comments
            %tr
              %td 1st
              %td Jonh
              %td 97
            %tr
              %td 2nd
              %td Rick
              %td 95
            %tr
              %td 3rd
              %td Aaron
              %td 60

            -#%tr
              %td{rowspan: '100%'}

            %tr.fragment
              %td 95th
              %td You
              %td 20




        %section
          %h2 Manually controlling the query execution plan
          %pre
            %code.ruby
              :preserve
                find_person_by_id(add_ranking(get_leaderboard), ?)
          %pre.fragment
            %code.sql.line-numbers
              :preserve
                SELECT people.*, leaderboard.* FROM (
                  SELECT leaders.*, CAST(@rnk:=@rnk+1 AS UNSIGNED) leaderboard_rank 
                  FROM (
                    SELECT  `comments`.`person_id` person_id, 
                      COUNT(*) AS `leaderboard_count` 
                    FROM `comments`  
                    WHERE `comments`.`created_at` BETWEEN ? AND ? 
                    GROUP BY `comments`.`person_id` 
                    ORDER BY `leaderboard_count` DESC 
                    LIMIT ?
                  ) AS leaders, (SELECT @rnk:=0) AS ranking
                ) AS leaderboard left join people on people.id = leaderboard.person_id 
                WHERE people.id = ?
                ORDER BY leaderboard_rank
        %section
          Supercomplex SQL query can be fast
          %br
          if you control the execution plan
          %pre
            %code.sql
              :preserve
                SELECT people.*, leaderboard.* FROM (
                  SELECT leaders.*, CAST(@rnk:=@rnk+1 AS UNSIGNED) leaderboard_rank FROM (
                    SELECT `offers`.`person_id` person_id, COUNT(*) AS `leaderboard_count`, SUM(`referrals`.`referred_subtotal`) AS `leaderboard_subtotal` FROM `referrals` 
                      INNER JOIN `offers` ON `offers`.`id` = `referrals`.`offer_id` 
                      INNER JOIN `origins` ON `origins`.`id` = `referrals`.`referred_origin_id` AND `origins`.`type` IN ('Event', 'Purchase') 
                      WHERE `referrals`.`site_id` = 8863 AND `referrals`.`status` IN ('approved', 'unblocked') AND 
                        (`offers`.`person_id` IS NOT NULL) AND `origins`.`event_category_id` = 17201 AND 
                        (`referrals`.`status` != 'blocked') AND `referrals`.`campaign_id` = 51710 AND 
                        (`referrals`.`created_at` BETWEEN '2017-01-26 18:41:00' AND '2017-03-03 12:58:44') 
                      GROUP BY `offers`.`person_id` 
                      ORDER BY `leaderboard_count` DESC, `leaderboard_subtotal` DESC, `offers`.`person_id` ASC
                  ) AS leaders, (SELECT @rnk:=0) AS ranking
                ) AS leaderboard 
                LEFT JOIN people on people.id = leaderboard.person_id 
                WHERE `people`.`site_id` = 8863 AND `people`.`id` = 99443765 
                ORDER BY leaderboard_rank

        %section
          %h3 Use Cache

          %ul
            %li Key-Value Database
            %li HTTP ETAG cache
        %section
          
          %pre
            %code.ruby
              :preserve
                class Forum
                  def comments_leaderboard
                    Rails.cache.fetch(leaderboard_key) do
                      all_that_heavy_sql
                    end
                  end
                end

          %pre.fragment
            %code.ruby
              :preserve
                def leaderboard_key
                  ["comments_leaderboard", forum.id, 
                    comments.order(:id).last]
                end
        %section
          %h3 Rails 5.2
          %h3 
            .fragment.strike Expiration by key
            .fragment Expiration by version

          %h3.fragment
            PR #29092:
            %br

            %a{href: "https://github.com/rails/rails/pull/29092"} 
              Recyclable Cache Keys

        %section
          %h3 Expiration Version Feature

          %pre
            %code.ruby
              :preserve
                Rails.cache.fetch(["post_preview", post]) do
                  heavy_lifting
                end
          %pre
            %code.ruby
              :preserve
                class Post
                  def cache_key
                    "post/#{'#{id}'}"
                  end
                  def cache_version
                    updated_at
                  end
                end   
          %img.splash-image.fragment.fade-in{src: "http://www.rizzimichele.it/wp-content/themes/evolve/library/media/images/parallax/Off_topic.gif"}
          
          
        %section

          %h3 Etag Cache Example

          A very high level cache that allows to cache HTTP response in the browser
          and let browser know how that response should expire.
           
          %pre.fragment
            %code.ruby
              :preserve
                def show
                  @product = Product.find(params[:id])
                  fresh_when \
                    last_modified: @product.published_at.utc, 
                    etag: @product # [@product.id, @product.updated_at]
                end
        %section
          %h3 High Level Caching is tough

          %ul
            %li Cache Hit
            %li Invalidation
            %li Invalidation Maintenance
            %li 
              Invalidation Bugs
              %ul.fragment
                %li Description: "Sometimes..."


        %section
          %h3 Why slow?

          %ol
            %li Many Queries -&gt; Merge or Avoid Queries
            %li 
              Slow Queries -&gt; Optimize Queries
              %ol
                %li Figure Out Domain Specifics
                %li Use Indexes Effectively
                %li Control Disk Space
                %li Control Query Execution Plan
            %li Use Cache
        %section
          %h2 Thank You

          %br
          %ul
            %li http://github.com/bogdan
            %li http://gusiev.com

    %script{:src => "lib/js/head.min.js"}
    %script{:src => "js/reveal.js"}
    :javascript
      // More info https://github.com/hakimel/reveal.js#configuration
      Reveal.initialize({
      history: true,
      // More info https://github.com/hakimel/reveal.js#dependencies
      dependencies: [
        { src: 'plugin/markdown/marked.js' },
        { src: 'plugin/markdown/markdown.js' },
        { src: 'plugin/notes/notes.js', async: true },
        {src: 'plugin/line-numbers/line-numbers.js', async: false},
        { src: 'plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } }
      ]
      });
