<!doctype html>
%html{:lang => "en"}
  %head
    %meta{:charset => "utf-8"}/
    %title How to start a project?
    %meta{:content => "How to start a project", :name => "description"}/
    %meta{:content => "Bogdan Gusiev", :name => "author"}/
    %meta{:content => "yes", :name => "apple-mobile-web-app-capable"}/
    %meta{:content => "black-translucent", :name => "apple-mobile-web-app-status-bar-style"}/
    %meta{:content => "width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no", :name => "viewport"}/
    %link{:href => "http://lab.hakim.se/reveal-js/css/reveal.css", :rel => "stylesheet"}/
    %link{:href => "http://lab.hakim.se/reveal-js/css/theme/night.css", :rel => "stylesheet"}/
    / For syntax highlighting
    %link{:href => "http://lab.hakim.se/reveal-js/lib/css/zenburn.css", :rel => "stylesheet"}/
    
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.2.0/jquery.min.js"></script>
    - if params[:'print-pdf']
      :sass
        body .reveal
          color: black !important
          h1, h2, h3, h4, h5
            color: black !important

    / If the query includes 'print-pdf', use the PDF print sheet
    :javascript
      document.write( '<link rel="stylesheet" href="http://lab.hakim.se/reveal-js/css/print/' + ( window.location.search.match( /print-pdf/gi ) ? 'pdf' : 'paper' ) + '.css" type="text/css" media="print">' );
      

    :sass
      .yellow
        color: yellow !important
      .green
        color: #17ff2e !important
      .red
        color: red !important
      .first-slide
        width: 100% !important
        height: 100% !important
        top: 0 !important
        position: absolute !important
        max-width: 100% !important
        max-height: 100% !important
        background-color: white !important
  %body
    .reveal
      .slides
        %section{}
        %section
          %h2 Optimize Database Queries
          %h2 architecture in 3 days
              
          %h3 Bogdan Gusiev
        %section
          %h3 Bogdan Gusiev:
        
          %ul
            %li Working for startups for 7 years
            %li Ruby on Rails for 7 years

        %section
          %h3 Ultimate goal

          %h2 Make you app spend time waiting on the query response

        %section

          %h2 Methods

          %ul
            %li Avoid queries
            %li Reduce number of queries
            %li Make queries faster
            %li Query from a faster place than DB

        %section
          %h2
            Types of queries
          %ul
            %li Instant - time spent mainly on transfering the data
            %li Slow - time spent on calculating the data
        %section
          %h2 Avoid Queries
          %pre
            %code.ruby
              :preserve
                Campaign.has_many :offers
                Offer.belongs_to :campaign

          %pre
            %code
              :preserve
                 >> campaign.offers.first.campaign
                 Offer Load    (0.3ms)  SELECT  `offers`.* FROM `offers` WHERE `offers`.`campaign_id` = 1  ORDER BY `offers`.`created_at` DESC LIMIT 1
                 Campaign Load (0.3ms)  SELECT  `campaigns`.* FROM `campaigns` WHERE `campaigns`.`id` = 1 LIMIT 1

        %section
          %pre
            %code.haml
              :preserve
                = render partial: "offers/offer", collection: campaign.offers
          %pre
            %code.haml
              :preserve
                # app/views/offers/_offer.html.haml
                %p= link_to offer.name, campaign_offer_path(offer.campaign, offer)


        %section
          %h1.yellow Solution

          %pre
            %code.ruby
              :preserve
                Campaign.has_many :offers, inverse_of: :campaign
                Offer.belongs_to :campaign, inverse_of: :offers   

        %section
          %pre
            %code.ruby
              :preserve
                class UserRole &lt; ARBase
                  validates_uniqness_of :role_id, scope: [:user_id]
                end
          %h2.red Absolutely useless query!
          %h2.yellow Use unique index instead

        %section
          Rails built-in avoid queries methods:

          * inverse_of
          * counter_cache
          * has_many :through
        %section
          %h2 Avoid Queries with business logic

          %pre
            %code.ruby
              :preserve
                class Localization &lt; AR::Base
                  # cols:
                  # * web_site_id
                  # * value
                  # * created_at
                  has_many :ab_test_variants
                
                  def ab_tested?
                    ab_test_variants.any?
                  end
                end
          %pre
            %code.ruby
              :preserve
                def ab_tested?
                  value.nil? && ab_test_variants.any?
                end
                    
        %section
          %h3 Cache immutable data
          %h2 Data is immutable from business logic stand point

          Ex. Comment#post_id is immutable in 99% of projects

          Comment.has_one :feed_activity
          FeedActivity.after_create { self.post_id = comment.post_id}
        %section
          %pre
            %code.ruby
              :preserve
                Site.has_many :site_visitors
                Site.has_many :traffic_sources
          %pre
            %code.diff
              :preserve
                -  has_many :site_visitors
                +  has_many :site_visitors, ->(traffic_source) { 
                     where(site_id: traffic_source.site_id, traffic_source_id: traffic_source.id) }
        %section
          %h3 What people do in first 3 days of a project:
          %ul
            %li An ultimate 2 years roadmap
            %li 
              Technology
              %ul
                %li Language
                %li Framework
                %li Database
            %li Forecast scaling
            %li An ultimate money spend roadmap

        %section
        %section
          %h2 Thank You

          %br
          %ul
            %li http://github.com/bogdan
            %li http://gusiev.com

    %script{:src => "http://lab.hakim.se/reveal-js/lib/js/head.min.js"}
    %script{:src => "http://lab.hakim.se/reveal-js/js/reveal.js"}
    :javascript
      // Full list of configuration options available here:
      // https://github.com/hakimel/reveal.js#configuration
      Reveal.initialize({
      controls: true,
      progress: true,
      history: true,
      center: true,

      theme: Reveal.getQueryHash().theme || 'simple', // available themes are in /css/theme
      transition: Reveal.getQueryHash().transition || 'fade', // default/cube/page/concave/zoom/linear/fade/none

      // Optional libraries used to extend on reveal.js
      dependencies: [
      // { src: 'lib/js/classList.js', condition: function() { return !document.body.classList; } },
      { src: 'http://lab.hakim.se/reveal-js/plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
      { src: 'http://lab.hakim.se/reveal-js/plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
      { src: 'http://lab.hakim.se/reveal-js/plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } },
      // { src: 'plugin/zoom-js/zoom.js', async: true, condition: function() { return !!document.body.classList; } },
      // { src: 'plugin/notes/notes.js', async: true, condition: function() { return !!document.body.classList; } }
      // { src: 'plugin/search/search.js', async: true, condition: function() { return !!document.body.classList; } }
      // { src: 'plugin/remotes/remotes.js', async: true, condition: function() { return !!document.body.classList; } }
      ]
      });
      Reveal.addEventListener( 'slidechanged', function( event ) {
        $('.first-slide').hide()
      } );
