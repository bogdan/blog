<?xml version="1.0" encoding="UTF-8"?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your blog. -->
<!-- It contains information about your blog's posts, comments, and categories. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your blog. -->

<!-- To import this information into a WordPress blog follow these steps. -->
<!-- 1. Log into that blog as an administrator. -->
<!-- 2. Go to Manage: Import in the blog's admin panels. -->
<!-- 3. Choose "WordPress" from the list. -->
<!-- 4. Upload this file using the form provided on that page. -->
<!-- 5. You will first be asked to map the authors in this export file to users -->
<!--    on the blog.  For each author, you may choose to map to an -->
<!--    existing user on the blog or to create a new user -->
<!-- 6. WordPress will then import each of the posts, comments, and categories -->
<!--    contained in this file into your blog -->

<!-- generator="WordPress/2.5" created="2011-05-18 13:52"-->
<rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.0/"
>

<channel>
	<title>Bogdan Gusiev's blog</title>
	<link>http://gusiev.com</link>
	<description>How to make your Ruby on Rails application</description>
	<pubDate>Thu, 14 Apr 2011 16:04:07 +0000</pubDate>
	<generator>http://wordpress.org/?v=2.5</generator>
	<language>en</language>
	<wp:wxr_version>1.0</wp:wxr_version>
	<wp:base_site_url>http://gusiev.com</wp:base_site_url>
	<wp:base_blog_url>http://gusiev.com</wp:base_blog_url>
	<wp:category><wp:category_nicename>ideas</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Ideas]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>it</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[IT-related]]></wp:cat_name><wp:category_description><![CDATA[Posts related to Information Technologies industry that is my professional sphere.]]></wp:category_description></wp:category>
	<wp:category><wp:category_nicename>life</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Life]]></wp:cat_name><wp:category_description><![CDATA[My real life stories.]]></wp:category_description></wp:category>
	<wp:category><wp:category_nicename>programming</wp:category_nicename><wp:category_parent>IT-related</wp:category_parent><wp:cat_name><![CDATA[programming]]></wp:cat_name><wp:category_description><![CDATA[Category is related to Programming topics, technical solutions.]]></wp:category_description></wp:category>
	<wp:category><wp:category_nicename>shots</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Shots]]></wp:cat_name><wp:category_description><![CDATA[Category is primary designed for Aphorisms.]]></wp:category_description></wp:category>
	<wp:category><wp:category_nicename>uncategorized</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Uncategorized]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>admin</wp:category_nicename><wp:category_parent>IT-related</wp:category_parent><wp:cat_name><![CDATA[Administration]]></wp:cat_name><wp:category_description><![CDATA[Network Administration topic, administrator how-to and many other stuff.]]></wp:category_description></wp:category>
	<wp:tag><wp:tag_slug>activerecord</wp:tag_slug><wp:tag_name><![CDATA[ActiveRecord]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>add-new-tag</wp:tag_slug><wp:tag_name><![CDATA[Add new tag]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>ajax</wp:tag_slug><wp:tag_name><![CDATA[ajax]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>ant</wp:tag_slug><wp:tag_name><![CDATA[ant]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>aphorism</wp:tag_slug><wp:tag_name><![CDATA[aphorism]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>api</wp:tag_slug><wp:tag_name><![CDATA[api]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>application</wp:tag_slug><wp:tag_name><![CDATA[application]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>architecture</wp:tag_slug><wp:tag_name><![CDATA[architecture]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>article</wp:tag_slug><wp:tag_name><![CDATA[article]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>author</wp:tag_slug><wp:tag_name><![CDATA[author]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>bdd</wp:tag_slug><wp:tag_name><![CDATA[bdd]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>behavior</wp:tag_slug><wp:tag_name><![CDATA[behavior]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>behaviour</wp:tag_slug><wp:tag_name><![CDATA[behaviour]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>branch</wp:tag_slug><wp:tag_name><![CDATA[branch]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>capistrano</wp:tag_slug><wp:tag_name><![CDATA[capistrano]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>class</wp:tag_slug><wp:tag_name><![CDATA[class]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>commit</wp:tag_slug><wp:tag_name><![CDATA[commit]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>content</wp:tag_slug><wp:tag_name><![CDATA[content]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>context</wp:tag_slug><wp:tag_name><![CDATA[context]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>contribution</wp:tag_slug><wp:tag_name><![CDATA[contribution]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>controller</wp:tag_slug><wp:tag_name><![CDATA[controller]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>criticism</wp:tag_slug><wp:tag_name><![CDATA[criticism]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>css</wp:tag_slug><wp:tag_name><![CDATA[css]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>data</wp:tag_slug><wp:tag_name><![CDATA[data]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>database</wp:tag_slug><wp:tag_name><![CDATA[database]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>debug</wp:tag_slug><wp:tag_name><![CDATA[debug]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>deployment</wp:tag_slug><wp:tag_name><![CDATA[deployment]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>design</wp:tag_slug><wp:tag_name><![CDATA[design]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>documentation</wp:tag_slug><wp:tag_name><![CDATA[documentation]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>dom</wp:tag_slug><wp:tag_name><![CDATA[dom]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>element</wp:tag_slug><wp:tag_name><![CDATA[element]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>encapsulation</wp:tag_slug><wp:tag_name><![CDATA[encapsulation]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>escape</wp:tag_slug><wp:tag_name><![CDATA[escape]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>exception</wp:tag_slug><wp:tag_name><![CDATA[exception]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>fake</wp:tag_slug><wp:tag_name><![CDATA[fake]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>file</wp:tag_slug><wp:tag_name><![CDATA[file]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>find</wp:tag_slug><wp:tag_name><![CDATA[find]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>git</wp:tag_slug><wp:tag_name><![CDATA[git]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>github</wp:tag_slug><wp:tag_name><![CDATA[github]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>hoptoad</wp:tag_slug><wp:tag_name><![CDATA[hoptoad]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>howto</wp:tag_slug><wp:tag_name><![CDATA[howto]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>html</wp:tag_slug><wp:tag_name><![CDATA[html]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>http</wp:tag_slug><wp:tag_name><![CDATA[http]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>humor</wp:tag_slug><wp:tag_name><![CDATA[humor]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>idea</wp:tag_slug><wp:tag_name><![CDATA[idea]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>inheritance</wp:tag_slug><wp:tag_name><![CDATA[inheritance]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>inheritence</wp:tag_slug><wp:tag_name><![CDATA[inheritence]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>input</wp:tag_slug><wp:tag_name><![CDATA[input]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>interface</wp:tag_slug><wp:tag_name><![CDATA[interface]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>it-documentation</wp:tag_slug><wp:tag_name><![CDATA[IT documentation]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>it</wp:tag_slug><wp:tag_name><![CDATA[IT-related]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>it-related</wp:tag_slug><wp:tag_name><![CDATA[IT-related]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>java</wp:tag_slug><wp:tag_name><![CDATA[java]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>javascript</wp:tag_slug><wp:tag_name><![CDATA[javascript]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>jboss</wp:tag_slug><wp:tag_name><![CDATA[jboss]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>jquery</wp:tag_slug><wp:tag_name><![CDATA[jquery]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>json</wp:tag_slug><wp:tag_name><![CDATA[json]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>logging</wp:tag_slug><wp:tag_name><![CDATA[logging]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>lsp</wp:tag_slug><wp:tag_name><![CDATA[LSP]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>matcher</wp:tag_slug><wp:tag_name><![CDATA[matcher]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>method</wp:tag_slug><wp:tag_name><![CDATA[method]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>mind</wp:tag_slug><wp:tag_name><![CDATA[mind]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>mysql</wp:tag_slug><wp:tag_name><![CDATA[mysql]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>named_scope</wp:tag_slug><wp:tag_name><![CDATA[named_scope]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>nesting</wp:tag_slug><wp:tag_name><![CDATA[nesting]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>oop</wp:tag_slug><wp:tag_name><![CDATA[oop]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>password</wp:tag_slug><wp:tag_name><![CDATA[password]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>pattern</wp:tag_slug><wp:tag_name><![CDATA[pattern]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>perfomance</wp:tag_slug><wp:tag_name><![CDATA[perfomance]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>populate</wp:tag_slug><wp:tag_name><![CDATA[populate]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>privacy</wp:tag_slug><wp:tag_name><![CDATA[privacy]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>programming</wp:tag_slug><wp:tag_name><![CDATA[programming]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>quality</wp:tag_slug><wp:tag_name><![CDATA[quality]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>query</wp:tag_slug><wp:tag_name><![CDATA[query]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>rails</wp:tag_slug><wp:tag_name><![CDATA[rails]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>random</wp:tag_slug><wp:tag_name><![CDATA[random]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>reader</wp:tag_slug><wp:tag_name><![CDATA[reader]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>refactoring</wp:tag_slug><wp:tag_name><![CDATA[refactoring]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>renaming</wp:tag_slug><wp:tag_name><![CDATA[renaming]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>review</wp:tag_slug><wp:tag_name><![CDATA[review]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>route</wp:tag_slug><wp:tag_name><![CDATA[route]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>rspec</wp:tag_slug><wp:tag_name><![CDATA[rspec]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>ruby</wp:tag_slug><wp:tag_name><![CDATA[ruby]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>science</wp:tag_slug><wp:tag_name><![CDATA[science]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>seam</wp:tag_slug><wp:tag_name><![CDATA[seam]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>security</wp:tag_slug><wp:tag_name><![CDATA[security]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>sed</wp:tag_slug><wp:tag_name><![CDATA[sed]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>select</wp:tag_slug><wp:tag_name><![CDATA[select]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>selenium</wp:tag_slug><wp:tag_name><![CDATA[selenium]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>service</wp:tag_slug><wp:tag_name><![CDATA[service]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>sql</wp:tag_slug><wp:tag_name><![CDATA[sql]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>substitute</wp:tag_slug><wp:tag_name><![CDATA[substitute]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>success</wp:tag_slug><wp:tag_name><![CDATA[success]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>tdd</wp:tag_slug><wp:tag_name><![CDATA[tdd]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>technology</wp:tag_slug><wp:tag_name><![CDATA[technology]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>test</wp:tag_slug><wp:tag_name><![CDATA[test]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>testing</wp:tag_slug><wp:tag_name><![CDATA[testing]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>thoughts</wp:tag_slug><wp:tag_name><![CDATA[thoughts]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>timestamp</wp:tag_slug><wp:tag_name><![CDATA[timestamp]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>title</wp:tag_slug><wp:tag_name><![CDATA[title]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>tomcat</wp:tag_slug><wp:tag_name><![CDATA[tomcat]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>usability</wp:tag_slug><wp:tag_name><![CDATA[usability]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>user-story</wp:tag_slug><wp:tag_name><![CDATA[user story]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>validation</wp:tag_slug><wp:tag_name><![CDATA[validation]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>vim</wp:tag_slug><wp:tag_name><![CDATA[vim]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>wave</wp:tag_slug><wp:tag_name><![CDATA[wave]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>windows</wp:tag_slug><wp:tag_name><![CDATA[windows]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>xss</wp:tag_slug><wp:tag_name><![CDATA[xss]]></wp:tag_name></wp:tag>
		<item>
<title>Substitute driven refactoring</title>
<link>http://gusiev.com/?p=42</link>
<pubDate>Thu, 01 Jan 1970 03:00:00 +0000</pubDate>
<dc:creator><![CDATA[Bogdan Gusiev]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<category domain="tag"><![CDATA[find]]></category>

		<category domain="tag" nicename="find"><![CDATA[find]]></category>

		<category domain="tag"><![CDATA[refactoring]]></category>

		<category domain="tag" nicename="refactoring"><![CDATA[refactoring]]></category>

		<category domain="tag"><![CDATA[renaming]]></category>

		<category domain="tag" nicename="renaming"><![CDATA[renaming]]></category>

		<category domain="tag"><![CDATA[sed]]></category>

		<category domain="tag" nicename="sed"><![CDATA[sed]]></category>

		<category domain="tag"><![CDATA[substitute]]></category>

		<category domain="tag" nicename="substitute"><![CDATA[substitute]]></category>

<guid isPermaLink="false">http://gusiev.com/?p=42</guid>
<description></description>
<content:encoded><![CDATA[If you ever find yourself renaming a core class of the application you should think about speed up the process. In case when class name or method name is unique - <em>Substitute</em> is dominating IDE refactoring tools. 

Running sever find/sed commands in console will cover everything except files renaming of course. Be very attentive and figure out all possible variants of name (CamelCase, under_score, plural/singular form). In order to not touch plural form while working with singular form start from plural form first.

<pre><code># Rename classes like OldClassNamesController
find ./path -type f -exec sed -i 's/OldClassNames/NewClassNames/g'
find ./path -type f -exec sed 's/OldClassName/NewClassName/g'
find ./path -type f -exec sed 's/old_class_names/new_class_names/g'
find ./path -type f -exec sed 's/new_class_name/new_class_name/g'</code></pre>

The thing left rename related files and directories. 
<pre><code>$old_name="old_class_name"
$new_name="new_class_name"
for filename in $(find -name $old_name*)
 do
  echo $filename;
  w_o_ext=$(echo $filename | sed 's/$old_name/$new_name/g');
  echo $w_o_ext;
  mv $filename $w_o_ext;
done
</code></pre>

Before you commit:
<ul>
	<li>Check that database doesn't store any Class name that is under renaming. Apply migration in "Yes" case.</li>
     	<li>Check for super-meta calls where class name or method name is constructed dynamically(you didn't do that, right?)</li>
	<li>Run your unit tests(you have some, yeah?) and check core pages before commit.</li>
	<li>Check diff with your version control system</li>
</ul>



]]></content:encoded>
<wp:post_id>42</wp:post_id>
<wp:post_date>0000-00-00 00:00:00</wp:post_date>
<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name></wp:post_name>
<wp:status>draft</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1294654907</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>5 things I would improve in Rails</title>
<link>http://gusiev.com/?page_id=48</link>
<pubDate>Thu, 01 Jan 1970 03:00:00 +0000</pubDate>
<dc:creator><![CDATA[Bogdan Gusiev]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://gusiev.com/?page_id=48</guid>
<description></description>
<content:encoded><![CDATA[Warning: the content of this article is not considered trivial, like "Make ActiveRecord .... just like DataMapper". These are valuable and realistic improvements that was pain in the ass for me during 2 years development with rails.
<!--more--><br/><br/>
<h3>Multiple select problem</h3>

Everyone should know the problem with html checkbox that was solved pretty good in rails <a href="http://api.rubyonrails.org/classes/ActionView/Helpers/FormHelper.html#method-i-check_box">FormHelper#check_box</a>. The same problem appear for multiple select. When you turnoff all options, server don't receive neither nil nor empty array as the parameter and AR can't guess that all collection should be deselected.<br/>
Solution is to add hidden input just like for checkbox. This is how it can be fixed now:
<pre><code>module CustomFormBuilder 
  def select(method, choices, options = {}, html_options = {})
     ((html_options[:multiple] ? hidden_field(method, :multiple => true, :value => "") : "") +
       super(method, choices, options, html_options)).html_safe
   end
end

ActionView::Base.default_form_builder = CustomFormBuilder</code></pre>
 
But this is definitely should be rails behavior.

<h3>Mass assignment protection should be more noisy</h3>

Mass assignment protection is a good security solution. One thing I don't understand is why is it a warning but not exception. It can be caused by to reasons:
<ul>
  <li>Bug in the source code</li>	
  <li>Attempt to hack something</li>
</ul>

Both cases are exceptional and dev team should know about them as soon as possible and normal flow should be interrupted. I don't see any use case when I want to see warning instead of exception. 

<h3>Migrations rollback in production mode</h3>

Rails does good work by rollback all structural changes of the last migration when database support <a href="https://github.com/rails/rails/blob/master/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb#L71">ddl transactions</a>. When an issue appear during deployment the source code will be rollback to the previous successfully deployed version, but the database will rollback just the last migration, but not all applied migrations. 
Migrator should be improved in production environment to rollback all applied migrations instead of just the last one.

<h3></h3>
]]></content:encoded>
<wp:post_id>48</wp:post_id>
<wp:post_date>0000-00-00 00:00:00</wp:post_date>
<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name></wp:post_name>
<wp:status>draft</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>page</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1302797017</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_page_template</wp:meta_key>
<wp:meta_value>default</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>Logging external http api calls in Rails log</title>
<link>http://gusiev.com/?p=44</link>
<pubDate>Thu, 01 Jan 1970 03:00:00 +0000</pubDate>
<dc:creator><![CDATA[Bogdan Gusiev]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<category domain="tag"><![CDATA[api]]></category>

		<category domain="tag" nicename="api"><![CDATA[api]]></category>

		<category domain="tag"><![CDATA[http]]></category>

		<category domain="tag" nicename="http"><![CDATA[http]]></category>

		<category domain="tag"><![CDATA[logging]]></category>

		<category domain="tag" nicename="logging"><![CDATA[logging]]></category>

		<category domain="tag"><![CDATA[rails]]></category>

		<category domain="tag" nicename="rails"><![CDATA[rails]]></category>

		<category domain="tag"><![CDATA[ruby]]></category>

		<category domain="tag" nicename="ruby"><![CDATA[ruby]]></category>

<guid isPermaLink="false">http://gusiev.com/?p=44</guid>
<description></description>
<content:encoded><![CDATA[Http api calls are pretty similar to SQL queries - they query data from external source to ruby code workspace. So I think it's a good idea to log them just like ActiveRecord does with SQL queries. 
<pre><code>  Location Load (25.1ms)   SELECT * FROM "locations" WHERE ("locations"."id" = 2548) ORDER BY title</code></pre>

This simple peace of code could be very helpful in case of debugging the HTTP api:<br/>
<a href="https://gist.github.com/846102">Log external http calls in rails log</a> 
<br/>
<a href="http://img6.imagebanana.com/img/zs0jw1cc/screenshot_013.png">Screenshot</a>
<br/>
<br/>
Want to show the most interesting part:
<pre><code>  def request(request, body = nil, &block)
    time = Time.now
    response = request_without_log(request, body, &block)
    response
  ensure
    if self.started?
      url = "http#{"s" if self.use_ssl?}://#{self.address}:#{self.port}#{request.path}"
      ofset = Time.now - time
      rails_log("HTTP #{request.method} (%0.2fms)" % (ofset * 1000), url)
      rails_log("POST params", request.body) if request.is_a?(::Net::HTTP::Post)
      if defined?(response) && response
        rails_log("Response status", "#{response.class} (#{response.code})") 
        body = response.body
        rails_log("Response body", body) unless body.is_a?(Net::ReadAdapter)
      end
    end</code></pre>
<br/>
Pay attention on how <strong>ensure</strong> works with context.
The <em>response</em> local variable defined inside of <em>def</em> and <em>ensure</em>, but still accessible in after ensure if there was no exception inside of <em>request_without_log</em>. This would never be possible in static programming language.
]]></content:encoded>
<wp:post_id>44</wp:post_id>
<wp:post_date>0000-00-00 00:00:00</wp:post_date>
<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name></wp:post_name>
<wp:status>draft</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1305319314</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>5 things I would improve in Rails</title>
<link>http://gusiev.com/?p=49</link>
<pubDate>Thu, 01 Jan 1970 03:00:00 +0000</pubDate>
<dc:creator><![CDATA[Bogdan Gusiev]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<category domain="tag"><![CDATA[contribution]]></category>

		<category domain="tag" nicename="contribution"><![CDATA[contribution]]></category>

		<category domain="tag"><![CDATA[criticism]]></category>

		<category domain="tag" nicename="criticism"><![CDATA[criticism]]></category>

		<category domain="tag"><![CDATA[rails]]></category>

		<category domain="tag" nicename="rails"><![CDATA[rails]]></category>

<guid isPermaLink="false">http://gusiev.com/?p=49</guid>
<description></description>
<content:encoded><![CDATA[Warning: the content of this article is not considered trivial, like "Make ActiveRecord .... just like DataMapper". These are valuable and realistic improvements that fixes significant problems that I met during 3 years of development with rails. <!--more-->


<h3>Multiple select problem</h3>
Everyone should know the problem with html checkbox that was fixed pretty good in rails <a href="http://api.rubyonrails.org/classes/ActionView/Helpers/FormHelper.html#method-i-check_box">FormHelper#check_box</a>. The same problem appear for multiple select. When you turnoff all options, server don't receive neither nil nor empty array as the parameter and AR can't guess that all collection should be deselected. That is not rails fault, but can be solved in rails helpers.
Solution is to add hidden input just like for checkbox. This is how it can be fixed now:
<pre><code>module CustomFormBuilder 
  def select(method, choices, options = {}, html_options = {})
     ((html_options[:multiple] ? hidden_field(method, :multiple =&gt; true, :value =&gt; "") : "") +
       super(method, choices, options, html_options)).html_safe
   end
end

ActionView::Base.default_form_builder = CustomFormBuilder</code></pre>
But this is definitely should be rails behavior.


<h3>Mass assignment protection should be more noisy</h3>
Mass assignment protection is a good security solution. One thing I don't understand is why is it a warning but not exception. It can be caused by two reasons:
<ul>
	<li>Bug in the source code</li>
	<li>Attempt to hack something</li>
</ul>
Both cases are exceptional and dev team should know about them as soon as possible and normal flow should be interrupted. I don't see any use case when I want to see warning instead of exception.

<h3>Migrations rollback in production mode</h3>
Rails does good work by rollback all structural changes of the last migration when database support <a href="https://github.com/rails/rails/blob/master/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb#L71">ddl transactions</a>. When an issue appear during deployment the source code will be rollback to the previous successfully deployed version, but the database will rollback just the last migration, but not all applied migrations.  Migrator should be improved in production environment to rollback all applied migrations instead of just the last one.



<h3>Internal validation concept</h3>
All validation in rails is frontend oriented: every validation error suppose to be displayed to user. But in real world this is not true. Some validation is considered internal like:
<pre><code>class Comment &lt; AR::Base
  validates_presence_of :author, :class_name =&gt; "User"
end</code></pre>
In this case #author is usually set from #current_user in controller. And if that is not done user see the "Author is required" error in form and don't understand what's wrong. Moreover developers don't know about the issue. This problem can be solved at database level with constraint. Some people accept that approach, but some don't:
<ul>
	<li>Database schema is more hard to change than code.</li>
	<li>Constraints functionality is limited - use case with comment author is covered but there are more complicated ones</li>
	<li>By doing system validation in database level we split the logic in two places.</li>
</ul>
So, my proposal is having a <em>bang</em> version of validation methods that will always raise exception on #valid? method call.


<h3>Database errors at ruby level</h3>
There are lot of various database errors:
<ul>
	<li>Invalid syntax</li>
	<li>Deadlock</li>
	<li>Constraint failure</li>
	<li>etc</li>
</ul>
All of them appear as ActiveRecord::StatementInvalid at ruby level. That is a big deal to differentiate and classify them. I think Rails should offer some classification.]]></content:encoded>
<wp:post_id>49</wp:post_id>
<wp:post_date>0000-00-00 00:00:00</wp:post_date>
<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name></wp:post_name>
<wp:status>draft</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1303982235</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>Upload files with Selenium IDE</title>
<link>http://gusiev.com/2009/04/upload-files-with-selenium-ide/</link>
<pubDate>Fri, 03 Apr 2009 08:28:48 +0000</pubDate>
<dc:creator><![CDATA[Bogdan Gusiev]]></dc:creator>

		<category><![CDATA[IT-related]]></category>

		<category domain="category" nicename="it"><![CDATA[IT-related]]></category>

		<category><![CDATA[programming]]></category>

		<category domain="category" nicename="programming"><![CDATA[programming]]></category>

		<category domain="tag"><![CDATA[java]]></category>

		<category domain="tag" nicename="java"><![CDATA[java]]></category>

		<category domain="tag"><![CDATA[selenium]]></category>

		<category domain="tag" nicename="selenium"><![CDATA[selenium]]></category>

<guid isPermaLink="false">http://gusiev.com/?p=3</guid>
<description></description>
<content:encoded><![CDATA[I started using selenium about 2 weeks ago. Find it as a very good QA tool.
But after a few successfully written tests I met the problem: Selenium is not able to use file input field. JavaScript permission restriction doesn't allow it.<br/><br/>

Here is my solution written with <a target="_blank" href="http://jinvoke.com">JInvoke library</a>: Jinvoke provides the classes to simulate the input to file chooser form.<br/>

<!--more-->
<hr/>
The problem I meat is selenium is stuck when simulate the click on upload file input. I have to launch the concurent thread that do the file name input. Thread code(Note file name should be given in Java format like 'c:/boot.ini):

<div class="bordered">
<code>import javax.swing.*;
import java.awt.event.KeyEvent;
import java.awt.*;

/**
 * @author Bogdan Gusiev
 *         Date 29.03.2009
 */
public class FileChooserThread extends Thread {

    public FileChooserThread(String file) {
        super(new FileRunner(file));
    }
}

class FileRunner implements Runnable {

    private String fullName;

    public FileRunner(String fileName) {
        this.fullName = fileName;
    }

    public void run() {
        try {
            Thread.sleep(1000);
            Robot robot = new Robot(); //input simulation class
            for (char c : fullName.toCharArray()) {
                if (c == ':') {
                    robot.keyPress(KeyEvent.VK_SHIFT);
                    robot.keyPress(KeyEvent.VK_SEMICOLON);
                    robot.keyRelease(KeyEvent.VK_SHIFT);
                } else if (c == '/') {
                    robot.keyPress(KeyEvent.VK_BACK_SLASH);
                } else {
                    robot.keyPress(KeyStroke.getKeyStroke(
                                   Character.toUpperCase(c), 0).getKeyCode());
                }
            }
            robot.keyPress(KeyEvent.VK_ENTER);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

}</code>
</div>
Here is selenium call method:

<div class="bordered">
<code >protected void chooseFile(String element, String fileName) {
           Number positionLeft = selenium.getElementPositionLeft(element);
           Number positionTop = selenium.getElementPositionTop(element);
           new FileChooserThread(fileName).start(); //launch input thread.
           //this method will held current thread while FileChooser gives the file name
           selenium.clickAt("file", positionLeft + "," + positionTop); 
}</code></div>]]></content:encoded>
<wp:post_id>3</wp:post_id>
<wp:post_date>2009-04-03 11:28:48</wp:post_date>
<wp:post_date_gmt>2009-04-03 08:28:48</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>upload-files-with-selenium-ide</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1248764199</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
<wp:comment>
<wp:comment_id>36</wp:comment_id>
<wp:comment_author><![CDATA[Thomas W.]]></wp:comment_author>
<wp:comment_author_email>tomwarf@gmail.fr</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>95.208.61.225</wp:comment_author_IP>
<wp:comment_date>2009-05-12 21:59:33</wp:comment_date>
<wp:comment_date_gmt>2009-05-12 18:59:33</wp:comment_date_gmt>
<wp:comment_content><![CDATA[I automated file uploads with the iMacros addon (FF and IE!): http://www.iopus.com/imacros/firefox/
Some of my tests use Selenium, others run in iMacros...]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>73</wp:comment_id>
<wp:comment_author><![CDATA[Logan]]></wp:comment_author>
<wp:comment_author_email>logan.hawkes@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://www.treesandthings.com</wp:comment_author_url>
<wp:comment_author_IP>74.217.76.5</wp:comment_author_IP>
<wp:comment_date>2009-07-25 05:05:19</wp:comment_date>
<wp:comment_date_gmt>2009-07-25 02:05:19</wp:comment_date_gmt>
<wp:comment_content><![CDATA[One issue, the method chooseFile is a void, but it returns the String fileName.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>99</wp:comment_id>
<wp:comment_author><![CDATA[Jim]]></wp:comment_author>
<wp:comment_author_email>jimhorng@gmail.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>203.83.216.112</wp:comment_author_IP>
<wp:comment_date>2009-10-15 11:44:18</wp:comment_date>
<wp:comment_date_gmt>2009-10-15 08:44:18</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Hi there, 
Using thread, my selenium stuck too when   "file open dialog" come out!
Do you have any clue?
BTW, did you input path on file open dialog?
I saw your thread started to run before doing  selenium.clickAt("file", positionLeft + "," + positionTop); ?
suppose the action flow is opposite? or you use this trying to avoid "stuck" issue?
but what if thread start before the clickat("file") ?]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>100</wp:comment_id>
<wp:comment_author><![CDATA[Bogdan]]></wp:comment_author>
<wp:comment_author_email>agresso@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://gusiev.com</wp:comment_author_url>
<wp:comment_author_IP>77.122.212.93</wp:comment_author_IP>
<wp:comment_date>2009-10-15 12:00:45</wp:comment_date>
<wp:comment_date_gmt>2009-10-15 09:00:45</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Hi Jim,

As you can see here the thread has a little sleep time. 
 Thread.sleep(1000);
It waits while the main thread will do the click.
The file name passes as the constructor argument to FileChooserThread and the Robot class is doing the input.

Thanks,
Bogdan]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>2</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>101</wp:comment_id>
<wp:comment_author><![CDATA[Jim]]></wp:comment_author>
<wp:comment_author_email>jimhorng@gmail.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>203.83.216.113</wp:comment_author_IP>
<wp:comment_date>2009-10-17 04:38:50</wp:comment_date>
<wp:comment_date_gmt>2009-10-17 01:38:50</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Bogdan,
Thanks it works for me~

BTW, do you have any idea to let selenium manipulate flash object?
I found 2 main methods on google,
1. to inject swj object to insert interface for javascript to call. but in our case we cannot modify flash object-to-test.
2. use FlexMonkey, I'm still researching to see if selenium can call it by commandline and wait for it's job finish signal.

Any suggestions? Thanks again :D]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>120</wp:comment_id>
<wp:comment_author><![CDATA[Nikesh]]></wp:comment_author>
<wp:comment_author_email>njauhari@cybage.com</wp:comment_author_email>
<wp:comment_author_url>http://linuxpoison.blogspot.com/</wp:comment_author_url>
<wp:comment_author_IP>121.242.40.10</wp:comment_author_IP>
<wp:comment_date>2009-12-11 15:37:43</wp:comment_date>
<wp:comment_date_gmt>2009-12-11 12:37:43</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Thanks,

Can you please let me know what is this variable "element" and from where it's coming and what it contains?

thanks,
Nikesh]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>145</wp:comment_id>
<wp:comment_author><![CDATA[prakash]]></wp:comment_author>
<wp:comment_author_email>patelprakashp@gmail.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>122.255.73.11</wp:comment_author_IP>
<wp:comment_date>2010-03-17 17:13:02</wp:comment_date>
<wp:comment_date_gmt>2010-03-17 14:13:02</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Uploading Files using Selenium RC in C#
After googling all around to overcome the Selenium incapability of handling File Upload control finally I could write a simple function in C# which will do my job. In the function given below _selObj is the object of DefaultSelenium class.

public bool TypeIntoFileUpload(string controlId, string filePath)
{
    try
    {
        string newFilePath = filePath.Replace('\\', '/');
         _selObj.WindowFocus();
         _selObj.Focus(controlId);
        string jscript="";
        jscript += "if(selenium.browserbot.getCurrentWindow().clipboardData){window.clipboardData.setData('Text','" + newFilePath + "');}";
         _selObj.GetEval(jscript);
        byte VK_CONTROL = 0x11;
        byte VK_V = 0x56;
        _selObj.KeyDownNative(Convert.ToString(VK_CONTROL));
        _selObj.KeyPressNative(Convert.ToString(VK_V));
        _selObj.KeyUpNative(Convert.ToString(VK_CONTROL));

        return true;
    }
    catch (Exception exc)
    {
        return false;
    }
}]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>168</wp:comment_id>
<wp:comment_author><![CDATA[Anairda]]></wp:comment_author>
<wp:comment_author_email>ximame4@yahoo.com</wp:comment_author_email>
<wp:comment_author_url>http://anairda-photography.blogspot.com/</wp:comment_author_url>
<wp:comment_author_IP>81.196.122.50</wp:comment_author_IP>
<wp:comment_date>2010-04-21 16:05:58</wp:comment_date>
<wp:comment_date_gmt>2010-04-21 13:05:58</wp:comment_date_gmt>
<wp:comment_content><![CDATA[@Nikesh  I think it refers to the button or "quoteBox" which you have to press in order to get the link to the file.
If I'm wrong, please correct me.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>430</wp:comment_id>
<wp:comment_author><![CDATA[sasikumar]]></wp:comment_author>
<wp:comment_author_email>sasikumar@gmail.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>203.199.211.81</wp:comment_author_IP>
<wp:comment_date>2010-08-05 14:08:34</wp:comment_date>
<wp:comment_date_gmt>2010-08-05 11:08:34</wp:comment_date_gmt>
<wp:comment_content><![CDATA[it doesnt work for me.i clicked upload button and then tried ur code.in IE


please help me]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>431</wp:comment_id>
<wp:comment_author><![CDATA[sasikumar]]></wp:comment_author>
<wp:comment_author_email>sasikumar@gmail.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>203.199.211.81</wp:comment_author_IP>
<wp:comment_date>2010-08-05 14:41:18</wp:comment_date>
<wp:comment_date_gmt>2010-08-05 11:41:18</wp:comment_date_gmt>
<wp:comment_content><![CDATA[selenium.clickAt("file", positionLeft + "," + positionTop);

what is the "file" string?? u mean fileName]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>640</wp:comment_id>
<wp:comment_author><![CDATA[file upload php permissions]]></wp:comment_author>
<wp:comment_author_email>Sumers@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://www.makeuseof.com/tag/3-simple-ways-to-send-huge-files-over-the-web/</wp:comment_author_url>
<wp:comment_author_IP>173.19.71.76</wp:comment_author_IP>
<wp:comment_date>2010-10-31 17:44:04</wp:comment_date>
<wp:comment_date_gmt>2010-10-31 14:44:04</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Wonderful information and facts for <a href="http://www.makeuseof.com/dir/filedropper-store-share-large-5gb-files/" rel="nofollow">upload files</A> for having myself get going. I am going to keep this specific website link and get back to it.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>412</wp:comment_id>
<wp:comment_author><![CDATA[Best Programmer]]></wp:comment_author>
<wp:comment_author_email>Nazaroff4675@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://www.anildewani.com/</wp:comment_author_url>
<wp:comment_author_IP>98.14.98.230</wp:comment_author_IP>
<wp:comment_date>2010-07-24 23:19:23</wp:comment_date>
<wp:comment_date_gmt>2010-07-24 20:19:23</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Perfect tutorial. I was looking for this...]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
	</item>
<item>
<title>Technical documentation</title>
<link>http://gusiev.com/2009/04/technical-documentation/</link>
<pubDate>Wed, 08 Apr 2009 11:57:59 +0000</pubDate>
<dc:creator><![CDATA[Bogdan Gusiev]]></dc:creator>

		<category><![CDATA[IT-related]]></category>

		<category domain="category" nicename="it"><![CDATA[IT-related]]></category>

		<category><![CDATA[Life]]></category>

		<category domain="category" nicename="life"><![CDATA[Life]]></category>

		<category domain="tag"><![CDATA[documentation]]></category>

		<category domain="tag" nicename="documentation"><![CDATA[documentation]]></category>

		<category domain="tag"><![CDATA[IT-related]]></category>

		<category domain="tag" nicename="it-related"><![CDATA[IT-related]]></category>

<guid isPermaLink="false">http://gusiev.com/?p=6</guid>
<description></description>
<content:encoded><![CDATA[There is no one technical book I read more than a half. Is everybody doing this way?
I recommend book authors to explain themselves in more short form.]]></content:encoded>
<wp:post_id>6</wp:post_id>
<wp:post_date>2009-04-08 14:57:59</wp:post_date>
<wp:post_date_gmt>2009-04-08 11:57:59</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>technical-documentation</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1239346127</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>About me</title>
<link>http://gusiev.com/about-me/</link>
<pubDate>Wed, 08 Apr 2009 13:40:39 +0000</pubDate>
<dc:creator><![CDATA[Bogdan Gusiev]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://gusiev.com/?page_id=7</guid>
<description></description>
<content:encoded><![CDATA[<table cellspacing="30">
<tr>
 
<td width="70%"><b>Bogdan Gusiev</b><br/>
Birth 5th of August 1986.<br/>
Address: Kyiv, Ukraine.<br/>
Job: <a href=" http://docs.google.com/View?id=dgcq4w4_0fbfr3h26" target="_blank">View CV</a><br/>
<br/>
Interests:
<ul>
<li>Computer Science</li>
<li>IT-industry</li>
<li>Philosophy</li>
<li>Socionics</li>
<li>Psychology</li>
<li>Speed Ice Skating</li>
<li>Swimming</li>
<li>Hiking</li>
</ul>
<br/>
Some code
<ul>	
<li> <a target="_blank" href="http://github.com/bogdan/accept_values_for"> accept_values_for</a></li>
	<li><a target="_blank" href="http://github.com/railsware/shelltoad">shelltoad</a></li>
	<li><a target="_blank" href="http://github.com/railsware/indeed">indeed</a></li>
</ul>
<br/>
<br/>
My choices:<br/>
<div style="padding: 5px 15px">
OS: Linux<br/>
IDE: vim<br/>
Languages: Ruby, JavaScript<br/>
Framework: Rails<br/>
SQL: PostgreSQL<br/>
NoSql: Redis<br/>
</div>


</td>
<td width="30%" valign="top"><img src="/images/me.jpg" alt="Me" /></td>
</tr>
</table>]]></content:encoded>
<wp:post_id>7</wp:post_id>
<wp:post_date>2009-04-08 16:40:39</wp:post_date>
<wp:post_date_gmt>2009-04-08 13:40:39</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>about-me</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>page</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1302855974</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_page_template</wp:meta_key>
<wp:meta_value>default</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>Brain async</title>
<link>http://gusiev.com/2009/04/brain-async/</link>
<pubDate>Thu, 09 Apr 2009 09:12:09 +0000</pubDate>
<dc:creator><![CDATA[Bogdan Gusiev]]></dc:creator>

		<category><![CDATA[Ideas]]></category>

		<category domain="category" nicename="ideas"><![CDATA[Ideas]]></category>

		<category domain="tag"><![CDATA[mind]]></category>

		<category domain="tag" nicename="mind"><![CDATA[mind]]></category>

<guid isPermaLink="false">http://gusiev.com/?p=8</guid>
<description></description>
<content:encoded><![CDATA[Many people came to the question: Why do our brain is having so many gaps: forget important info, quickly change opinion, stuck when doing usual actions, etc? Well, try to look from the different side.<br/>
<!--more-->
<hr/>
Our brain is about 4 million of neurons('processors') that works completely async: neural impulses follow though brain without any rules and permissions, every neuron process the information in there own way, no body is able to re implement such a large information processing system. From this point of gap are normal and true solutions and that is being solved by our brain every day is a miracle.

]]></content:encoded>
<wp:post_id>8</wp:post_id>
<wp:post_date>2009-04-09 12:12:09</wp:post_date>
<wp:post_date_gmt>2009-04-09 09:12:09</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>brain-async</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1239268329</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>Components of success </title>
<link>http://gusiev.com/2009/04/success-components/</link>
<pubDate>Fri, 10 Apr 2009 07:37:08 +0000</pubDate>
<dc:creator><![CDATA[Bogdan Gusiev]]></dc:creator>

		<category><![CDATA[Life]]></category>

		<category domain="category" nicename="life"><![CDATA[Life]]></category>

		<category domain="tag"><![CDATA[success]]></category>

		<category domain="tag" nicename="success"><![CDATA[success]]></category>

<guid isPermaLink="false">http://gusiev.com/?p=9</guid>
<description></description>
<content:encoded><![CDATA[People from different countries are reaching success in completely different way. And that is good because no matter who you are you can be successful. I heard a lot of success stories and now can summarize - what components are required to build your own success story...<br/>
<!--more-->
<br/>
Here are the components:<br/>
<h5> Hard work </h5>
That's it. This is may be the most important one. Don't think you can be successful while sitting on the chair and do nothing. 

<h5> Intellect </h5>
Many people work hard whole life and stay where they are without moving ahead. That is a pity that sometimes hard work is done in the wrong direction. Also try to look several steps ahead and see the perspective of the work you do.

<h5>Risk</h5>
Risk is a very helpful component. You can go the most reliable way.  But in fact add some risk can seriously improve the result. Do something without risk is impossible because there is always a risk that your work is useless.

<h5>Luck</h5>
Yes, that's it. This component is very important. All above components are nothing without luck and there is also some good and bad tricks in our way that we can not forecast.

]]></content:encoded>
<wp:post_id>9</wp:post_id>
<wp:post_date>2009-04-10 10:37:08</wp:post_date>
<wp:post_date_gmt>2009-04-10 07:37:08</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>success-components</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1239387852</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>Clear upload file input field </title>
<link>http://gusiev.com/2009/04/clear-upload-file-input-field/</link>
<pubDate>Thu, 23 Apr 2009 09:08:05 +0000</pubDate>
<dc:creator><![CDATA[Bogdan Gusiev]]></dc:creator>

		<category><![CDATA[IT-related]]></category>

		<category domain="category" nicename="it"><![CDATA[IT-related]]></category>

		<category><![CDATA[programming]]></category>

		<category domain="category" nicename="programming"><![CDATA[programming]]></category>

		<category domain="tag"><![CDATA[file]]></category>

		<category domain="tag" nicename="file"><![CDATA[file]]></category>

		<category domain="tag"><![CDATA[howto]]></category>

		<category domain="tag" nicename="howto"><![CDATA[howto]]></category>

		<category domain="tag"><![CDATA[html]]></category>

		<category domain="tag" nicename="html"><![CDATA[html]]></category>

		<category domain="tag"><![CDATA[input]]></category>

		<category domain="tag" nicename="input"><![CDATA[input]]></category>

		<category domain="tag"><![CDATA[javascript]]></category>

		<category domain="tag" nicename="javascript"><![CDATA[javascript]]></category>

<guid isPermaLink="false">http://gusiev.com/?p=11</guid>
<description></description>
<content:encoded><![CDATA[Many web developers came to the problem that they are not able to change value of file input field from Java Script in the web application. There is no access to value field of file input tag because of security restriction. However there is a trick how to erase this field if you need it in your application. <br/>
<!--more-->
<hr/>
You can simply redraw the html block where your input tag is located. In this case all data will remain the same except the selected file value.

<pre>
<code>
&lt;div id="uploadFile_div"&gt;
&lt;input type="file" class="fieldMoz" id="uploadFile" 
            onkeydown="return false;" size="40" name="uploadFile"/&gt;
&lt;/div&gt;
&lt;a onclick="clearFileInputField('uploadFile_div')" 
                         href="javascript:noAction();"&gt;Clear&lt;/a&gt;
</code>
</pre>
Java Script function below looks strange but acts exactly in the way we want:
<pre>
<code> 
&lt;script&gt;
function clearFileInputField(tagId) {
    document.getElementById(tagId).innerHTML = 
                    document.getElementById(tagId).innerHTML;
}
&lt;/script&gt;
            
</code>
</pre>]]></content:encoded>
<wp:post_id>11</wp:post_id>
<wp:post_date>2009-04-23 12:08:05</wp:post_date>
<wp:post_date_gmt>2009-04-23 09:08:05</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>clear-upload-file-input-field</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1276083432</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
<wp:comment>
<wp:comment_id>35</wp:comment_id>
<wp:comment_author><![CDATA[vic]]></wp:comment_author>
<wp:comment_author_email>pikyyrx@yahoo.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>202.159.18.10</wp:comment_author_IP>
<wp:comment_date>2009-05-11 05:49:41</wp:comment_date>
<wp:comment_date_gmt>2009-05-11 02:49:41</wp:comment_date_gmt>
<wp:comment_content><![CDATA[its. work!! thx very much]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>68</wp:comment_id>
<wp:comment_author><![CDATA[Sielnmen]]></wp:comment_author>
<wp:comment_author_email>nigro.sielnmen@gmail.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>189.200.82.34</wp:comment_author_IP>
<wp:comment_date>2009-07-07 02:24:08</wp:comment_date>
<wp:comment_date_gmt>2009-07-06 23:24:08</wp:comment_date_gmt>
<wp:comment_content><![CDATA[excellent, i really appreciate your help... :)]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>61</wp:comment_id>
<wp:comment_author><![CDATA[joy]]></wp:comment_author>
<wp:comment_author_email>joylinka@yahoo.com</wp:comment_author_email>
<wp:comment_author_url>http://www.enjoyday.net</wp:comment_author_url>
<wp:comment_author_IP>58.137.17.141</wp:comment_author_IP>
<wp:comment_date>2009-06-15 13:19:41</wp:comment_date>
<wp:comment_date_gmt>2009-06-15 10:19:41</wp:comment_date_gmt>
<wp:comment_content><![CDATA[ขอบคุณมากค่ะ

it works! thanks a lot !!]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>59</wp:comment_id>
<wp:comment_author><![CDATA[diamonddon]]></wp:comment_author>
<wp:comment_author_email>b_mcginn@hotmail.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>93.97.231.249</wp:comment_author_IP>
<wp:comment_date>2009-06-13 01:54:31</wp:comment_date>
<wp:comment_date_gmt>2009-06-12 22:54:31</wp:comment_date_gmt>
<wp:comment_content><![CDATA[great! saved me hours of hacking]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>40</wp:comment_id>
<wp:comment_author><![CDATA[Newbie]]></wp:comment_author>
<wp:comment_author_email>newbietoprofessional@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://portaltoafrica.com</wp:comment_author_url>
<wp:comment_author_IP>88.96.173.6</wp:comment_author_IP>
<wp:comment_date>2009-05-22 13:48:34</wp:comment_date>
<wp:comment_date_gmt>2009-05-22 10:48:34</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Excellent hack.. love it.. :)]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>58</wp:comment_id>
<wp:comment_author><![CDATA[Claybo]]></wp:comment_author>
<wp:comment_author_email>cd@comartis.ch</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>195.141.116.78</wp:comment_author_IP>
<wp:comment_date>2009-06-12 00:06:22</wp:comment_date>
<wp:comment_date_gmt>2009-06-11 21:06:22</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Absolutely brilliant!
Thanks Dave]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>37</wp:comment_id>
<wp:comment_author><![CDATA[v]]></wp:comment_author>
<wp:comment_author_email>v@vv.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>124.120.29.121</wp:comment_author_IP>
<wp:comment_date>2009-05-12 21:59:46</wp:comment_date>
<wp:comment_date_gmt>2009-05-12 18:59:46</wp:comment_date_gmt>
<wp:comment_content><![CDATA[thank you veryyyy much! ;-)]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>42</wp:comment_id>
<wp:comment_author><![CDATA[Scott]]></wp:comment_author>
<wp:comment_author_email>support@limetrade.com.au</wp:comment_author_email>
<wp:comment_author_url>http://limetrade.com.au</wp:comment_author_url>
<wp:comment_author_IP>124.168.17.38</wp:comment_author_IP>
<wp:comment_date>2009-05-27 06:22:56</wp:comment_date>
<wp:comment_date_gmt>2009-05-27 03:22:56</wp:comment_date_gmt>
<wp:comment_content><![CDATA[That is the sweetest bit of code I have seen in a while, brilliant in it's simplicity and worked in the big 3 !]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>66</wp:comment_id>
<wp:comment_author><![CDATA[Angel]]></wp:comment_author>
<wp:comment_author_email>ah62@ono.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>82.159.87.160</wp:comment_author_IP>
<wp:comment_date>2009-06-20 13:24:52</wp:comment_date>
<wp:comment_date_gmt>2009-06-20 10:24:52</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Great script! Works fine for my needs. Thanks!
2 comments:

1. there is a caveat about this, related to compatibility with the use of the form.elements.field_name syntax, explained at
http://www.webdeveloper.com/forum/showthread.php?t=178461

2. this change makes it more general and intuitive, as you can use the input-file's own id instead of that of its container:

function clearFileInputField(tagId) { 
var parent = document.getElementById(tagId).parentNode
parent.innerHTML = parent.innerHTML; 
} 

Then you call it like:

clearFileInputField('uploadFile')

The container div (or span) still must exist, but does not even need an id.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>55</wp:comment_id>
<wp:comment_author><![CDATA[Dave]]></wp:comment_author>
<wp:comment_author_email>ldmattice@hotmail.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>76.108.160.97</wp:comment_author_IP>
<wp:comment_date>2009-06-07 15:42:55</wp:comment_date>
<wp:comment_date_gmt>2009-06-07 12:42:55</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Awesome!  I have been looking for something like this for days.  Wish I found your code sooner.  THANKS!!!]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>56</wp:comment_id>
<wp:comment_author><![CDATA[Bogdan]]></wp:comment_author>
<wp:comment_author_email>agresso@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://gusiev.com</wp:comment_author_url>
<wp:comment_author_IP>92.49.206.115</wp:comment_author_IP>
<wp:comment_date>2009-06-07 20:00:30</wp:comment_date>
<wp:comment_date_gmt>2009-06-07 17:00:30</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Thanks, Dave.
Just put the link to this site and it will help me to rise up in Search result list.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>2</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>69</wp:comment_id>
<wp:comment_author><![CDATA[Gaurav Jain]]></wp:comment_author>
<wp:comment_author_email>jaingrv24@gmail.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>125.21.242.92</wp:comment_author_IP>
<wp:comment_date>2009-07-15 14:07:04</wp:comment_date>
<wp:comment_date_gmt>2009-07-15 11:07:04</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Wow!! It realy works.. Thanks..]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>83</wp:comment_id>
<wp:comment_author><![CDATA[Praveen]]></wp:comment_author>
<wp:comment_author_email>kspraveenk@gmail.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>208.91.1.9</wp:comment_author_IP>
<wp:comment_date>2009-08-03 21:04:56</wp:comment_date>
<wp:comment_date_gmt>2009-08-03 18:04:56</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Wow! this works. any idea why it does ?]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>84</wp:comment_id>
<wp:comment_author><![CDATA[Albert Chesaro]]></wp:comment_author>
<wp:comment_author_email>albert@kori.co.ke</wp:comment_author_email>
<wp:comment_author_url>http://www.kori.co.ke</wp:comment_author_url>
<wp:comment_author_IP>41.223.57.75</wp:comment_author_IP>
<wp:comment_date>2009-08-06 23:48:02</wp:comment_date>
<wp:comment_date_gmt>2009-08-06 20:48:02</wp:comment_date_gmt>
<wp:comment_content><![CDATA[This is really nice, I gave been using full page reload to clear the fields on http://www.kori.co.ke, this will definitely work for me! Thanks for sharing!!]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>71</wp:comment_id>
<wp:comment_author><![CDATA[Howard]]></wp:comment_author>
<wp:comment_author_email>hj@BridgeportContractor.com</wp:comment_author_email>
<wp:comment_author_url>http://www.usedsoup.org</wp:comment_author_url>
<wp:comment_author_IP>75.140.36.118</wp:comment_author_IP>
<wp:comment_date>2009-07-20 22:29:35</wp:comment_date>
<wp:comment_date_gmt>2009-07-20 19:29:35</wp:comment_date_gmt>
<wp:comment_content><![CDATA[u de man!  Thanks.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>85</wp:comment_id>
<wp:comment_author><![CDATA[Henrique]]></wp:comment_author>
<wp:comment_author_email>cassitos@gmail.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>200.222.1.254</wp:comment_author_IP>
<wp:comment_date>2009-08-10 21:06:05</wp:comment_date>
<wp:comment_date_gmt>2009-08-10 18:06:05</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Excellent!!!
Works!
saved a lot of time!]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>74</wp:comment_id>
<wp:comment_author><![CDATA[mnsharif]]></wp:comment_author>
<wp:comment_author_email>mnsharif28@hotmail.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>87.101.232.34</wp:comment_author_IP>
<wp:comment_date>2009-07-25 13:06:43</wp:comment_date>
<wp:comment_date_gmt>2009-07-25 10:06:43</wp:comment_date_gmt>
<wp:comment_content><![CDATA[You rock!
Thanks.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>77</wp:comment_id>
<wp:comment_author><![CDATA[Shalini]]></wp:comment_author>
<wp:comment_author_email>shalini@miritech.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>116.193.161.254</wp:comment_author_IP>
<wp:comment_date>2009-07-29 10:34:57</wp:comment_date>
<wp:comment_date_gmt>2009-07-29 07:34:57</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Hi,
Is it working in case of IE6?

I thnk its not..
Please check and if not working can u give me any solution ASAP?

Thanks.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>86</wp:comment_id>
<wp:comment_author><![CDATA[ah72]]></wp:comment_author>
<wp:comment_author_email>kasp2006@gmail.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>41.104.120.70</wp:comment_author_IP>
<wp:comment_date>2009-08-16 15:38:06</wp:comment_date>
<wp:comment_date_gmt>2009-08-16 12:38:06</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Thanks a lot !!!

Quote: "Java Script function below looks strange but acts exactly in the way we want..."

This is because using innerHTML will delete the upload box and recreate it while browsers (firefox) don't allow pre-setting the value of inputs with type 'file' when creating them, thus the value will be reset.

Be minded though that you'll recreate only the html of the upload box and lose all its methods (like event functions) previously defined, to work around this, you can wrap the upload box element inside a span and when you assign events or functions, assign them to the span not to the upload box element itself, this way you won't lose them.

Here's an example using jQuery:

    $('#uploadBox').wrap("") /* result -&gt;  */
                                      
    /* binding "change" and "mouseover" event functions to the  not to  */
    $('#uploadBox').parent().bind("change mouseover" , function(){ myValidator.element($('#uploadBox')); });
    /* myValidator refers to an object created by "jQuery Validate plugin" used for form validation in this example */
    
    /* creating an img element, when clicked on clears the upload box */
    $('#uploadBox').parent().after("");
    $('#clearUploadBox').click(function(){
        /* using jQuery html() method equivalent to innerHTML */
	$('#uploadBox').parent().html( $('#uploadBox').parent().html() );
	myValidator.element($('#uploadBox'));
    });

Regards]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>87</wp:comment_id>
<wp:comment_author><![CDATA[ah72]]></wp:comment_author>
<wp:comment_author_email>kasp2006@gmail.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>41.104.120.70</wp:comment_author_IP>
<wp:comment_date>2009-08-16 15:42:22</wp:comment_date>
<wp:comment_date_gmt>2009-08-16 12:42:22</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Thanks a lot !!!

Quote: "Java Script function below looks strange but acts exactly in the way we want..."

This is because using innerHTML will delete the upload box and recreate it while browsers (firefox) don't allow pre-setting the value of inputs with type 'file' when creating them, thus the value will be reset.

Be minded though that you'll recreate only the html of the upload box and lose all its methods (like event functions) previously defined, to work around this, you can wrap the upload box element inside a span and when you assign events or functions, assign them to the span not to the upload box element itself, this way you won't lose them.

Here's an example using jQuery:

[code]
    $('#uploadBox').wrap("") /* result -&gt;  */
                                      
    /* binding "change" and "mouseover" event functions to the  not to  */
    $('#uploadBox').parent().bind("change mouseover" , function(){ myValidator.element($('#uploadBox')); });
    /* myValidator refers to an object created by "jQuery Validate plugin" used for form validation in this example */
    
    /* creating an img element, when clicked on clears the upload box */
    $('#uploadBox').parent().after("");
    $('#clearUploadBox').click(function(){
        /* using jQuery html() method equivalent to innerHTML */
	$('#uploadBox').parent().html( $('#uploadBox').parent().html() );
	myValidator.element($('#uploadBox'));
    });
[/code]

Regards]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>98</wp:comment_id>
<wp:comment_author><![CDATA[Eduard]]></wp:comment_author>
<wp:comment_author_email>eduard@knishman.org</wp:comment_author_email>
<wp:comment_author_url>http://www.knishman.org</wp:comment_author_url>
<wp:comment_author_IP>80.178.0.218</wp:comment_author_IP>
<wp:comment_date>2009-10-01 13:30:21</wp:comment_date>
<wp:comment_date_gmt>2009-10-01 10:30:21</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Thanks a lot !!!]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>97</wp:comment_id>
<wp:comment_author><![CDATA[Bogdan]]></wp:comment_author>
<wp:comment_author_email>agresso@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://gusiev.com</wp:comment_author_url>
<wp:comment_author_IP>77.122.212.93</wp:comment_author_IP>
<wp:comment_date>2009-09-29 16:50:52</wp:comment_date>
<wp:comment_date_gmt>2009-09-29 13:50:52</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Hi gunasekaran,

You can not do that at all. This restriction is made to prevent file stealing from client machine.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>96</wp:comment_id>
<wp:comment_author><![CDATA[gunasekaran]]></wp:comment_author>
<wp:comment_author_email>gunasekarangsp@gmail.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>117.201.4.143</wp:comment_author_IP>
<wp:comment_date>2009-09-29 16:24:45</wp:comment_date>
<wp:comment_date_gmt>2009-09-29 13:24:45</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Dear sir
 how can assign the value in file tag.If I have a file name in Query string then how can assign the value to file tag

I have tried the below said code but its not worked
Server side
~~~~~~~~~~~~
&lt;%
Respose.write ""

%&gt;
Client side using dom 



 document.getElementById("Upload).value = "filename";
 
]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>95</wp:comment_id>
<wp:comment_author><![CDATA[Arivanand]]></wp:comment_author>
<wp:comment_author_email>arivanandm@gmail.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>121.242.16.5</wp:comment_author_IP>
<wp:comment_date>2009-09-25 14:41:14</wp:comment_date>
<wp:comment_date_gmt>2009-09-25 11:41:14</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Thanks. Thanks a lot... :)]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>93</wp:comment_id>
<wp:comment_author><![CDATA[dirq]]></wp:comment_author>
<wp:comment_author_email>dirk@takesolace.com</wp:comment_author_email>
<wp:comment_author_url>http:takesolace.com/</wp:comment_author_url>
<wp:comment_author_IP>151.153.1.1</wp:comment_author_IP>
<wp:comment_date>2009-09-11 19:29:32</wp:comment_date>
<wp:comment_date_gmt>2009-09-11 16:29:32</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Weird.  But it works.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>94</wp:comment_id>
<wp:comment_author><![CDATA[Ed]]></wp:comment_author>
<wp:comment_author_email>eproft@hotmail.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>71.220.215.80</wp:comment_author_IP>
<wp:comment_date>2009-09-22 02:54:11</wp:comment_date>
<wp:comment_date_gmt>2009-09-21 23:54:11</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Absolutely brilliant!  It is exactly what I was looking for.  Thank you very much!]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>110</wp:comment_id>
<wp:comment_author><![CDATA[Vaman]]></wp:comment_author>
<wp:comment_author_email>vaman.salkar@osssofttech.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>61.8.151.76</wp:comment_author_IP>
<wp:comment_date>2009-11-10 15:21:41</wp:comment_date>
<wp:comment_date_gmt>2009-11-10 12:21:41</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Thanks A lot for the Wonderful piece of code :)
U Rock!]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>105</wp:comment_id>
<wp:comment_author><![CDATA[paperke67]]></wp:comment_author>
<wp:comment_author_email>paperke67@hotmail.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>81.244.155.10</wp:comment_author_IP>
<wp:comment_date>2009-10-25 18:13:04</wp:comment_date>
<wp:comment_date_gmt>2009-10-25 15:13:04</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Nice, very nice.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>121</wp:comment_id>
<wp:comment_author><![CDATA[Bijesh]]></wp:comment_author>
<wp:comment_author_email>bijeshp009@gmail.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>210.210.79.19</wp:comment_author_IP>
<wp:comment_date>2009-12-15 09:28:33</wp:comment_date>
<wp:comment_date_gmt>2009-12-15 06:28:33</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Hi I am using a structure like following
---------------------------------------------------

    Attachment1
    
        
        
            
                
            
        
    


  //the script to clear the input  is like
hereupload.id will be the upload objects id ie,upload1 in this case
    function clearUploadInput(upload)
    {
    upload.ownerDocument.getElementById(upload.id + "_Form").innerHTML = upload.ownerDocument.getElementById(upload.id + "_Form").innerHTML;
    }
-----------------------------------------------------
redrawing the inner HTML is a good hack,it will work fine in IE,but in non-ie browserslike firefox and chrome , it is causing the entire form to redraw(if we redraw the entire object(upload)),and It is not working for the second time with the mentioned code]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>112</wp:comment_id>
<wp:comment_author><![CDATA[alejo]]></wp:comment_author>
<wp:comment_author_email>fulminant@hotpop.com</wp:comment_author_email>
<wp:comment_author_url>http://www.reduceridepreturi.ro</wp:comment_author_url>
<wp:comment_author_IP>86.121.33.41</wp:comment_author_IP>
<wp:comment_date>2009-11-13 04:37:57</wp:comment_date>
<wp:comment_date_gmt>2009-11-13 01:37:57</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Thank you Bogdan for starting the post!
Angel your solution was what I expected.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>116</wp:comment_id>
<wp:comment_author><![CDATA[Nicolas Grilly]]></wp:comment_author>
<wp:comment_author_email>nicolas@gardentechno.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>82.224.126.140</wp:comment_author_IP>
<wp:comment_date>2009-11-24 18:09:50</wp:comment_date>
<wp:comment_date_gmt>2009-11-24 15:09:50</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Very clever! Thank you!]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>133</wp:comment_id>
<wp:comment_author><![CDATA[Daniel Estévez]]></wp:comment_author>
<wp:comment_author_email>contact@danielestevez.com</wp:comment_author_email>
<wp:comment_author_url>http://www.danielestevez.com</wp:comment_author_url>
<wp:comment_author_IP>147.83.199.8</wp:comment_author_IP>
<wp:comment_date>2010-01-29 12:53:34</wp:comment_date>
<wp:comment_date_gmt>2010-01-29 09:53:34</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Seems as weird as simple... and it works!

Perfect! Thanks a lot!]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>135</wp:comment_id>
<wp:comment_author><![CDATA[Achshar]]></wp:comment_author>
<wp:comment_author_email>forum@achshar.com</wp:comment_author_email>
<wp:comment_author_url>http://achshar.com</wp:comment_author_url>
<wp:comment_author_IP>122.173.65.177</wp:comment_author_IP>
<wp:comment_date>2010-02-13 00:18:43</wp:comment_date>
<wp:comment_date_gmt>2010-02-12 21:18:43</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Thanks! :)]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>132</wp:comment_id>
<wp:comment_author><![CDATA[helie]]></wp:comment_author>
<wp:comment_author_email>heli.banker@gmail.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>202.141.12.213</wp:comment_author_IP>
<wp:comment_date>2010-01-29 08:58:12</wp:comment_date>
<wp:comment_date_gmt>2010-01-29 05:58:12</wp:comment_date_gmt>
<wp:comment_content><![CDATA[great piece of cod...thanks o alot.....]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>127</wp:comment_id>
<wp:comment_author><![CDATA[Jim Wiggins]]></wp:comment_author>
<wp:comment_author_email>jimwiggins@fbx.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>67.186.118.200</wp:comment_author_IP>
<wp:comment_date>2010-01-02 20:47:07</wp:comment_date>
<wp:comment_date_gmt>2010-01-02 17:47:07</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Great idea! Works in IE 6, 7, 8 and in FF 3.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>139</wp:comment_id>
<wp:comment_author><![CDATA[Diego]]></wp:comment_author>
<wp:comment_author_email>diego.lopes@cpmbraxis.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>201.70.133.50</wp:comment_author_IP>
<wp:comment_date>2010-02-25 18:41:43</wp:comment_date>
<wp:comment_date_gmt>2010-02-25 15:41:43</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Doesn't work with ASP.NET AJAX.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>140</wp:comment_id>
<wp:comment_author><![CDATA[delijah]]></wp:comment_author>
<wp:comment_author_email>raffael.wannenmacher@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://delijah.wordpress.com/</wp:comment_author_url>
<wp:comment_author_IP>193.8.177.17</wp:comment_author_IP>
<wp:comment_date>2010-03-04 15:34:57</wp:comment_date>
<wp:comment_date_gmt>2010-03-04 12:34:57</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Another solution (will keep events):

function clearFileInputField(elem) {
	$elem = $(elem);
	$elem.replaceWith($elem.clone(true));
}]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>146</wp:comment_id>
<wp:comment_author><![CDATA[iulian]]></wp:comment_author>
<wp:comment_author_email>eu173@yahoo.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>24.115.156.244</wp:comment_author_IP>
<wp:comment_date>2010-03-18 18:09:37</wp:comment_date>
<wp:comment_date_gmt>2010-03-18 15:09:37</wp:comment_date_gmt>
<wp:comment_content><![CDATA[delijah's improvement It's perfect]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>153</wp:comment_id>
<wp:comment_author><![CDATA[kalyan]]></wp:comment_author>
<wp:comment_author_email>sand_water2001@yahoo.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>70.183.44.126</wp:comment_author_IP>
<wp:comment_date>2010-04-01 22:56:11</wp:comment_date>
<wp:comment_date_gmt>2010-04-01 19:56:11</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Dude,
You are awesome. You made my Day. Thanks a ton.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>676</wp:comment_id>
<wp:comment_author><![CDATA[enez]]></wp:comment_author>
<wp:comment_author_email>eahmedspahic@gmail.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>217.199.135.70</wp:comment_author_IP>
<wp:comment_date>2010-12-10 19:14:08</wp:comment_date>
<wp:comment_date_gmt>2010-12-10 16:14:08</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Thank you man...]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>189</wp:comment_id>
<wp:comment_author><![CDATA[Arvy]]></wp:comment_author>
<wp:comment_author_email>buda@uol.com.br</wp:comment_author_email>
<wp:comment_author_url>http://www.inweb.com.br</wp:comment_author_url>
<wp:comment_author_IP>189.62.240.149</wp:comment_author_IP>
<wp:comment_date>2010-05-28 17:19:15</wp:comment_date>
<wp:comment_date_gmt>2010-05-28 14:19:15</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Thank you very much for the tip, really useful for Ajax.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>384</wp:comment_id>
<wp:comment_author><![CDATA[premboyapati]]></wp:comment_author>
<wp:comment_author_email>premboyapati@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://www.myportalz.com</wp:comment_author_url>
<wp:comment_author_IP>70.165.44.194</wp:comment_author_IP>
<wp:comment_date>2010-07-12 13:49:28</wp:comment_date>
<wp:comment_date_gmt>2010-07-12 10:49:28</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Hi guys!!!

The following one only worked for me...

function ClearFileUpload() {
            var fu = document.getElementById('');
            if (fu != null) {
                document.getElementById('').outerHTML = fu.outerHTML;
            }]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>749</wp:comment_id>
<wp:comment_author><![CDATA[River Plate]]></wp:comment_author>
<wp:comment_author_email>asasas@sasa.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>190.188.182.214</wp:comment_author_IP>
<wp:comment_date>2011-04-18 20:53:47</wp:comment_date>
<wp:comment_date_gmt>2011-04-18 17:53:47</wp:comment_date_gmt>
<wp:comment_content><![CDATA[GREAT MAN! Thanks!!!!]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>780</wp:comment_id>
<wp:comment_author><![CDATA[hmadeang]]></wp:comment_author>
<wp:comment_author_email>nok2531@hotmail.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>180.183.9.82</wp:comment_author_IP>
<wp:comment_date>2011-04-25 13:57:34</wp:comment_date>
<wp:comment_date_gmt>2011-04-25 10:57:34</wp:comment_date_gmt>
<wp:comment_content><![CDATA[love u thanks!!!!]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>686</wp:comment_id>
<wp:comment_author><![CDATA[jitendra]]></wp:comment_author>
<wp:comment_author_email>jitendra@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://www.google.com</wp:comment_author_url>
<wp:comment_author_IP>59.162.59.250</wp:comment_author_IP>
<wp:comment_date>2011-02-03 14:26:05</wp:comment_date>
<wp:comment_date_gmt>2011-02-03 11:26:05</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Nice Work..It help me a lot.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>684</wp:comment_id>
<wp:comment_author><![CDATA[Tom]]></wp:comment_author>
<wp:comment_author_email>lqixv@163.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>183.15.146.184</wp:comment_author_IP>
<wp:comment_date>2011-01-27 07:27:55</wp:comment_date>
<wp:comment_date_gmt>2011-01-27 04:27:55</wp:comment_date_gmt>
<wp:comment_content><![CDATA[var afile = jQuery("#" + picName);
afile.replaceWith(afile.clone());]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>669</wp:comment_id>
<wp:comment_author><![CDATA[ad8five]]></wp:comment_author>
<wp:comment_author_email>ad8five@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://websnoox.com</wp:comment_author_url>
<wp:comment_author_IP>122.173.75.159</wp:comment_author_IP>
<wp:comment_date>2010-12-01 13:42:20</wp:comment_date>
<wp:comment_date_gmt>2010-12-01 10:42:20</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Nice Trick in a shorten way.
XOXO]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>628</wp:comment_id>
<wp:comment_author><![CDATA[Sanketi]]></wp:comment_author>
<wp:comment_author_email>sanketi@ufl.edu</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>12.111.29.12</wp:comment_author_IP>
<wp:comment_date>2010-10-25 16:21:01</wp:comment_date>
<wp:comment_date_gmt>2010-10-25 13:21:01</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Pretty awesome!]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>547</wp:comment_id>
<wp:comment_author><![CDATA[gyuri]]></wp:comment_author>
<wp:comment_author_email>ambrozy.gyuri@gmail.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>84.3.192.181</wp:comment_author_IP>
<wp:comment_date>2010-09-16 18:42:51</wp:comment_date>
<wp:comment_date_gmt>2010-09-16 15:42:51</wp:comment_date_gmt>
<wp:comment_content><![CDATA[I wonder how you came to this... 
But its brilliant really! :)]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>748</wp:comment_id>
<wp:comment_author><![CDATA[Veeru s]]></wp:comment_author>
<wp:comment_author_email>veeru.rs@gmail.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>182.72.183.166</wp:comment_author_IP>
<wp:comment_date>2011-04-18 15:55:20</wp:comment_date>
<wp:comment_date_gmt>2011-04-18 12:55:20</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Its grt thinking]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>611</wp:comment_id>
<wp:comment_author><![CDATA[Mayur]]></wp:comment_author>
<wp:comment_author_email>mayurjbhavsar@rediffmail.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>203.187.232.133</wp:comment_author_IP>
<wp:comment_date>2010-10-18 11:08:16</wp:comment_date>
<wp:comment_date_gmt>2010-10-18 08:08:16</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Nice Code. It worked even on asp.Net application.

Thanx]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>685</wp:comment_id>
<wp:comment_author><![CDATA[Bogdan Gusiev]]></wp:comment_author>
<wp:comment_author_email>agresso@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://gusiev.com</wp:comment_author_url>
<wp:comment_author_IP>213.160.145.74</wp:comment_author_IP>
<wp:comment_date>2011-01-27 12:52:08</wp:comment_date>
<wp:comment_date_gmt>2011-01-27 09:52:08</wp:comment_date_gmt>
<wp:comment_content><![CDATA[When I was writing this pos - I didn't know any js libraries and didn't know javascript well at all.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>1</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>665</wp:comment_id>
<wp:comment_author><![CDATA[Ankit Jadav]]></wp:comment_author>
<wp:comment_author_email>ankit_jadavce@yahoo.com</wp:comment_author_email>
<wp:comment_author_url>http://awebtech.blogspot.com</wp:comment_author_url>
<wp:comment_author_IP>124.124.216.69</wp:comment_author_IP>
<wp:comment_date>2010-11-28 13:07:45</wp:comment_date>
<wp:comment_date_gmt>2010-11-28 10:07:45</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Thanks you so much.... Helped me in IE browsers.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>690</wp:comment_id>
<wp:comment_author><![CDATA[web developper]]></wp:comment_author>
<wp:comment_author_email>anonyme@hotmail.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>41.103.83.8</wp:comment_author_IP>
<wp:comment_date>2011-03-02 16:26:39</wp:comment_date>
<wp:comment_date_gmt>2011-03-02 13:26:39</wp:comment_date_gmt>
<wp:comment_content><![CDATA[
    

document.myForm.reset();]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>688</wp:comment_id>
<wp:comment_author><![CDATA[manoj]]></wp:comment_author>
<wp:comment_author_email>manoj@rediffmail.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>210.212.179.175</wp:comment_author_IP>
<wp:comment_date>2011-02-17 11:20:29</wp:comment_date>
<wp:comment_date_gmt>2011-02-17 08:20:29</wp:comment_date_gmt>
<wp:comment_content><![CDATA[nice one Dude...]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>689</wp:comment_id>
<wp:comment_author><![CDATA[AlanRR]]></wp:comment_author>
<wp:comment_author_email>alan.ruiz@shaw.ca</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>70.69.48.44</wp:comment_author_IP>
<wp:comment_date>2011-03-01 23:07:04</wp:comment_date>
<wp:comment_date_gmt>2011-03-01 20:07:04</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Really nice.

Thanks a lot. It work for me.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>681</wp:comment_id>
<wp:comment_author><![CDATA[Ariyatotle]]></wp:comment_author>
<wp:comment_author_email>lahoossajue@hotmail.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>182.53.207.115</wp:comment_author_IP>
<wp:comment_date>2011-01-08 06:50:49</wp:comment_date>
<wp:comment_date_gmt>2011-01-08 03:50:49</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Thanks a lot.
ขอบคุณครับ]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>679</wp:comment_id>
<wp:comment_author><![CDATA[Christian]]></wp:comment_author>
<wp:comment_author_email>crop@gmx.net</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>193.178.148.4</wp:comment_author_IP>
<wp:comment_date>2011-01-04 17:40:07</wp:comment_date>
<wp:comment_date_gmt>2011-01-04 14:40:07</wp:comment_date_gmt>
<wp:comment_content><![CDATA[thumbs up!!!]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>680</wp:comment_id>
<wp:comment_author><![CDATA[cheap web design outsourcing]]></wp:comment_author>
<wp:comment_author_email>webguruzsbm2@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://www.webguruz.in/</wp:comment_author_url>
<wp:comment_author_IP>202.164.49.130</wp:comment_author_IP>
<wp:comment_date>2011-01-05 09:42:05</wp:comment_date>
<wp:comment_date_gmt>2011-01-05 06:42:05</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Reilly good and beautiful.Thanks]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>687</wp:comment_id>
<wp:comment_author><![CDATA[Bhuvana]]></wp:comment_author>
<wp:comment_author_email>bhuvana1385@gmail.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>122.165.71.10</wp:comment_author_IP>
<wp:comment_date>2011-02-05 09:12:20</wp:comment_date>
<wp:comment_date_gmt>2011-02-05 06:12:20</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Excellent...Done a great job. Its working fine for me.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>543</wp:comment_id>
<wp:comment_author><![CDATA[Gigi]]></wp:comment_author>
<wp:comment_author_email>djdablitz@yahoo.com</wp:comment_author_email>
<wp:comment_author_url>http://none</wp:comment_author_url>
<wp:comment_author_IP>81.196.74.79</wp:comment_author_IP>
<wp:comment_date>2010-09-15 23:18:07</wp:comment_date>
<wp:comment_date_gmt>2010-09-15 20:18:07</wp:comment_date_gmt>
<wp:comment_content><![CDATA[hi,

i want NOT to clear the input file field when i press "submit". how can i do this?]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>544</wp:comment_id>
<wp:comment_author><![CDATA[Gigi]]></wp:comment_author>
<wp:comment_author_email>djdablitz@yahoo.com</wp:comment_author_email>
<wp:comment_author_url>http://none</wp:comment_author_url>
<wp:comment_author_IP>81.196.74.79</wp:comment_author_IP>
<wp:comment_date>2010-09-15 23:21:52</wp:comment_date>
<wp:comment_date_gmt>2010-09-15 20:21:52</wp:comment_date_gmt>
<wp:comment_content><![CDATA[i want to keep the file field populated after a failed validation.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>791</wp:comment_id>
<wp:comment_author><![CDATA[Byc]]></wp:comment_author>
<wp:comment_author_email>vkazakax@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://vkazakax.ru</wp:comment_author_url>
<wp:comment_author_IP>195.14.125.1</wp:comment_author_IP>
<wp:comment_date>2011-04-28 16:05:12</wp:comment_date>
<wp:comment_date_gmt>2011-04-28 13:05:12</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Perfect solution for my issue! Thanks!!!]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>439</wp:comment_id>
<wp:comment_author><![CDATA[Marcello Barnaba]]></wp:comment_author>
<wp:comment_author_email>vjt@openssl.it</wp:comment_author_email>
<wp:comment_author_url>http://sindro.me/</wp:comment_author_url>
<wp:comment_author_IP>77.43.11.66</wp:comment_author_IP>
<wp:comment_date>2010-08-13 18:39:30</wp:comment_date>
<wp:comment_date_gmt>2010-08-13 15:39:30</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Hello, thank you for the hint: starting from it I implemented a jQuery solution that can be seen here:

http://github.com/Panmind/jquery-ajax-nav/commit/a23cb058901e61c756eaccecbbe59387048b12ab

:-)]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>619</wp:comment_id>
<wp:comment_author><![CDATA[Risdy]]></wp:comment_author>
<wp:comment_author_email>rizts.tech@gmail.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>202.138.246.2</wp:comment_author_IP>
<wp:comment_date>2010-10-22 12:44:56</wp:comment_date>
<wp:comment_date_gmt>2010-10-22 09:44:56</wp:comment_date_gmt>
<wp:comment_content><![CDATA[brilliant trick, I have been looking for something like this before. thanks]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
	</item>
<item>
<title>Contacts</title>
<link>http://gusiev.com/contacts/</link>
<pubDate>Sat, 25 Apr 2009 13:59:03 +0000</pubDate>
<dc:creator><![CDATA[Bogdan Gusiev]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://gusiev.com/?page_id=13</guid>
<description></description>
<content:encoded><![CDATA[email: <img src="/images/email.jpg"/><br/>
skype: <a href="callto:bogdan.gusev">bogdan.gusev</a><br/>
icq: <a href="http://www.icq.com/scripts/contact.dll?msgto=293802993"> 293802993</a>]]></content:encoded>
<wp:post_id>13</wp:post_id>
<wp:post_date>2009-04-25 16:59:03</wp:post_date>
<wp:post_date_gmt>2009-04-25 13:59:03</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>contacts</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>page</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1240670706</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_page_template</wp:meta_key>
<wp:meta_value>default</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>Ant task to install tomcat service</title>
<link>http://gusiev.com/2009/04/ant-task-to-install-tomcat-service/</link>
<pubDate>Tue, 28 Apr 2009 16:37:57 +0000</pubDate>
<dc:creator><![CDATA[Bogdan Gusiev]]></dc:creator>

		<category><![CDATA[Administration]]></category>

		<category domain="category" nicename="admin"><![CDATA[Administration]]></category>

		<category><![CDATA[IT-related]]></category>

		<category domain="category" nicename="it"><![CDATA[IT-related]]></category>

		<category domain="tag"><![CDATA[ant]]></category>

		<category domain="tag" nicename="ant"><![CDATA[ant]]></category>

		<category domain="tag"><![CDATA[howto]]></category>

		<category domain="tag" nicename="howto"><![CDATA[howto]]></category>

		<category domain="tag"><![CDATA[java]]></category>

		<category domain="tag" nicename="java"><![CDATA[java]]></category>

		<category domain="tag"><![CDATA[service]]></category>

		<category domain="tag" nicename="service"><![CDATA[service]]></category>

		<category domain="tag"><![CDATA[tomcat]]></category>

		<category domain="tag" nicename="tomcat"><![CDATA[tomcat]]></category>

		<category domain="tag"><![CDATA[windows]]></category>

		<category domain="tag" nicename="windows"><![CDATA[windows]]></category>

<guid isPermaLink="false">http://gusiev.com/?p=10</guid>
<description></description>
<content:encoded><![CDATA[If you are familiar to run Apache Tomcat as Windows service, you can install it with the ant task. <i>build.xml</i> file sample under the cut line.
<!--more-->
<hr/>
First of all let's do some properties setup:

<div class="bordered">
<code>
catalina.home=d:/java/tomcat-6.0.18
tomcat.executable=${catalina.home}/bin/tomcat6.exe
tomcat.service.executable=\
${catalina.home}/bin/service.bat
tomcat.service.name=myproject
# parameters that will be used in the jvm
tomcat.service.jvm.ms=128
tomcat.service.jvm.mx=256
</code>
</div>
Service startup task consists of 5 exec commands:
<ul>
	<li>Stop service if currently running</li>
	<li>Delete service if installed</li>
	<li>Install service with bat script</li>
	<li>Update service with some parameters</li>
	<li>Start service</li>
</ul>

Here is the implementation:
<div class="bordered">
<code>

    &lt;target name="tomcat.service.install" description="Install tomcat service"&gt;
        
        &lt;exec command="net stop ${tomcat.service.name}"
              failifexecutionfails="false"
              failonerror="false"/&gt;

        &lt;exec command="${tomcat.executable} //DS//${tomcat.service.name}"
              failifexecutionfails="false"
              failonerror="false"/&gt;
        &lt;exec executable="${tomcat.service.executable}" 
                  failifexecutionfails="true" failonerror="true"&gt;
            &lt;env key="CATALINA_HOME" value="${catalina.home}"/&gt;
            &lt;arg value="install"/&gt;
            &lt;arg value="${tomcat.service.name}"/&gt;
        &lt;/exec&gt;
       &lt;exec executable="${tomcat.executable}"&gt;
            &lt;arg value="//US//${tomcat.service.name}"/&gt;
            &lt;arg value="--JvmMs=${jvm.ms}"/&gt;
            &lt;arg value="--JvmMx=${jvm.mx}"/&gt;
            &lt;arg value="--Startup=auto"/&gt;
        &lt;/exec&gt;
        &lt;exec command="net start ${tomcat.service.name}" 
                  failifexecutionfails="true" failonerror="true"/&gt;
    &lt;/target&gt;



</code>
</div>]]></content:encoded>
<wp:post_id>10</wp:post_id>
<wp:post_date>2009-04-28 19:37:57</wp:post_date>
<wp:post_date_gmt>2009-04-28 16:37:57</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>ant-task-to-install-tomcat-service</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1240939079</wp:meta_value>
</wp:postmeta>
<wp:comment>
<wp:comment_id>21</wp:comment_id>
<wp:comment_author><![CDATA[With This Diet I Lost Thirty Póunds in Only a Month]]></wp:comment_author>
<wp:comment_author_email>weightloss8972o@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://www.jpweightlossblog.com</wp:comment_author_url>
<wp:comment_author_IP>67.205.85.53</wp:comment_author_IP>
<wp:comment_date>2009-05-06 05:21:38</wp:comment_date>
<wp:comment_date_gmt>2009-05-06 02:21:38</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Hi, nice post. I have been thinking about this issue,so thanks for blogging. I will definitely be subscribing to your posts. Keep up the good posts]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>147</wp:comment_id>
<wp:comment_author><![CDATA[myspace chips]]></wp:comment_author>
<wp:comment_author_email>gonzalez14959@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://www.abcarticledirectory.com/Article/Why-Facebook-Poker-Chips-Are-Such-a-Popular-Virtual-Currency-for-Texas-Holdem-Games/792285</wp:comment_author_url>
<wp:comment_author_IP>173.208.14.117</wp:comment_author_IP>
<wp:comment_date>2010-03-20 19:15:06</wp:comment_date>
<wp:comment_date_gmt>2010-03-20 16:15:06</wp:comment_date_gmt>
<wp:comment_content><![CDATA[lol a number of the feedback people make are kinda silly, now and again i think about whether they really read the subject material and threads before writing a comment or if perhaps they take a moment to read over the titles and prepare the very first thing that pops into their heads. anyways, it's pleasurable to browse through keen commentary from time to time as opposed to the exact same, old blog vomit which i often see on the internet i'm off to take up a smattering of hands of facebook poker good bye]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
	</item>
<item>
<title>Aphorisms about programming</title>
<link>http://gusiev.com/2009/04/some-programming-aphorisms/</link>
<pubDate>Wed, 29 Apr 2009 10:14:02 +0000</pubDate>
<dc:creator><![CDATA[Bogdan Gusiev]]></dc:creator>

		<category><![CDATA[IT-related]]></category>

		<category domain="category" nicename="it"><![CDATA[IT-related]]></category>

		<category><![CDATA[Life]]></category>

		<category domain="category" nicename="life"><![CDATA[Life]]></category>

		<category domain="tag"><![CDATA[aphorism]]></category>

		<category domain="tag" nicename="aphorism"><![CDATA[aphorism]]></category>

		<category domain="tag"><![CDATA[humor]]></category>

		<category domain="tag" nicename="humor"><![CDATA[humor]]></category>

		<category domain="tag"><![CDATA[programming]]></category>

		<category domain="tag" nicename="programming"><![CDATA[programming]]></category>

<guid isPermaLink="false">http://gusiev.com/?p=15</guid>
<description></description>
<content:encoded><![CDATA[I am not clever. I am just yet another way to use google.<br/>
Good programmer should be lazy.<br/>
The hole in your pocket is not critical unless you have a hole in your other pocket.<br/>
<!--more-->
<hr/>
Software is like sex - better when it is free. Linus Torvalds.<br/>
Sometimes the theory meets practice. Practice wins. Always.<br/>
10% of your zeals brings you 90% of success. Other 90% just 10% of success.<br/>
About haste: The perfection of a clock is not in the speed of the movement, but in its correctness.<br/>
Don't be satisfied with an apparent fix; full understanding is the standard.<br/>
If you only know one language, no matter how well you know it, you're not a great programmer.<br/>
The only "best practice" you should be using all the time is "Use Your Brain".<br/>
]]></content:encoded>
<wp:post_id>15</wp:post_id>
<wp:post_date>2009-04-29 13:14:02</wp:post_date>
<wp:post_date_gmt>2009-04-29 10:14:02</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>some-programming-aphorisms</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1242195340</wp:meta_value>
</wp:postmeta>
<wp:comment>
<wp:comment_id>142</wp:comment_id>
<wp:comment_author><![CDATA[Eddy Bucknor]]></wp:comment_author>
<wp:comment_author_email>Cipullo10@bigfoot.com</wp:comment_author_email>
<wp:comment_author_url>http://http://camosam.weebly.com</wp:comment_author_url>
<wp:comment_author_IP>66.91.48.29</wp:comment_author_IP>
<wp:comment_date>2010-03-06 03:28:49</wp:comment_date>
<wp:comment_date_gmt>2010-03-06 00:28:49</wp:comment_date_gmt>
<wp:comment_content><![CDATA[It s been a long and tedious night, there's nothing worse than a 12 hr shift when nothing goes wrong I can't leave the precip or it will bust so I'm stuck on my own until break.  At least I have the net for company, they're not bad but they get twitchy about the phones so I'm lucky to have found something worth a read, thanks by this time of night I need all the help I can get.  Fortunately it's a few weeks before I cycle around to this job again but I'll pop in then, plant failure permitting.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
	</item>
<item>
<title>Update and create timestamps with MySQL</title>
<link>http://gusiev.com/2009/04/update-and-create-timestamps-with-mysql/</link>
<pubDate>Thu, 30 Apr 2009 07:38:23 +0000</pubDate>
<dc:creator><![CDATA[Bogdan Gusiev]]></dc:creator>

		<category><![CDATA[Administration]]></category>

		<category domain="category" nicename="admin"><![CDATA[Administration]]></category>

		<category><![CDATA[IT-related]]></category>

		<category domain="category" nicename="it"><![CDATA[IT-related]]></category>

		<category domain="tag"><![CDATA[database]]></category>

		<category domain="tag" nicename="database"><![CDATA[database]]></category>

		<category domain="tag"><![CDATA[howto]]></category>

		<category domain="tag" nicename="howto"><![CDATA[howto]]></category>

		<category domain="tag"><![CDATA[mysql]]></category>

		<category domain="tag" nicename="mysql"><![CDATA[mysql]]></category>

		<category domain="tag"><![CDATA[timestamp]]></category>

		<category domain="tag" nicename="timestamp"><![CDATA[timestamp]]></category>

<guid isPermaLink="false">http://gusiev.com/?p=16</guid>
<description></description>
<content:encoded><![CDATA[A lot of relational tables need created and update timestamps columns. I prefer having them for all tables with no exception. However, most of applications I am working on are running MySQL. MySQL has minor limitation on timestamps. Unfortunately you can create only one time stamp column that has <em> DEFAULT NOW()</em> value. Read more to see how to avoid this limitation. <!--more-->
<hr/>
The simplest way to do this is create the following columns in the table:
<div class="bordered"><code>stamp_created timestamp default now(), 
stamp_updated timestamp default now() on update now()) </code></div>
But MySQL will return the following error: <br/> 
<em>ERROR 1293 (HY000): Incorrect table definition; there can be only one TIMESTAMP column with CURRENT_ in DEFAULT or ON UPDATE clause</em> <br/>
You can use only one of the definitions in one table. However here is the way how to create both timestamps columns:
<pre><code> create table test_table( 
id integer not null auto_increment primary key, 
stamp_created timestamp default '0000-00-00 00:00:00', 
stamp_updated timestamp default now() on update now() 
); </code></pre>
Note that it is necessary to enter nulls into both columns during ‘insert’:
<pre><code> mysql&gt; insert into test_table(stamp_created, stamp_updated) values(null, null); 
Query OK, 1 row affected (0.06 sec)
mysql&gt; select * from t5; 
+----+---------------------+---------------------+ 
| id | stamp_created       | stamp_updated       |
+----+---------------------+---------------------+
|  2 | 2009-04-30 09:44:35 | 2009-04-30 09:44:35 |
+----+---------------------+---------------------+
2 rows in set (0.00 sec)  
mysql&gt; update test_table set id = 3 where id = 2; 
Query OK, 1 row affected (0.05 sec) Rows matched: 1  Changed: 1  Warnings: 0  
mysql&gt; select * from test_table;
+----+---------------------+---------------------+
| id | stamp_created       | stamp_updated       | 
+----+---------------------+---------------------+ 
|  3 | 2009-04-30 09:44:35 | 2009-04-30 09:46:59 | 
+----+---------------------+---------------------+ 
2 rows in set (0.00 sec)  
mysql&gt;
</code></pre>]]></content:encoded>
<wp:post_id>16</wp:post_id>
<wp:post_date>2009-04-30 10:38:23</wp:post_date>
<wp:post_date_gmt>2009-04-30 07:38:23</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>update-and-create-timestamps-with-mysql</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1276083374</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
<wp:comment>
<wp:comment_id>63</wp:comment_id>
<wp:comment_author><![CDATA[Red Five]]></wp:comment_author>
<wp:comment_author_email>red_five@charter.net</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>24.151.231.199</wp:comment_author_IP>
<wp:comment_date>2009-06-18 21:58:22</wp:comment_date>
<wp:comment_date_gmt>2009-06-18 18:58:22</wp:comment_date_gmt>
<wp:comment_content><![CDATA[There's a simpler way: simply make your stamp_updated column first, and set its "on update" attribute to current_timestamp, with no default value. Then follow with your stamp_created column, and set nothing for default value or "on update". Timestamp values default to the current timestamp, according to http://www.haidongji.com/2009/01/04/interesting-things-about-timestamp-data-type-in-mysql/.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>64</wp:comment_id>
<wp:comment_author><![CDATA[Red Five]]></wp:comment_author>
<wp:comment_author_email>red_five@charter.net</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>24.151.231.199</wp:comment_author_IP>
<wp:comment_date>2009-06-18 22:01:58</wp:comment_date>
<wp:comment_date_gmt>2009-06-18 19:01:58</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Oops, misread the default value thing. I just tried it, and by default it'll insert a timestamp value of '0000-00-00 00:00:00'.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>50</wp:comment_id>
<wp:comment_author><![CDATA[Bogdan Gusiev]]></wp:comment_author>
<wp:comment_author_email>agresso@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://gusiev.com</wp:comment_author_url>
<wp:comment_author_IP>92.49.206.115</wp:comment_author_IP>
<wp:comment_date>2009-05-30 10:38:36</wp:comment_date>
<wp:comment_date_gmt>2009-05-30 07:38:36</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Agreed, but I prefer avoid triggers.
Both solutions have weak points.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>1</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>47</wp:comment_id>
<wp:comment_author><![CDATA[pradeep]]></wp:comment_author>
<wp:comment_author_email>malavika_pradeep@yahoo.co.in</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>20.137.18.50</wp:comment_author_IP>
<wp:comment_date>2009-05-28 21:17:44</wp:comment_date>
<wp:comment_date_gmt>2009-05-28 18:17:44</wp:comment_date_gmt>
<wp:comment_content><![CDATA[You can use triggers in tables and avoid inserting NULL in your insert statement. This would enforce the current timestamp in that column.
eg. 

DELIMITER $$
CREATE trigger trgrname
       before insert on test_table
       for each row 
  begin
       set new.stamp_created  = current_timestamp;
  end$$
DELIMITER ;]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>65</wp:comment_id>
<wp:comment_author><![CDATA[Bogdan Gusiev]]></wp:comment_author>
<wp:comment_author_email>agresso@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://gusiev.com</wp:comment_author_url>
<wp:comment_author_IP>92.49.206.115</wp:comment_author_IP>
<wp:comment_date>2009-06-18 23:00:19</wp:comment_date>
<wp:comment_date_gmt>2009-06-18 20:00:19</wp:comment_date_gmt>
<wp:comment_content><![CDATA[I was doing the same experiments that you mentioned in your blog. The trick above is the only one way to have both timestamps in current MySQL version.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>1</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>62</wp:comment_id>
<wp:comment_author><![CDATA[Andy]]></wp:comment_author>
<wp:comment_author_email>andyroyer@shaw.ca</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>64.253.136.145</wp:comment_author_IP>
<wp:comment_date>2009-06-18 01:54:42</wp:comment_date>
<wp:comment_date_gmt>2009-06-17 22:54:42</wp:comment_date_gmt>
<wp:comment_content><![CDATA["Note that it is necessary to enter nulls into both columns during ‘insert’:"

Actually, you only need the null for the stamp_created as the stamp_updated will get updated automatically.

mysql&gt; insert into test_table(stamp_created) values(NULL); 
Query OK, 1 row affected (0.00 sec)

mysql&gt; select * from test_table;

+----+---------------------+---------------------+
| id | stamp_created       | stamp_updated       |
+----+---------------------+---------------------+
|  5 | 2009-06-17 15:54:18 | 2009-06-17 15:54:18 | 
+----+---------------------+---------------------+]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>113</wp:comment_id>
<wp:comment_author><![CDATA[Samo]]></wp:comment_author>
<wp:comment_author_email>jfkdh@dj.sk</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>213.151.233.31</wp:comment_author_IP>
<wp:comment_date>2009-11-18 12:38:21</wp:comment_date>
<wp:comment_date_gmt>2009-11-18 09:38:21</wp:comment_date_gmt>
<wp:comment_content><![CDATA[thnx Bogdan, good trick]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>111</wp:comment_id>
<wp:comment_author><![CDATA[Mehedi Hasan]]></wp:comment_author>
<wp:comment_author_email>mehedi@mehedibd.com</wp:comment_author_email>
<wp:comment_author_url>http://www.mehedibd.com</wp:comment_author_url>
<wp:comment_author_IP>119.30.36.45</wp:comment_author_IP>
<wp:comment_date>2009-11-12 12:44:35</wp:comment_date>
<wp:comment_date_gmt>2009-11-12 09:44:35</wp:comment_date_gmt>
<wp:comment_content><![CDATA[thanks a lot for the great tips...]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>117</wp:comment_id>
<wp:comment_author><![CDATA[sl fuqua]]></wp:comment_author>
<wp:comment_author_email>sl@fuqua.net</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>71.169.161.216</wp:comment_author_IP>
<wp:comment_date>2009-11-26 01:01:41</wp:comment_date>
<wp:comment_date_gmt>2009-11-25 22:01:41</wp:comment_date_gmt>
<wp:comment_content><![CDATA[It's crazy to have to do this. With dynamic websites, blogs, and such, it would seem obviously intrinsic that the original creation date should be maintained automatically somehow.

Oh the naivety of the `nub` :). Thanks for saving me several hours work figuring this out.

Regards,
sl]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>122</wp:comment_id>
<wp:comment_author><![CDATA[Ped]]></wp:comment_author>
<wp:comment_author_email>kukadlo@pobox.sk</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>193.86.131.18</wp:comment_author_IP>
<wp:comment_date>2009-12-16 13:09:40</wp:comment_date>
<wp:comment_date_gmt>2009-12-16 10:09:40</wp:comment_date_gmt>
<wp:comment_content><![CDATA[I don't get it. If you already have a "workaround" which does force you to insert null, why don't you insert NOW() instead of null?

With trigger workaround you gain the advantage to not mention "stamp_created" at all, so I can see a point there, although I personally refrain from such trigger usage, and I rather add NOW() into my inserts, which is IMHO much better then using "null" hack described here.

Because honestly, this looks more like a bug to me. If you want 0000-00-00 as default, why don't you get it? I would be not shocked if MySQL would decide to change this behaviour later in future and "fix" it. (although I would rather welcome to have 2+ columns default NOW fix :) )]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>130</wp:comment_id>
<wp:comment_author><![CDATA[ahjan]]></wp:comment_author>
<wp:comment_author_email>xiaoxin_jan90@hotmail.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>164.78.252.57</wp:comment_author_IP>
<wp:comment_date>2010-01-22 12:29:16</wp:comment_date>
<wp:comment_date_gmt>2010-01-22 09:29:16</wp:comment_date_gmt>
<wp:comment_content><![CDATA[hi! for the "insert into test_table(stamp_created, stamp_updated) values(null, null); " statement.. how would u write it in php codings so that whenever a new data is created, it will automatically include the date created.. 

bcux right now i tried writing the insert in mysql codings but it only shows null null for other column info.. only the date modified n created are updated..

as im using a webpage to add data it doesn shows the created time.. rather it shows the "0000-00-00 00:00:00". only my updated column can b updated..

pls help thks!]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>810</wp:comment_id>
<wp:comment_author><![CDATA[rugs rugs large]]></wp:comment_author>
<wp:comment_author_email>Kepp8547@aol.com</wp:comment_author_email>
<wp:comment_author_url>http://large-rugs.webs.com/</wp:comment_author_url>
<wp:comment_author_IP>81.134.8.237</wp:comment_author_IP>
<wp:comment_date>2011-05-17 15:21:12</wp:comment_date>
<wp:comment_date_gmt>2011-05-17 12:21:12</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Nightmare to come across relevantinfoon my besttopic. We enjoyed reading your thoughts. I understand this is not on topic but,does anyone know how to clean a bathroom rug with a grease stain? I have asked this question before but need an answer before I am disowned by my mother.]]></wp:comment_content>
<wp:comment_approved>spam</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>391</wp:comment_id>
<wp:comment_author><![CDATA[Hung Romo]]></wp:comment_author>
<wp:comment_author_email>Enmon@yahoo.com</wp:comment_author_email>
<wp:comment_author_url>http://www.learningtosurftips.com/archives/peru-surfing-in-peru</wp:comment_author_url>
<wp:comment_author_IP>189.59.64.141</wp:comment_author_IP>
<wp:comment_date>2010-07-14 22:16:00</wp:comment_date>
<wp:comment_date_gmt>2010-07-14 19:16:00</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Your weblog is incredibly helpful,I need to connect with u,could i sent e-mail to you?]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>467</wp:comment_id>
<wp:comment_author><![CDATA[Thibs]]></wp:comment_author>
<wp:comment_author_email>thibs@thibs.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>212.190.229.68</wp:comment_author_IP>
<wp:comment_date>2010-09-01 13:35:54</wp:comment_date>
<wp:comment_date_gmt>2010-09-01 10:35:54</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Another solution is to use a trigger :

CREATE TABLE sample_table (
  id TINYINT(4) NOT NULL AUTO_INCREMENT,
  xxx VARCHAR(255) NOT NULL DEFAULT 'value',
  date_insert TIMESTAMP NULL DEFAULT NULL,
  date_lastupdate TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (id)
); 

CREATE TRIGGER sample_table_on_insert BEFORE INSERT
    ON sample_table
    FOR EACH ROW 
	SET NEW.date_insert = CURRENT_TIMESTAMP]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>809</wp:comment_id>
<wp:comment_author><![CDATA[David]]></wp:comment_author>
<wp:comment_author_email>gizmo@gizmola.com</wp:comment_author_email>
<wp:comment_author_url>http://www.gizmola.com</wp:comment_author_url>
<wp:comment_author_IP>68.125.154.145</wp:comment_author_IP>
<wp:comment_date>2011-05-17 00:05:46</wp:comment_date>
<wp:comment_date_gmt>2011-05-16 21:05:46</wp:comment_date_gmt>
<wp:comment_content><![CDATA[I wrote about timestamps and various associated workarounds here:  http://www.gizmola.com/blog/archives/93-Too-much-information-about-the-MySQL-TIMESTAMP.html]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
	</item>
<item>
<title>JBoss Seam usage makes the application code crazy!</title>
<link>http://gusiev.com/2009/05/jboss-seam-usage-makes-the-application-code-crazy/</link>
<pubDate>Mon, 04 May 2009 07:19:52 +0000</pubDate>
<dc:creator><![CDATA[Bogdan]]></dc:creator>

		<category><![CDATA[IT-related]]></category>

		<category domain="category" nicename="it"><![CDATA[IT-related]]></category>

		<category><![CDATA[programming]]></category>

		<category domain="category" nicename="programming"><![CDATA[programming]]></category>

		<category domain="tag"><![CDATA[criticism]]></category>

		<category domain="tag" nicename="criticism"><![CDATA[criticism]]></category>

		<category domain="tag"><![CDATA[java]]></category>

		<category domain="tag" nicename="java"><![CDATA[java]]></category>

		<category domain="tag"><![CDATA[jboss]]></category>

		<category domain="tag" nicename="jboss"><![CDATA[jboss]]></category>

		<category domain="tag"><![CDATA[programming]]></category>

		<category domain="tag" nicename="programming"><![CDATA[programming]]></category>

		<category domain="tag"><![CDATA[seam]]></category>

		<category domain="tag" nicename="seam"><![CDATA[seam]]></category>

<guid isPermaLink="false">http://gusiev.com/?p=18</guid>
<description></description>
<content:encoded><![CDATA[Seam Application has a number of good innovations but let's find out if we lose some advantages that we had before. I started application development with JBoss Seam one year ago. With the code base growth I have had more and more problems in workflow development .
<!--more-->
<hr/> 
I noticed that there are many problems which we have not had before, for example: 
<ul>
	<li>Utility methods calls are not straight and clear now.</li>
	<li>Find all usages IDE has feature became useless because of mass EL calls.</li>
	<li>There is much of the meta programming in such a severe OOP language as Java.</li>
	<li>It is impossible to debug JSF templates</li>
	<li>Seam Exceptions look so unclear.</li>
</ul>

Programming with Seam has all disadvantages of script languages like PHP or Ruby.
 I definitely admit that some features like Conversations and Native AJAX support made a big step forward. There is a lot of information in the net about How cool is seam but I tried to reveal the underside.<br/>
<br/>
Think twice before switching to Seam. ]]></content:encoded>
<wp:post_id>18</wp:post_id>
<wp:post_date>2009-05-04 10:19:52</wp:post_date>
<wp:post_date_gmt>2009-05-04 07:19:52</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>jboss-seam-usage-makes-the-application-code-crazy</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1244311579</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>2</wp:meta_value>
</wp:postmeta>
<wp:comment>
<wp:comment_id>5</wp:comment_id>
<wp:comment_author><![CDATA[Christian]]></wp:comment_author>
<wp:comment_author_email>christian.helmbold@yahoo.de</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>212.80.224.243</wp:comment_author_IP>
<wp:comment_date>2009-05-05 07:33:26</wp:comment_date>
<wp:comment_date_gmt>2009-05-05 04:33:26</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Take a look at Apache Wicket! Wicket uses clean and pure Java code and pure HTML. Programming with Wicket feels very natural with wicket. Creating new components is so easy that sometimes you don't realize that you have just creaated a new one.

I've tested several web frameworks, but none of them was so consistent, easy to use and to debug. You feel the weaknesses of most frameworks when you create your own components, use AJAX or debug your application. All this is really comfortable with Wicket. You can simply read pure Java code an understand you application.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>6</wp:comment_id>
<wp:comment_author><![CDATA[Kenneth]]></wp:comment_author>
<wp:comment_author_email>kennethmark8888@yahoo.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>202.175.77.106</wp:comment_author_IP>
<wp:comment_date>2009-05-05 07:37:22</wp:comment_date>
<wp:comment_date_gmt>2009-05-05 04:37:22</wp:comment_date_gmt>
<wp:comment_content><![CDATA[I've got same experience by using Seam and reach a point that I've to leave it. As the application grows those downside effects really hurt us a lot.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>14</wp:comment_id>
<wp:comment_author><![CDATA[Pete Muir]]></wp:comment_author>
<wp:comment_author_email>pete.muir@jboss.org</wp:comment_author_email>
<wp:comment_author_url>http://in.relation.to/Bloggers/Pete</wp:comment_author_url>
<wp:comment_author_IP>82.41.244.26</wp:comment_author_IP>
<wp:comment_date>2009-05-05 19:03:31</wp:comment_date>
<wp:comment_date_gmt>2009-05-05 16:03:31</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Good feedback:

* Utility methods - you can still write your utility methods as plain Java methods, and wire them in yourself - use as little or as much DI as you like
* IDE / EL usage - we totally agree, hence why we have worked hard on JSR-299 which is typesafe, and so supported natively by an IDE (you can just use the standard "find implementations" feature to navigate, extensions can help with binding annotations)
* JSF debugging - we've tried to take our experience with this to JSF2 - so please try out JSF2 and see what you think - of course, this is a first iteration of the new support, so we need feedback on that
* Exception handling - we definitely realise this is a weak point (mainly due to having to bolt this onto JSF), but JSF2 now has native exception handling so hopefully this will address your concerns.

Pete (Seam project lead)]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>15</wp:comment_id>
<wp:comment_author><![CDATA[Bogdan]]></wp:comment_author>
<wp:comment_author_email>agresso@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://gusiev.com</wp:comment_author_url>
<wp:comment_author_IP>92.49.198.230</wp:comment_author_IP>
<wp:comment_date>2009-05-05 19:28:01</wp:comment_date>
<wp:comment_date_gmt>2009-05-05 16:28:01</wp:comment_date_gmt>
<wp:comment_content><![CDATA[I can not do utility method call from JSF template. That is why I have to use Seam Application context for utility class. That is a problem because I can not find all usages of the utility method call.

Thanks for your info - it was really helpful. I will look through JSF2 of course.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>1</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>16</wp:comment_id>
<wp:comment_author><![CDATA[Pete Muir]]></wp:comment_author>
<wp:comment_author_email>pete.muir@jboss.org</wp:comment_author_email>
<wp:comment_author_url>http://in.relation.to/Bloggers/Pete</wp:comment_author_url>
<wp:comment_author_IP>82.41.244.26</wp:comment_author_IP>
<wp:comment_date>2009-05-05 19:41:05</wp:comment_date>
<wp:comment_date_gmt>2009-05-05 16:41:05</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Aha - I see what you mean - in general, I would advise calling only business methods from JSF, and using these to call utility methods.

A good tooling solution (like JBoss Tools) will alieveate this tottally, as it extends the IDE searches to include EL.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>17</wp:comment_id>
<wp:comment_author><![CDATA[Max]]></wp:comment_author>
<wp:comment_author_email>max.andersen@redhat.com</wp:comment_author_email>
<wp:comment_author_url>http://jboss.org/tools</wp:comment_author_url>
<wp:comment_author_IP>83.79.93.1</wp:comment_author_IP>
<wp:comment_date>2009-05-05 19:41:41</wp:comment_date>
<wp:comment_date_gmt>2009-05-05 16:41:41</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Bogdan, JBoss Tools 3 have "Find references" that also reports usage of EL in xhtml, pages.xml etc.

Let us know if there is something we don't find ;)]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>18</wp:comment_id>
<wp:comment_author><![CDATA[Max]]></wp:comment_author>
<wp:comment_author_email>max.andersen@redhat.com</wp:comment_author_email>
<wp:comment_author_url>http://jboss.org/tools</wp:comment_author_url>
<wp:comment_author_IP>83.79.93.1</wp:comment_author_IP>
<wp:comment_date>2009-05-05 19:42:12</wp:comment_date>
<wp:comment_date_gmt>2009-05-05 16:42:12</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Whoops forgot to say I'm JBoss Tools lead]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>19</wp:comment_id>
<wp:comment_author><![CDATA[Bogdan]]></wp:comment_author>
<wp:comment_author_email>agresso@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://gusiev.com</wp:comment_author_url>
<wp:comment_author_IP>92.49.198.230</wp:comment_author_IP>
<wp:comment_date>2009-05-05 19:50:29</wp:comment_date>
<wp:comment_date_gmt>2009-05-05 16:50:29</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Max,
Can I integrate these tools to IDE? 
I prefer IntelliJ Idea.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>2</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>20</wp:comment_id>
<wp:comment_author><![CDATA[Bogdan]]></wp:comment_author>
<wp:comment_author_email>agresso@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://gusiev.com</wp:comment_author_url>
<wp:comment_author_IP>92.49.198.230</wp:comment_author_IP>
<wp:comment_date>2009-05-05 19:59:51</wp:comment_date>
<wp:comment_date_gmt>2009-05-05 16:59:51</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Pete,
`Permission` methods alway get me stuck. 
Currently I am doing the call like this for them:
<% if (object.isUserAllowedEdit(getCurrentUserId()) {%>
....
<% } %> 
I know that it is bad idea even if don't use Seam.
What do you recommend in this case?]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>2</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>53</wp:comment_id>
<wp:comment_author><![CDATA[Antonio]]></wp:comment_author>
<wp:comment_author_email>antonio.bull@gmail.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>91.196.61.71</wp:comment_author_IP>
<wp:comment_date>2009-06-06 15:57:33</wp:comment_date>
<wp:comment_date_gmt>2009-06-06 12:57:33</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Why you want to integrate JBoss Tools from Eclipse into Intellij IDEA ? IDEA has it's own "seam-tools"
http://www.jetbrains.com/idea/features/jboss_seam.html

And yes, it's true, think twice before switching to _ANY_ the new technology, because you definitely need a time to get on speed on it. and Seam is not just one technology, you also have to understand JSF lifecycle and Seam lifecycle - it's not an easy switch if you have no deal before with JSF.
you better take your time and read Seam-Books, it's not a technology which could be used without investigating time into learning it.

-"debug JSF templates".. Hmm, but you can debug Seam application as any other remote application. so you at least can debug your java method calls and if you need client-side javascript debug - then just use FireBug

the biggest pros of Seam for me - is simplicity of data-binding and natural way of organizing the code.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>54</wp:comment_id>
<wp:comment_author><![CDATA[Bogdan]]></wp:comment_author>
<wp:comment_author_email>agresso@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://gusiev.com</wp:comment_author_url>
<wp:comment_author_IP>92.49.206.115</wp:comment_author_IP>
<wp:comment_date>2009-06-06 21:11:12</wp:comment_date>
<wp:comment_date_gmt>2009-06-06 18:11:12</wp:comment_date_gmt>
<wp:comment_content><![CDATA[> the biggest pros of Seam for me - is simplicity of data-binding and natural way of organizing the code.
<br/>
Can you please be more concrete? How is it done in Seam? How is it done in other frameworks? Why does Seam better?]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>2</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>148</wp:comment_id>
<wp:comment_author><![CDATA[Mirna Srygley]]></wp:comment_author>
<wp:comment_author_email>Taper9@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://hubpages.com/hub/God-of-War-3-Release-Today-Free-Walkthrough-Gameplay-and-Updates</wp:comment_author_url>
<wp:comment_author_IP>124.81.110.50</wp:comment_author_IP>
<wp:comment_date>2010-03-25 18:58:31</wp:comment_date>
<wp:comment_date_gmt>2010-03-25 15:58:31</wp:comment_date_gmt>
<wp:comment_content><![CDATA[would it be possible to translate your website into spanish because i have difficulties of speaking to english, and as there are not many pictures on your website i would like to read more of what you are writting.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
	</item>
<item>
<title>What do you expect from the interface?</title>
<link>http://gusiev.com/2009/05/what-do-you-expect-from-interface/</link>
<pubDate>Tue, 05 May 2009 09:58:55 +0000</pubDate>
<dc:creator><![CDATA[Bogdan Gusiev]]></dc:creator>

		<category><![CDATA[IT-related]]></category>

		<category domain="category" nicename="it"><![CDATA[IT-related]]></category>

		<category><![CDATA[Ideas]]></category>

		<category domain="category" nicename="ideas"><![CDATA[Ideas]]></category>

		<category><![CDATA[programming]]></category>

		<category domain="category" nicename="programming"><![CDATA[programming]]></category>

		<category domain="tag"><![CDATA[idea]]></category>

		<category domain="tag" nicename="idea"><![CDATA[idea]]></category>

		<category domain="tag"><![CDATA[interface]]></category>

		<category domain="tag" nicename="interface"><![CDATA[interface]]></category>

		<category domain="tag"><![CDATA[java]]></category>

		<category domain="tag" nicename="java"><![CDATA[java]]></category>

		<category domain="tag"><![CDATA[LSP]]></category>

		<category domain="tag" nicename="lsp"><![CDATA[LSP]]></category>

		<category domain="tag"><![CDATA[programming]]></category>

		<category domain="tag" nicename="programming"><![CDATA[programming]]></category>

<guid isPermaLink="false">http://gusiev.com/?p=19</guid>
<description></description>
<content:encoded><![CDATA[Read a great article today - <a href="http://www.google.com.ua/url?sa=t&source=web&ct=res&cd=3&url=http%3A%2F%2Fwww.objectmentor.com%2Fresources%2Farticles%2Flsp.pdf&ei=xjb_Sbi-EJbItge-ocmSDA&usg=AFQjCNFnNI0DmzofjWDQEGILAT-W1L8Mtw&sig2=okCh8NuqsQslKMTSWOlaTw"> Liskov Substitution Principle (LSP)</a>. It let me understand that Interface is not just a list of methods.<br/>
<!--more-->
<hr/>
Let's review the following utility function:
<div class="bordered">
<code>public static void processList(List list) {
          list.clear();
          list.add(new Object());
}</code>
</div>
It accepts the object that implements <em>java.utils.List</em> interface as the parameter.
What do you expect to receive in result? The list with one element, right?<br/>
But does the result really meet your expectation? Who knows, the object that implements list interface do not guarantee you 'Act as container' behavior. It just implements all the methods of the interface and nothing else.<br/>
Actually all methods of the interface <strike>should have</strike> have a notation of their usage. If you do not follow these notations - you should not inherit your object from the interface even if the object has all the methods of the interface.<br/>
<br/>
<strong>Idea:</strong> Maybe one day programming languages will have unit tests as part of interface and validate each instance that implements this interface with them.



]]></content:encoded>
<wp:post_id>19</wp:post_id>
<wp:post_date>2009-05-05 12:58:55</wp:post_date>
<wp:post_date_gmt>2009-05-05 09:58:55</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>what-do-you-expect-from-interface</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1241629434</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_old_slug</wp:meta_key>
<wp:meta_value>interface-is-more-then-a-list-of-methods</wp:meta_value>
</wp:postmeta>
<wp:comment>
<wp:comment_id>24</wp:comment_id>
<wp:comment_author><![CDATA[Zoom]]></wp:comment_author>
<wp:comment_author_email>asda@yahoo.com</wp:comment_author_email>
<wp:comment_author_url>http://tinyurl.com/dfbu9u</wp:comment_author_url>
<wp:comment_author_IP>79.117.114.153</wp:comment_author_IP>
<wp:comment_date>2009-05-06 17:27:34</wp:comment_date>
<wp:comment_date_gmt>2009-05-06 14:27:34</wp:comment_date_gmt>
<wp:comment_content><![CDATA[These are only dreams. They won't come true till very long]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>25</wp:comment_id>
<wp:comment_author><![CDATA[admin]]></wp:comment_author>
<wp:comment_author_email>agresso@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://</wp:comment_author_url>
<wp:comment_author_IP>92.49.198.230</wp:comment_author_IP>
<wp:comment_date>2009-05-06 17:36:19</wp:comment_date>
<wp:comment_date_gmt>2009-05-06 14:36:19</wp:comment_date_gmt>
<wp:comment_content><![CDATA[I don't see any reason why this dream can not be implemented tomorrow.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>1</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>26</wp:comment_id>
<wp:comment_author><![CDATA[Andrea]]></wp:comment_author>
<wp:comment_author_email>a.scarafoni@gmail.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>89.97.188.138</wp:comment_author_IP>
<wp:comment_date>2009-05-06 18:39:45</wp:comment_date>
<wp:comment_date_gmt>2009-05-06 15:39:45</wp:comment_date_gmt>
<wp:comment_content><![CDATA[nice idea. why not?]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>27</wp:comment_id>
<wp:comment_author><![CDATA[Giorgio Sironi]]></wp:comment_author>
<wp:comment_author_email>piccoloprincipeazzurro@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://ossigeno.sourceforge.net</wp:comment_author_url>
<wp:comment_author_IP>93.146.18.226</wp:comment_author_IP>
<wp:comment_date>2009-05-06 19:02:12</wp:comment_date>
<wp:comment_date_gmt>2009-05-06 16:02:12</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Yes, nothing stops the implementor to fill the methods body with throw new RuntimeException(). There are languages (maybe Eiffel) that make preconditions, invariant and postconditions part of a method signature, however this seems too complicated for a general purpose language like Java. Moreover, today there's more interest in dynamic languages and duck typing that in strict interface correctness. :)]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>28</wp:comment_id>
<wp:comment_author><![CDATA[Fadzlan]]></wp:comment_author>
<wp:comment_author_email>fadzlan@gmail.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>124.82.58.130</wp:comment_author_IP>
<wp:comment_date>2009-05-06 19:08:13</wp:comment_date>
<wp:comment_date_gmt>2009-05-06 16:08:13</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Well, you should start coding now! ;-)]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>106</wp:comment_id>
<wp:comment_author><![CDATA[Objects behaviour inheritance with RSpec - Web development blog]]></wp:comment_author>
<wp:comment_author_email></wp:comment_author_email>
<wp:comment_author_url>http://gusiev.com/2009/10/objects-behaviour-inheritance-with-rspec/</wp:comment_author_url>
<wp:comment_author_IP>194.0.200.15</wp:comment_author_IP>
<wp:comment_date>2009-10-27 23:04:12</wp:comment_date>
<wp:comment_date_gmt>2009-10-27 20:04:12</wp:comment_date_gmt>
<wp:comment_content><![CDATA[[...] 2009 About half of a year ago I was writing about object interface and Liskov Substitution Princeple. In short: Any class instance that extends the base class should pass all unit tests behaviour [...] ]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type>pingback</wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
	</item>
<item>
<title>How to choose a sexy title for your article</title>
<link>http://gusiev.com/2009/05/how-to-choose-a-good-sexy-title-for-your-article/</link>
<pubDate>Wed, 13 May 2009 08:57:39 +0000</pubDate>
<dc:creator><![CDATA[Bogdan Gusiev]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<category domain="tag"><![CDATA[article]]></category>

		<category domain="tag" nicename="article"><![CDATA[article]]></category>

		<category domain="tag"><![CDATA[author]]></category>

		<category domain="tag" nicename="author"><![CDATA[author]]></category>

		<category domain="tag"><![CDATA[howto]]></category>

		<category domain="tag" nicename="howto"><![CDATA[howto]]></category>

		<category domain="tag"><![CDATA[idea]]></category>

		<category domain="tag" nicename="idea"><![CDATA[idea]]></category>

		<category domain="tag"><![CDATA[reader]]></category>

		<category domain="tag" nicename="reader"><![CDATA[reader]]></category>

		<category domain="tag"><![CDATA[title]]></category>

		<category domain="tag" nicename="title"><![CDATA[title]]></category>

<guid isPermaLink="false">http://gusiev.com/?p=20</guid>
<description></description>
<content:encoded><![CDATA[Most of the people will not spend a minute reading your article if they wouldn't get interested from the very beginning. What resides at the beginning of any article? <strong>It is the title of course.</strong>
That is why choose a good title is very important for every content posted in the net.
<!--more-->
<hr/>

Title should not reflect the overall idea of your article, let it <b>just be cool</b>. Attracting users attention is more important. It should be the key point of what are you righting about<br/> 
<br/>

Here is my idea: <strong>Title looks cool for the reader if it is close to his thoughts. </strong><br/>
Reader should feel himself close to the topic you are going to speak about.
Let's find out and see what do our mind filled in and describe some title choosing principles:

<h4>Emotions</h4>
Emotions acts like a catalyst. Expressing strong emotion in the title will give you the most effective result. People are getting interested not only when your emotion correspond to their but also vice versa.<br/>
Example: <a href="/2009/05/jboss-seam-usage-makes-the-application-code-crazy/">JBoss Seam usage makes the application code crazy!</a>

<h4>Questions</h4>
In most cases the reader is somebody who want to know more about the world. Put a question in the title and it will engage everybody who wants to know the answer. <br/>
Like this one: <a href="/2009/05/what-do-you-expect-from-interface/">What do you expect from the interface?</a> 


<h4>Famous topics</h4>
<ul>
	<li>Humor is top theme on every forum, every blog, every site all the time. Joking title is a good way to awake the interest.</li>
	<li>Sex. You noticed the title of this article, right?</li>
	<li>Weather</li>
	<li>Politics</li>
	<li>Sports</li>	
        <li>etc.</li>
</ul>
<br/>
Making a slight reference in the title to one of above mentioned topics will attract much more attention to your article<br/>
I hope this information was helpful. Thanks for reading.








]]></content:encoded>
<wp:post_id>20</wp:post_id>
<wp:post_date>2009-05-13 11:57:39</wp:post_date>
<wp:post_date_gmt>2009-05-13 08:57:39</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>how-to-choose-a-good-sexy-title-for-your-article</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1242221563</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>Double select from a single table in complex SQL query.</title>
<link>http://gusiev.com/2009/06/avoid-nested-select-double-single-table-complex-query/</link>
<pubDate>Tue, 02 Jun 2009 10:55:32 +0000</pubDate>
<dc:creator><![CDATA[Bogdan]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<category domain="tag"><![CDATA[nesting]]></category>

		<category domain="tag" nicename="nesting"><![CDATA[nesting]]></category>

		<category domain="tag"><![CDATA[query]]></category>

		<category domain="tag" nicename="query"><![CDATA[query]]></category>

		<category domain="tag"><![CDATA[select]]></category>

		<category domain="tag" nicename="select"><![CDATA[select]]></category>

		<category domain="tag"><![CDATA[sql]]></category>

		<category domain="tag" nicename="sql"><![CDATA[sql]]></category>

<guid isPermaLink="false">http://gusiev.com/?p=23</guid>
<description></description>
<content:encoded><![CDATA[When I start learning SQL I have to write a lot of nested queries when working on complex select statements from a single table. Now, I feel more comfortable with it and show how to avoid nesting. There are cases when you have to compare one row of the table with all others to get the result:
<ul>
	<li>Select next  element to current by the value of some field</li>
	<li>Select records that are unique by some complex expression</li>
	<li>Select all records that have the same parameter as given record.</li>
</ul>
You can get rid of nesting in all above cases. Let's review the example.
<!--more-->

<hr />Let's say we have the list of elements in `elements` table and we have the id of some element in this table. Now we have to get the next element from the list ordered by `sort_field`.
That could be easily done with the nested select statement:
<pre>
<code>select * from elements e 
where e.sort_field >= 
            (select * from elements where element_id = #value#) and
         e.element_id != #value#
order by e.sort_field limit 1;
</code>
</pre>
Looks not very cool.
Let's do the select statement from `element` table twice to avoid nesting:
<pre>
<code>-- The e1 is the result row and e2 is a helper row 
--that was picked up using nested select previously.
select e1.* from elements e1, elements e2
--conditional statement will look like
where e1.sort_field >= e2.sort_field and 
     e1.element_id != e2.element_id and 
     e2.element_id = #value#
-- and the end of the query remains almost the same
order by e1.sort_field limit 1
</code>
</pre>

Do not scare of double select from single table. That is the same technique as if they were different tables.


]]></content:encoded>
<wp:post_id>23</wp:post_id>
<wp:post_date>2009-06-02 13:55:32</wp:post_date>
<wp:post_date_gmt>2009-06-02 10:55:32</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>avoid-nested-select-double-single-table-complex-query</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1276083191</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
<wp:comment>
<wp:comment_id>677</wp:comment_id>
<wp:comment_author><![CDATA[Bill]]></wp:comment_author>
<wp:comment_author_email>billyrech@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://hostgatordiscounts.com/</wp:comment_author_url>
<wp:comment_author_IP>98.100.165.89</wp:comment_author_IP>
<wp:comment_date>2010-12-21 00:31:01</wp:comment_date>
<wp:comment_date_gmt>2010-12-20 21:31:01</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Complex SQL queries is necessary evil. There isn't much you can do.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>808</wp:comment_id>
<wp:comment_author><![CDATA[backlinks]]></wp:comment_author>
<wp:comment_author_email>Blowe@yahoo.com</wp:comment_author_email>
<wp:comment_author_url>http://backlinkcenter.nl</wp:comment_author_url>
<wp:comment_author_IP>76.73.56.217</wp:comment_author_IP>
<wp:comment_date>2011-05-16 13:35:22</wp:comment_date>
<wp:comment_date_gmt>2011-05-16 10:35:22</wp:comment_date_gmt>
<wp:comment_content><![CDATA[There are some fascinating deadlines on this article however I don’t know if I see all of them middle to heart. There is some validity however I'll take hold opinion till I look into it further. Good article , thanks and we wish extra! Added to FeedBurner as nicely]]></wp:comment_content>
<wp:comment_approved>spam</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>806</wp:comment_id>
<wp:comment_author><![CDATA[Burn Accident]]></wp:comment_author>
<wp:comment_author_email>scrapingthebox@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://www.PhillyInjuryLawyer.com</wp:comment_author_url>
<wp:comment_author_IP>98.227.131.95</wp:comment_author_IP>
<wp:comment_date>2011-05-05 19:25:01</wp:comment_date>
<wp:comment_date_gmt>2011-05-05 16:25:01</wp:comment_date_gmt>
<wp:comment_content><![CDATA[I’ve gone ahead and bookmarked <a href="http://gusiev.com/2009/06/avoid-nested-select-double-single-table-complex-query" rel="nofollow">http://gusiev.com/2009/06/avoid-nested-select-double-single-table-complex-query</a> at Digg.com so my friends can see it too.  I simply used Double select from a single table in complex SQL query. - Bogdan Gusiev&#8217;s blog as the entry title in my Digg.com bookmark, as I figured if it is good enough for you to title your blog post that, then you probably would like to see it bookmarked the same way. Your ROCK Double select from a single table in complex SQL query. - Bogdan Gusiev&#8217;s blog ! Thanks,<a href="http://www.PhillyInjuryLawyer.com" rel="nofollow">http://www.PhillyInjuryLawyer.com</a>]]></wp:comment_content>
<wp:comment_approved>spam</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
	</item>
<item>
<title>Pragmatic review of Google Wave technology</title>
<link>http://gusiev.com/2009/06/pragmatic-review-view-google-wave-criticism-technolog/</link>
<pubDate>Mon, 08 Jun 2009 07:34:31 +0000</pubDate>
<dc:creator><![CDATA[Bogdan]]></dc:creator>

		<category><![CDATA[IT-related]]></category>

		<category domain="category" nicename="it"><![CDATA[IT-related]]></category>

		<category domain="tag"><![CDATA[criticism]]></category>

		<category domain="tag" nicename="criticism"><![CDATA[criticism]]></category>

		<category domain="tag"><![CDATA[review]]></category>

		<category domain="tag" nicename="review"><![CDATA[review]]></category>

		<category domain="tag"><![CDATA[technology]]></category>

		<category domain="tag" nicename="technology"><![CDATA[technology]]></category>

		<category domain="tag"><![CDATA[wave]]></category>

		<category domain="tag" nicename="wave"><![CDATA[wave]]></category>

<guid isPermaLink="false">http://gusiev.com/?p=24</guid>
<description></description>
<content:encoded><![CDATA[Have a good time watching the <a href="http://www.youtube.com/watch?v=v_UyVmITiYQ">Google Wave presentation video</a>. Looks like an excellent open technology that will make our life easier. I like the overall idea. It is really awesome. But I personally admit some things that seems useless to me...<br/>
<!--more-->
<hr/>
Starting from the very beginning I need to say: Wow! Now we can organize all communication threads to the widespread object called <strong>Wave</strong> that will be readable and editable by any other application. No more browsing dozen of sites and tracking all changes around - all interested waves can be reorganized in the way you want.<br/>
Let's review the features now:<br/>
<ul>
	<li> Act as Wiki. Wiki can be handled via Waves too, but not sure about parallel editing. That looks sexy on presentation but has no sense in action.</li>
	<li>Translation to another languages. I would like to have that on my desktop. Don't think it would be useful then doing the real time communication. Machine translation never was good enough.</li>	
       <li> Spell checker based on language model. Many people around worked on language model and no one has built it strong enough to handle automatic spell check. Let's wait for release and see if Google guys reach the success here.</li>

]]></content:encoded>
<wp:post_id>24</wp:post_id>
<wp:post_date>2009-06-08 10:34:31</wp:post_date>
<wp:post_date_gmt>2009-06-08 07:34:31</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>pragmatic-review-view-google-wave-criticism-technolog</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1244446471</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>2</wp:meta_value>
</wp:postmeta>
<wp:comment>
<wp:comment_id>675</wp:comment_id>
<wp:comment_author><![CDATA[Donna Carol]]></wp:comment_author>
<wp:comment_author_email>bobbieAcostaerpg@yahoo.com</wp:comment_author_email>
<wp:comment_author_url>http://www.nothing.com</wp:comment_author_url>
<wp:comment_author_IP>200.204.154.29</wp:comment_author_IP>
<wp:comment_date>2010-12-10 16:40:13</wp:comment_date>
<wp:comment_date_gmt>2010-12-10 13:40:13</wp:comment_date_gmt>
<wp:comment_content><![CDATA[I want to know the source of post. I want to read the entire article.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
	</item>
<item>
<title>When BDD user stories is productive</title>
<link>http://gusiev.com/2009/06/bdd-user-stories-productive-tdd-criticism/</link>
<pubDate>Mon, 29 Jun 2009 13:13:39 +0000</pubDate>
<dc:creator><![CDATA[Bogdan Gusiev]]></dc:creator>

		<category><![CDATA[IT-related]]></category>

		<category domain="category" nicename="it"><![CDATA[IT-related]]></category>

		<category><![CDATA[programming]]></category>

		<category domain="category" nicename="programming"><![CDATA[programming]]></category>

		<category domain="tag"><![CDATA[application]]></category>

		<category domain="tag" nicename="application"><![CDATA[application]]></category>

		<category domain="tag"><![CDATA[bdd]]></category>

		<category domain="tag" nicename="bdd"><![CDATA[bdd]]></category>

		<category domain="tag"><![CDATA[behavior]]></category>

		<category domain="tag" nicename="behavior"><![CDATA[behavior]]></category>

		<category domain="tag"><![CDATA[criticism]]></category>

		<category domain="tag" nicename="criticism"><![CDATA[criticism]]></category>

		<category domain="tag"><![CDATA[tdd]]></category>

		<category domain="tag" nicename="tdd"><![CDATA[tdd]]></category>

		<category domain="tag"><![CDATA[test]]></category>

		<category domain="tag" nicename="test"><![CDATA[test]]></category>

		<category domain="tag"><![CDATA[user story]]></category>

		<category domain="tag" nicename="user-story"><![CDATA[user story]]></category>

<guid isPermaLink="false">http://gusiev.com/?p=25</guid>
<description></description>
<content:encoded><![CDATA[When you are skilled Unit tests writer it is not very easy to estimate the potential of BDD. Moreover in most cases BDD is used as a human-readable wrapper for unit tests. Do you really think that programmers need such abstract layer? Of course not... Users needs them.<br/>
<!--more-->
<hr/>

Saying Users I mean every non technical person who will treat to application quality some how.
Featured innovation of BDD is <strong>User Stories</strong> - a human-readable bit of specification with technical test implementation behind it. <br/>
Let's review the following example from the blog specification:
<pre>
<code>
  Given I signed up as Author
    When I write article "TDD and BDD"
    And text of article is "BDD is ...."
    And I post article
    Then I should see "Article is created"
    And I should see article title "TDD and BDD"
</code>
</pre>
As you can see unlike TDD human readability is the term that was brought to the high priority in BDD. But that is not yet a BDD story.<br/>
We need the programming implementation for each phrase in the story, like this:
<pre>
<code>
"I signed up as Author":
     signInAsAuthor();
</code>
</pre>

Programmer's task is to chose the implementation that will validate described behavior. User doesn't know about any programming back end of the story. When the test failed he just knows that some behavior of the application is not working properly any more. <br/>
From this point of view the key principle of user story implementation is that it should <strong>guarantee</strong> with the most high probability that the user can complete described actions.<br/> 

Therefore user stories are the most productive when the implementation is done using <strong>GUI Robots</strong> like SWT bot, Selenium.


]]></content:encoded>
<wp:post_id>25</wp:post_id>
<wp:post_date>2009-06-29 16:13:39</wp:post_date>
<wp:post_date_gmt>2009-06-29 13:13:39</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>bdd-user-stories-productive-tdd-criticism</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1276083145</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
<wp:comment>
<wp:comment_id>75</wp:comment_id>
<wp:comment_author><![CDATA[Val]]></wp:comment_author>
<wp:comment_author_email>provalentin@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://provalentin.livejournal.com</wp:comment_author_url>
<wp:comment_author_IP>82.144.222.56</wp:comment_author_IP>
<wp:comment_date>2009-07-27 20:11:29</wp:comment_date>
<wp:comment_date_gmt>2009-07-27 17:11:29</wp:comment_date_gmt>
<wp:comment_content><![CDATA[hi, man, good to see!
u know, it's interesting blog.
seems u r a perfect writer!]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
	</item>
<item>
<title>Computer science ain't as good as it should be</title>
<link>http://gusiev.com/2009/07/computer-science-programming-criticism-object-database-design/</link>
<pubDate>Thu, 30 Jul 2009 10:25:06 +0000</pubDate>
<dc:creator><![CDATA[Bogdan Gusiev]]></dc:creator>

		<category><![CDATA[IT-related]]></category>

		<category domain="category" nicename="it"><![CDATA[IT-related]]></category>

		<category><![CDATA[programming]]></category>

		<category domain="category" nicename="programming"><![CDATA[programming]]></category>

		<category domain="tag"><![CDATA[criticism]]></category>

		<category domain="tag" nicename="criticism"><![CDATA[criticism]]></category>

		<category domain="tag"><![CDATA[database]]></category>

		<category domain="tag" nicename="database"><![CDATA[database]]></category>

		<category domain="tag"><![CDATA[oop]]></category>

		<category domain="tag" nicename="oop"><![CDATA[oop]]></category>

		<category domain="tag"><![CDATA[programming]]></category>

		<category domain="tag" nicename="programming"><![CDATA[programming]]></category>

		<category domain="tag"><![CDATA[science]]></category>

		<category domain="tag" nicename="science"><![CDATA[science]]></category>

<guid isPermaLink="false">http://gusiev.com/?p=26</guid>
<description></description>
<content:encoded><![CDATA[When I start studying computer science in the University class I truly believe that it is all I need to get started writing good programs. Algorithms > Functional programming > OOP > Databases > MVC is a step-by-step path of all people that learn programming of the web application. But...
<!--more-->
<br/><br/>
Programming basics like conditions, variables, cycles and functions are mandatory for everyone just like writing and speaking for a baby.<br/> 

But more advanced knowledge are less useful and optional. All of these:
<ul>
	<li>Object hierarchy</li>
	<li>Normalized database model</li>
</ul>
are turned into dust by more important
<ul>
	<li>Do it as fast as possible</li>
	<li>Customer wants!</li>
</ul>

Each framework declare it's own way to organize the application Classes. If you are working on CRUD(create-read-update-delete) data application you don't need to think about object hierarchy yourself anymore. All you need to do is understand where you need place the function that handle data processing. And the principles a well declined in the framework manual. 
Normalized database is only a myth in a real world application. In 80% of cases the database design is evident to the developer. In other 20% the database couldn't be normalized at all.<br/>
<br/>

When you start learning programming try to let your knowledge be "moved to production" as fast as possible. In other words: Have a programming practice as fast as possible and you will understand what kind of programming theory you really need. Concentrate your education on all cases you met and avoid learning things that you could possible come across.   






]]></content:encoded>
<wp:post_id>26</wp:post_id>
<wp:post_date>2009-07-30 13:25:06</wp:post_date>
<wp:post_date_gmt>2009-07-30 10:25:06</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>computer-science-programming-criticism-object-database-design</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1248955234</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
<wp:comment>
<wp:comment_id>78</wp:comment_id>
<wp:comment_author><![CDATA[Owen Fellows]]></wp:comment_author>
<wp:comment_author_email>owenfellows@gmail.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>193.9.13.138</wp:comment_author_IP>
<wp:comment_date>2009-07-30 16:26:01</wp:comment_date>
<wp:comment_date_gmt>2009-07-30 13:26:01</wp:comment_date_gmt>
<wp:comment_content><![CDATA[I find your comments here rather depressing in that you are saying only learn about things you need to know.  This means there is no innovation no striving to make things better.

I agree that often you need to take shortcuts to "Do it as fast as possible" but this does not mean you have to sacrific good programming style as in the end debugging hacked together code will probably take longer than writing it correctly in the first place.

I also disagree with your framwork comment, you should have atleast a high level understand of how a framework performs its function mainly so you can tell if you are using it correctly.  Yes dropping code in to a framework will give quick results but if you then move to another client that does not have this framework how to you reuse your knowledge, you can't as you have no understanding of the underlying execution of your code.

I also agree that a Normalized database is not realistic in the real world but is this because it has already been written badly, due to lack of knowledge, or because design decisions have been made e.g. for performance.  Even if it is not possible in the most part it should still be strived for.

Sorry for the long post but becoming a great programmer, developer, design, architect is about gaining knowledge about how things work so you can extend and improve them.  If we just use frameworks instead of understanding them we ultimatly reduce our own value.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>79</wp:comment_id>
<wp:comment_author><![CDATA[Bogdan Gusiev]]></wp:comment_author>
<wp:comment_author_email>agresso@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://gusiev.com</wp:comment_author_url>
<wp:comment_author_IP>94.248.126.32</wp:comment_author_IP>
<wp:comment_date>2009-07-30 21:34:27</wp:comment_date>
<wp:comment_date_gmt>2009-07-30 18:34:27</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Thanks, Owen for your comment.

Once when I was picking up the theme for my scientific effort, my scientific supervisor said:
You do not know to much yet that is why you can be optimistic push the most crazy ideas that may change the world.

The case when you seeking the answer yourself is a key point where you can be innovative.
I am always trying to understand how things work(or just try) and only then go and learn what others think about it.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>1</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>81</wp:comment_id>
<wp:comment_author><![CDATA[Dimitris Andreou]]></wp:comment_author>
<wp:comment_author_email>jim.andreou@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://code-o-matic.blogspot.com/</wp:comment_author_url>
<wp:comment_author_IP>138.38.226.47</wp:comment_author_IP>
<wp:comment_date>2009-07-31 13:21:42</wp:comment_date>
<wp:comment_date_gmt>2009-07-31 10:21:42</wp:comment_date_gmt>
<wp:comment_content><![CDATA[What is this... a recipe to train monkeys instead? Seriously.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>82</wp:comment_id>
<wp:comment_author><![CDATA[Bogdan Gusiev]]></wp:comment_author>
<wp:comment_author_email>agresso@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://gusiev.com</wp:comment_author_url>
<wp:comment_author_IP>94.248.126.32</wp:comment_author_IP>
<wp:comment_date>2009-07-31 14:15:40</wp:comment_date>
<wp:comment_date_gmt>2009-07-31 11:15:40</wp:comment_date_gmt>
<wp:comment_content><![CDATA[The monkey is monkey. It will not become human and there is nothing you can do with it. And the human is a human. 

In other words you should train monkey as a monkey and human as a human.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>1</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>102</wp:comment_id>
<wp:comment_author><![CDATA[Polprav]]></wp:comment_author>
<wp:comment_author_email>polprav@mail.ru</wp:comment_author_email>
<wp:comment_author_url>http://polprav.blogspot.com/</wp:comment_author_url>
<wp:comment_author_IP>188.187.67.228</wp:comment_author_IP>
<wp:comment_date>2009-10-22 03:50:17</wp:comment_date>
<wp:comment_date_gmt>2009-10-22 00:50:17</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Hello from Russia!
Can I quote a post in your blog with the link to you?]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>103</wp:comment_id>
<wp:comment_author><![CDATA[Bogdan Gusiev]]></wp:comment_author>
<wp:comment_author_email>agresso@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://gusiev.com</wp:comment_author_url>
<wp:comment_author_IP>77.122.211.73</wp:comment_author_IP>
<wp:comment_date>2009-10-22 09:39:46</wp:comment_date>
<wp:comment_date_gmt>2009-10-22 06:39:46</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Sure]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>1</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>202</wp:comment_id>
<wp:comment_author><![CDATA[Sean Torry]]></wp:comment_author>
<wp:comment_author_email>seantorry@sify.com</wp:comment_author_email>
<wp:comment_author_url>http://www.nilsondesign.com/</wp:comment_author_url>
<wp:comment_author_IP>122.170.56.209</wp:comment_author_IP>
<wp:comment_date>2010-06-11 11:06:50</wp:comment_date>
<wp:comment_date_gmt>2010-06-11 08:06:50</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Hi Russia
very interesting story. i like it and also enjoy..]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
	</item>
<item>
<title>Objects behaviour inheritance with RSpec</title>
<link>http://gusiev.com/2009/10/objects-behaviour-inheritance-with-rspec/</link>
<pubDate>Tue, 27 Oct 2009 19:51:06 +0000</pubDate>
<dc:creator><![CDATA[Bogdan Gusiev]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<category domain="tag"><![CDATA[behaviour]]></category>

		<category domain="tag" nicename="behaviour"><![CDATA[behaviour]]></category>

		<category domain="tag"><![CDATA[inheritance]]></category>

		<category domain="tag" nicename="inheritance"><![CDATA[inheritance]]></category>

		<category domain="tag"><![CDATA[rspec]]></category>

		<category domain="tag" nicename="rspec"><![CDATA[rspec]]></category>

		<category domain="tag"><![CDATA[ruby]]></category>

		<category domain="tag" nicename="ruby"><![CDATA[ruby]]></category>

		<category domain="tag"><![CDATA[test]]></category>

		<category domain="tag" nicename="test"><![CDATA[test]]></category>

<guid isPermaLink="false">http://gusiev.com/?p=28</guid>
<description></description>
<content:encoded><![CDATA[About half of a year ago I was writing about <a href="http://gusiev.com/2009/05/what-do-you-expect-from-interface/">object interface and Liskov Substitution Princeple</a>. In short: Any class instance that extends the base class should pass all <span style="text-decoration: line-through;">unit tests</span> behaviour tests written for base class instance. It was a surprise for me that this concept has already been implemented in RSpec.<br/><br/>

<!--more-->
My previous article was primary inspired by Java programming language and it's interface concept. Unlike Java, Ruby does not have interfaces, but behaviour inheritance is still actual for both languages. RSpec seems the first testing framework that provide the ability to validate LSP and behavior inheritance with 'it_should_behave_like'. <br/>
With Ruby modules(mixins) feature we can build reusable code and include it in different classes<a href="http://ruby-doc.org/core/classes/Module.html">(read more)</a>. With RSpec we can bundle the tests as well.<br/>

<br/>

Let's review the following module that uses one of the Rails callback and adds some logging:<br/>
<pre>
<code>
module LoggedModel
  def after_save
    super
    handle_logging
  end
end
</code>
</pre>
and the some tests group for this module:<br/>
<pre><code>
describe LoggableModel
  it "should be loggable" do
    LoggableModel.should ...
  end
end
</code>
</pre>
Now, we have a tested code that is going to be used in many cases like this:<br/>
<pre><code>class MyModel
  include LoggableModel
  def after_save
    do_some_other_thing
  end
end
</code></pre>

OK, let's see what we have: after_save in MyModel overwrites after_save in LoggableModel and breaks the logging. This is simplest example when the behavior inheritance may be broken. Rspec shared examples groups allows you to ensure that the code in LoggableModel is used correctly from any inherited class. Let's change the definithin of LoggableModel tests.<br/>
<pre><code>
shared_examples_for "logged model" do
  it "should be loggable" do
    subject.should...
  end
end
</code>
</pre>
'Subject' is the ultimate RSpec magic that let us make a simple abstraction with the tested class and reuse these shared examples in MyModel spec:
<pre>
<code>describe MyModel do
  it_should_behave_like 'loggable model'
end</code>
</pre>
In this way we will rerun the LoggableModel examples for MyModel and make sure that it's behavior wasn't broken.]]></content:encoded>
<wp:post_id>28</wp:post_id>
<wp:post_date>2009-10-27 22:51:06</wp:post_date>
<wp:post_date_gmt>2009-10-27 19:51:06</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>objects-behaviour-inheritance-with-rspec</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1276083100</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
<wp:comment>
<wp:comment_id>107</wp:comment_id>
<wp:comment_author><![CDATA[Ryan Davis]]></wp:comment_author>
<wp:comment_author_email>ryand-ruby@zenspider.com</wp:comment_author_email>
<wp:comment_author_url>http://blog.zenspider.com/</wp:comment_author_url>
<wp:comment_author_IP>75.146.57.36</wp:comment_author_IP>
<wp:comment_date>2009-10-28 21:43:39</wp:comment_date>
<wp:comment_date_gmt>2009-10-28 18:43:39</wp:comment_date_gmt>
<wp:comment_content><![CDATA[I've been doing this for years and years through simple test class inheritance.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>108</wp:comment_id>
<wp:comment_author><![CDATA[Mark Wilden]]></wp:comment_author>
<wp:comment_author_email>mark@mwilden.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>159.153.4.107</wp:comment_author_IP>
<wp:comment_date>2009-10-29 01:02:28</wp:comment_date>
<wp:comment_date_gmt>2009-10-28 22:02:28</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Yes, RSpec's text classes are (AFAIK) somewhat opaque, so inheritance isn't as useful.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>119</wp:comment_id>
<wp:comment_author><![CDATA[Dmitry]]></wp:comment_author>
<wp:comment_author_email>ratnikov@gmail.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>74.8.100.109</wp:comment_author_IP>
<wp:comment_date>2009-12-02 01:51:06</wp:comment_date>
<wp:comment_date_gmt>2009-12-01 22:51:06</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Shoulda allows similar stuff via merge_block method.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>767</wp:comment_id>
<wp:comment_author><![CDATA[Garfield Camuso]]></wp:comment_author>
<wp:comment_author_email>Tourtelotte1005@aol.com</wp:comment_author_email>
<wp:comment_author_url>http://www.amarayeng.blogspot.com/</wp:comment_author_url>
<wp:comment_author_IP>173.234.18.146</wp:comment_author_IP>
<wp:comment_date>2011-04-20 19:47:08</wp:comment_date>
<wp:comment_date_gmt>2011-04-20 16:47:08</wp:comment_date_gmt>
<wp:comment_content><![CDATA[It is taken me a not much time to read all of the comments, but I seriously loved the article. I'm certain it's going to be very helpful to me. It's always an enjoyable surprise every time a post is both informative and enjoyable! Thanks :)]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
	</item>
<item>
<title>Vim as IDE - new development era for me</title>
<link>http://gusiev.com/2009/12/vim-as-ruby-on-rails-ide-development-perfomanc/</link>
<pubDate>Mon, 30 Nov 2009 22:12:38 +0000</pubDate>
<dc:creator><![CDATA[Bogdan Gusiev]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<category domain="tag"><![CDATA[perfomance]]></category>

		<category domain="tag" nicename="perfomance"><![CDATA[perfomance]]></category>

		<category domain="tag"><![CDATA[vim]]></category>

		<category domain="tag" nicename="vim"><![CDATA[vim]]></category>

<guid isPermaLink="false">http://gusiev.com/?p=29</guid>
<description></description>
<content:encoded><![CDATA[I was using Vim to do the minor editing in config files for ages. Vim is advanced on basic navigation and editing operations. However I was always prefer IDE for programming because of it's specific to language navigation('go to definition' feature is awesome!), integrated debugger. But while gaining the experience I noticed that all advanced features began to be less important then basic ones. And you should try Vim if you feel the same.<br/>
<!--more-->
<hr/>

The basic concept of vim is that: Vim think in the same way as you do. For example: I want to delete 'd' everything inside 'i' brackets ')' and vim understands my command: di) <br/>
You shouldn't type a dozen of button to move cursor around and finally delete the selected fragment. 
It's hard to adapt because people are use to think in the way that there text editor do. Vim does vice versa. Some people are saying that they don't like vim because it make them think a lot. That's wrong! Vim is trying to make you free from thinking about editing and concentrate on the content.<br/>

General editing in Vim considered up to every small details. Ask yourself if there is some usual task that I am doing inefficiently and search the Vim feature to optimize that in 3-5 keys. And in ninety nine percent of cases you will find it as built in vim command or a plugin.
]]></content:encoded>
<wp:post_id>29</wp:post_id>
<wp:post_date>2009-12-01 01:12:38</wp:post_date>
<wp:post_date_gmt>2009-11-30 22:12:38</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>vim-as-ruby-on-rails-ide-development-perfomanc</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1259619161</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
<wp:comment>
<wp:comment_id>118</wp:comment_id>
<wp:comment_author><![CDATA[Sean Crotty]]></wp:comment_author>
<wp:comment_author_email>scrotty@gmail.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>76.120.40.213</wp:comment_author_IP>
<wp:comment_date>2009-12-01 03:30:52</wp:comment_date>
<wp:comment_date_gmt>2009-12-01 00:30:52</wp:comment_date_gmt>
<wp:comment_content><![CDATA[You should try the IDE Vim plugins - it's the best of both worlds.

IntelliJ has IdeaVim (http://ideavim.sourceforge.net/)
Eclipse has viplugin (http://www.viplugin.com/viplugin/)


They are both very good and allow you to do the "basic things" in a VIM-way, while still allowing you to do things like "Go to Definition" too.

Even better, they allow you to map things like "Go to Definition" to VIM-like keystrokes. For example, I use gd for "Go to Definition" of the method that the caret is currently in.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>525</wp:comment_id>
<wp:comment_author><![CDATA[jenny]]></wp:comment_author>
<wp:comment_author_email>Hiebert2983@gmaill.com</wp:comment_author_email>
<wp:comment_author_url>http://akjsdfagjsajksdh.com</wp:comment_author_url>
<wp:comment_author_IP>173.25.142.76</wp:comment_author_IP>
<wp:comment_date>2010-09-11 18:54:33</wp:comment_date>
<wp:comment_date_gmt>2010-09-11 15:54:33</wp:comment_date_gmt>
<wp:comment_content><![CDATA[A bit off topic mayhap, but anyway - which template are you using? I really love the CSS style.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
	</item>
<item>
<title>Advanced SQL and named scopes stack with ActiveRecord</title>
<link>http://gusiev.com/2010/01/sql-queries-activerecord-rails-named-scopes-stack/</link>
<pubDate>Sun, 24 Jan 2010 11:02:51 +0000</pubDate>
<dc:creator><![CDATA[Bogdan Gusiev]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<category domain="tag"><![CDATA[ActiveRecord]]></category>

		<category domain="tag" nicename="activerecord"><![CDATA[ActiveRecord]]></category>

		<category domain="tag"><![CDATA[named_scope]]></category>

		<category domain="tag" nicename="named_scope"><![CDATA[named_scope]]></category>

		<category domain="tag"><![CDATA[query]]></category>

		<category domain="tag" nicename="query"><![CDATA[query]]></category>

		<category domain="tag"><![CDATA[rails]]></category>

		<category domain="tag" nicename="rails"><![CDATA[rails]]></category>

		<category domain="tag"><![CDATA[ruby]]></category>

		<category domain="tag" nicename="ruby"><![CDATA[ruby]]></category>

		<category domain="tag"><![CDATA[sql]]></category>

		<category domain="tag" nicename="sql"><![CDATA[sql]]></category>

<guid isPermaLink="false">http://gusiev.com/?p=30</guid>
<description></description>
<content:encoded><![CDATA[If you ever work with rails application that is a little bit more complex then a simple CRUD you would know that some of the ActiveRecord magic doesn't work for complex SQL queries. I am primary talking about named scopes stack feature.<br/>
<!--more-->
<hr/>
Let's review the following named_scope that suppose to be usable in different combinations with others:
<pre><code>named_scope :network_of, lambda {|user|
{
:select => "u.*"
:from => "users u, followings f1, followings f2",
:conditions => "f1.follower_id = #{user.id} AND " + 
"f1.followed_id = f2.follower_id AND " +
"f2.followed_id = u.id"
}</code></pre>
It suppose to returns all people that are followed by people that are followed by the given person.
From the SQL point of view that is the simpliest and fastest way to do that with a plain SQL.
But this solution will have some issues with Active Record named scopes stack magic.
See that User.network_for(current_user).all(:limit =>5) will result in SQL exception primary because (:limit => 5) doesn't know about the table alias "users u".
We can not use it in fact.<br/>
The second problem comes to the foreground when we will try to use ActiveRecord features like
User.network_for(current_user).all(:include => :orders). ActiveRecord handles :include in the very different ways and in some cases you will see the SQL exception here as well.<br/>
The problem is that :include sometimes appends some joins to the query that is concatenated to the last table in the :from parameter. To solve that we should make "users" table to be the last one declared in :from parameter.
<pre><code>:select => "users.*"
:from => "followings f1, followings f2, users",
:conditions => "f1.follower_id = #{user.id} AND " + 
"f1.followed_id = f2.follower_id AND " +
"f2.followed_id = users.id"</code></pre>
Summary I would say that using :joins instead of :from/:conditions would give more flexibility and stackability to your named scopes but sometimes :from is more clear and here you got the tip how to use it.]]></content:encoded>
<wp:post_id>30</wp:post_id>
<wp:post_date>2010-01-24 14:02:51</wp:post_date>
<wp:post_date_gmt>2010-01-24 11:02:51</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>sql-queries-activerecord-rails-named-scopes-stack</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1276082966</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_old_slug</wp:meta_key>
<wp:meta_value>advanced-sql-queries-with-activerecord</wp:meta_value>
</wp:postmeta>
<wp:comment>
<wp:comment_id>157</wp:comment_id>
<wp:comment_author><![CDATA[Kandice Sephus]]></wp:comment_author>
<wp:comment_author_email>Pedigo@angelinatatum.com</wp:comment_author_email>
<wp:comment_author_url>http://bit.ly/b8Pojb</wp:comment_author_url>
<wp:comment_author_IP>95.170.219.40</wp:comment_author_IP>
<wp:comment_date>2010-04-05 16:17:38</wp:comment_date>
<wp:comment_date_gmt>2010-04-05 13:17:38</wp:comment_date_gmt>
<wp:comment_content><![CDATA[I've just stumbled upon your site while searching for a tutorial on an related subject. Glad I did too. There's a lot I like. Anyway, you've been bookmarked and I'll be back soon. :)]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>696</wp:comment_id>
<wp:comment_author><![CDATA[Dawn]]></wp:comment_author>
<wp:comment_author_email>thunderdata@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://thunderdata.com/blog</wp:comment_author_url>
<wp:comment_author_IP>99.64.96.137</wp:comment_author_IP>
<wp:comment_date>2011-03-22 04:52:10</wp:comment_date>
<wp:comment_date_gmt>2011-03-22 01:52:10</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Thanks! This is the info I needed to work around a complex query.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
	</item>
<item>
<title>A dream to develop application that I will use</title>
<link>http://gusiev.com/2010/03/quality-develop-application-improve-usability-design/</link>
<pubDate>Mon, 29 Mar 2010 09:26:38 +0000</pubDate>
<dc:creator><![CDATA[Bogdan Gusiev]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<category domain="tag"><![CDATA[application]]></category>

		<category domain="tag" nicename="application"><![CDATA[application]]></category>

		<category domain="tag"><![CDATA[design]]></category>

		<category domain="tag" nicename="design"><![CDATA[design]]></category>

		<category domain="tag"><![CDATA[quality]]></category>

		<category domain="tag" nicename="quality"><![CDATA[quality]]></category>

		<category domain="tag"><![CDATA[usability]]></category>

		<category domain="tag" nicename="usability"><![CDATA[usability]]></category>

<guid isPermaLink="false">http://gusiev.com/?p=32</guid>
<description></description>
<content:encoded><![CDATA[Developing sites for communities you never join, enterprise applications for company you never work in, services you never find useful... a serious problem of IT industry. All misunderstanding between customers and developers come from that reason.
<br/><br/>
It would be so great if we could always feel ourselves as a user of our applications and make  something useful, but not spend time on improving features that won't be familiar. Being a user of the developed application makes it really possible to develop ergonomic and pretty design.
<br/><br/>
Unfortunately most of the companies are ignoring that simple rule and unfortunately in some cases it is hard to follow. But anyway that is the only one way to build the best product.
]]></content:encoded>
<wp:post_id>32</wp:post_id>
<wp:post_date>2010-03-29 12:26:38</wp:post_date>
<wp:post_date_gmt>2010-03-29 09:26:38</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>quality-develop-application-improve-usability-design</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1269854799</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
<wp:comment>
<wp:comment_id>287</wp:comment_id>
<wp:comment_author><![CDATA[rüya tabiri]]></wp:comment_author>
<wp:comment_author_email>Benally37@hotmail.com</wp:comment_author_email>
<wp:comment_author_url>http://www.ruyatabirlerikitabi.com</wp:comment_author_url>
<wp:comment_author_IP>64.120.248.194</wp:comment_author_IP>
<wp:comment_date>2010-06-24 01:40:57</wp:comment_date>
<wp:comment_date_gmt>2010-06-23 22:40:57</wp:comment_date_gmt>
<wp:comment_content><![CDATA[dispenses utilize a terrific webpage decent Gives appreciate it for the efforts to assist me personally]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
	</item>
<item>
<title>Ruby1.8: 'private' doesn't give expected level of privacy</title>
<link>http://gusiev.com/2010/04/ruby18-private-protected-incapsulatio/</link>
<pubDate>Mon, 05 Apr 2010 10:16:09 +0000</pubDate>
<dc:creator><![CDATA[Bogdan Gusiev]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<category domain="tag"><![CDATA[criticism]]></category>

		<category domain="tag" nicename="criticism"><![CDATA[criticism]]></category>

		<category domain="tag"><![CDATA[encapsulation]]></category>

		<category domain="tag" nicename="encapsulation"><![CDATA[encapsulation]]></category>

		<category domain="tag"><![CDATA[method]]></category>

		<category domain="tag" nicename="method"><![CDATA[method]]></category>

		<category domain="tag"><![CDATA[privacy]]></category>

		<category domain="tag" nicename="privacy"><![CDATA[privacy]]></category>

		<category domain="tag"><![CDATA[ruby]]></category>

		<category domain="tag" nicename="ruby"><![CDATA[ruby]]></category>

<guid isPermaLink="false">http://gusiev.com/?p=33</guid>
<description></description>
<content:encoded><![CDATA[The classic OOP pattern usually called encapsulation implemented in ruby with <em>private</em> and <em>protected</em> <del>keywords</del> methods. The distinction between API and implementation works great with both. The problem is that <em>private</em> doesn't hide method for inherited classes. 
<!--more-->
<hr/>
See the simple example below:

<pre><code>
class A
  private
  def implementation
    puts 'private A'
  end
end

class B < A
  def api
    implementation
  end
end

B.new.api
</code></pre>

And we won't get exception at the last line.<br/>
The real difference between protected and private methods is more specific.<br/>
At first: <em>implementation</em> method can not be called like <em>self.implementation</em> even from class A.
<pre><code>class A
  def api
    self.implementation #exception here
  end
  private
  def implementation
    puts 'private A'
  end
end

A.new.api
</code></pre>
Seamless pure gap. You can do such call if the method would be protected. Can't imagine the case when this limitation is useful. <br/>
<br/>
The second difference is a bit esoteric. Two instances of the same class can access protected methods of each other but not private methods.

<pre><code>class A
  def api(another) #suppose to receive an instance of a
    implementation == another.implementation
  end
  protected
  def implementation
    puts 'private A'
  end
end
A.new.api(A.new)
</code></pre>
Fine for <em>protected</em> but fail for <em>private</em>. Well, this kind of protection do not make a real because of it's rareness.
<br/><br/>

You might do any decision on the points above.<br/>
My conclusion is to not use <em>private</em> at all, because it doesn't give the level of privacy that I expect. <em>private</em> is not suitable for such an extremely dynamic language as Ruby. 


]]></content:encoded>
<wp:post_id>33</wp:post_id>
<wp:post_date>2010-04-05 13:16:09</wp:post_date>
<wp:post_date_gmt>2010-04-05 10:16:09</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>ruby18-private-protected-incapsulatio</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1276082827</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
<wp:comment>
<wp:comment_id>187</wp:comment_id>
<wp:comment_author><![CDATA[Henning]]></wp:comment_author>
<wp:comment_author_email>henning.koch@makandra.de</wp:comment_author_email>
<wp:comment_author_url>http://gem-session.com</wp:comment_author_url>
<wp:comment_author_IP>94.216.55.114</wp:comment_author_IP>
<wp:comment_date>2010-05-23 16:55:27</wp:comment_date>
<wp:comment_date_gmt>2010-05-23 13:55:27</wp:comment_date_gmt>
<wp:comment_content><![CDATA[The way we are using private in our team is to give hints to the programmer who will refactor the class later. Private methods: Go crazy. Public methods: Expect lots of tests to break.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>188</wp:comment_id>
<wp:comment_author><![CDATA[Bogdan Gusiev]]></wp:comment_author>
<wp:comment_author_email>agresso@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://gusiev.com</wp:comment_author_url>
<wp:comment_author_IP>77.123.174.107</wp:comment_author_IP>
<wp:comment_date>2010-05-23 21:28:52</wp:comment_date>
<wp:comment_date_gmt>2010-05-23 18:28:52</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Yes, it's well practice. But I preffer to always use protected instead of private.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>1</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>463</wp:comment_id>
<wp:comment_author><![CDATA[szeryf]]></wp:comment_author>
<wp:comment_author_email>szeryf74@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://szeryf.wordpress.com/</wp:comment_author_url>
<wp:comment_author_IP>192.138.116.231</wp:comment_author_IP>
<wp:comment_date>2010-08-31 11:22:55</wp:comment_date>
<wp:comment_date_gmt>2010-08-31 08:22:55</wp:comment_date_gmt>
<wp:comment_content><![CDATA[The `private' implementation makes sense when you take into account that in Ruby you don't "call methods", you "send messages" to other objects. That's why it doesn't matter if the other object has the same type as the one that sends the message (technically, it may not even be true, if the other objects has undergone some monkey patching). Although I consider the fact that you can't send private messages to self to be a bug -- Ruby should "know" that self is self :)]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
	</item>
<item>
<title>DOM element class - css reference or javascript reference?</title>
<link>http://gusiev.com/2010/04/dom-element-class-html-javascript-reference/</link>
<pubDate>Tue, 20 Apr 2010 19:51:33 +0000</pubDate>
<dc:creator><![CDATA[Bogdan Gusiev]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<category domain="tag"><![CDATA[class]]></category>

		<category domain="tag" nicename="class"><![CDATA[class]]></category>

		<category domain="tag"><![CDATA[css]]></category>

		<category domain="tag" nicename="css"><![CDATA[css]]></category>

		<category domain="tag"><![CDATA[dom]]></category>

		<category domain="tag" nicename="dom"><![CDATA[dom]]></category>

		<category domain="tag"><![CDATA[element]]></category>

		<category domain="tag" nicename="element"><![CDATA[element]]></category>

		<category domain="tag"><![CDATA[html]]></category>

		<category domain="tag" nicename="html"><![CDATA[html]]></category>

		<category domain="tag"><![CDATA[javascript]]></category>

		<category domain="tag" nicename="javascript"><![CDATA[javascript]]></category>

<guid isPermaLink="false">http://gusiev.com/?p=34</guid>
<description></description>
<content:encoded><![CDATA[Designer have used element class attribute for CSS styling for ages. Nowadays classes are also used in javascript selectors. This overlapping cause additional problems: Changes in js may cause broken design and changes in design may cause broken js. The last one may be hard to detect especially when design and css are handled by different person.
<!--more-->
<hr/>
Element class seems the best way to query the element from DOM in js code. Other variants like it's relative possition to other elements are very fragile. Let's say that we have the following DOM:
<pre><code>&lt;a&gt; Delete&lt;/a&gt;
&lt;a&gt; Edit&lt;/a&gt;</code></pre>
And both links are handled with javascript. How would you separate them? 
<ul>
	<li><strong>By order</strong>(first, second) will cause problems if designer would like to change the order.</li>
	<li><strong>By id</strong> will fail if you would have a list of elements where each has these links</li>
	<li><strong>By label</strong> is just a fuck up and won't work for multi language application</li>
</ul>
The only one variant that provide the best stability is reference <strong>By class</strong>.
But as stated above class also serves for another purpose - styling. 

The thing that might help is a special prefix(for example "js") for all 'JavaScript classes'.
Like:
<pre><code>&lt;a class="js-new-comment big-blue-button"&gt; New Comment &lt;/a&gt;</code></pre>

And the convention that classes with prefix should only be used in javascript selectors and classes without prefix in CSS.
<br/><br/>
Yes, sometimes it may look like:
<pre><code>&lt;input type='button' class="js-follow-button follow-button"&gt; Follow this person &lt;/input&gt;</code></pre>
But that makes sense to eliminate maintenance problem described above.]]></content:encoded>
<wp:post_id>34</wp:post_id>
<wp:post_date>2010-04-20 22:51:33</wp:post_date>
<wp:post_date_gmt>2010-04-20 19:51:33</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>dom-element-class-html-javascript-reference</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1276082695</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
<wp:comment>
<wp:comment_id>166</wp:comment_id>
<wp:comment_author><![CDATA[DOM element class &#8211; css reference or javascript reference? &#8211; Web &#8230; | Source code bank]]></wp:comment_author>
<wp:comment_author_email></wp:comment_author_email>
<wp:comment_author_url>http://sourcecodebank.com/2010/04/20/dom-element-class-css-reference-or-javascript-reference-web-css/</wp:comment_author_url>
<wp:comment_author_IP>207.182.151.19</wp:comment_author_IP>
<wp:comment_date>2010-04-21 05:52:51</wp:comment_date>
<wp:comment_date_gmt>2010-04-21 02:52:51</wp:comment_date_gmt>
<wp:comment_content><![CDATA[[...] is the original post: DOM element class &#8211; css reference or javascript reference? &#8211; Web &#8230;   If you enjoyed this article please consider sharing [...] ]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type>pingback</wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>396</wp:comment_id>
<wp:comment_author><![CDATA[Bogdan Gusiev]]></wp:comment_author>
<wp:comment_author_email>agresso@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://gusiev.com</wp:comment_author_url>
<wp:comment_author_IP>77.88.216.22</wp:comment_author_IP>
<wp:comment_date>2010-07-16 12:41:17</wp:comment_date>
<wp:comment_date_gmt>2010-07-16 09:41:17</wp:comment_date_gmt>
<wp:comment_content><![CDATA[That's definitely match easier to reference by class with selectors in any js framework. Not sure that data-xxx selector will be as good as class selector.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>1</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>164</wp:comment_id>
<wp:comment_author><![CDATA[Sander Aarts]]></wp:comment_author>
<wp:comment_author_email>ikbouwsites@zoid.nl</wp:comment_author_email>
<wp:comment_author_url>http://jlix.net/</wp:comment_author_url>
<wp:comment_author_IP>85.147.197.1</wp:comment_author_IP>
<wp:comment_date>2010-04-21 00:50:00</wp:comment_date>
<wp:comment_date_gmt>2010-04-20 21:50:00</wp:comment_date_gmt>
<wp:comment_content><![CDATA[If behaviour and styling are related, which would seem likely in the last example, then I don't see any reason for seperate classNames.
I use 'js' prefixes as well though, but only for classNames that are added by JavaScript to give an element a certain state. With this prefix it should be clear for other developers, when looking at the stylesheet for instance, why certain classNames can not be found in the HTML templates.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>167</wp:comment_id>
<wp:comment_author><![CDATA[h3]]></wp:comment_author>
<wp:comment_author_email>haineault@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://haineault.com</wp:comment_author_url>
<wp:comment_author_IP>24.122.211.42</wp:comment_author_IP>
<wp:comment_date>2010-04-21 08:37:40</wp:comment_date>
<wp:comment_date_gmt>2010-04-21 05:37:40</wp:comment_date_gmt>
<wp:comment_content><![CDATA[jQuery UI uses this technique.. except it's ui- instead of js-.

But yeah.. overall it avoids lots of headaches :)]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>395</wp:comment_id>
<wp:comment_author><![CDATA[mike in africa]]></wp:comment_author>
<wp:comment_author_email>myang12@yahoo.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>196.210.152.24</wp:comment_author_IP>
<wp:comment_date>2010-07-16 00:15:09</wp:comment_date>
<wp:comment_date_gmt>2010-07-15 21:15:09</wp:comment_date_gmt>
<wp:comment_content><![CDATA[mayhaps using classes only for styling while using data-xxxx attributes will make it cleaner?]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
	</item>
<item>
<title>Advanced non-flat controllers hierarchy with rails</title>
<link>http://gusiev.com/2010/06/nesting-namespace-route-non-flat-controllers-hierarchy-rails/</link>
<pubDate>Mon, 07 Jun 2010 21:14:37 +0000</pubDate>
<dc:creator><![CDATA[Bogdan Gusiev]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<category domain="tag"><![CDATA[architecture]]></category>

		<category domain="tag" nicename="architecture"><![CDATA[architecture]]></category>

		<category domain="tag"><![CDATA[controller]]></category>

		<category domain="tag" nicename="controller"><![CDATA[controller]]></category>

		<category domain="tag"><![CDATA[rails]]></category>

		<category domain="tag" nicename="rails"><![CDATA[rails]]></category>

		<category domain="tag"><![CDATA[route]]></category>

		<category domain="tag" nicename="route"><![CDATA[route]]></category>

		<category domain="tag"><![CDATA[ruby]]></category>

		<category domain="tag" nicename="ruby"><![CDATA[ruby]]></category>

<guid isPermaLink="false">http://gusiev.com/?p=37</guid>
<description></description>
<content:encoded><![CDATA[REST became the best practice for organizing CRUD server side interface. 
But what to do when we have something more than hello-world application that 
goes forward from data CRUD and provides many presentations 
of the same data with different filters and different layouts?<br/>
<!--more-->

<h3>How the flat controller architecture goes to hell</h3>

Starting from REST-full controller people use to stick to them and add more and more actions to the same class. And that is how the controller code goes to hell:

<pre><code>class UsersController &lt; ApplicationController
#
# Filters
#
skip_before_filter :check_user_is_valid, :only =&gt; [:edit, :update]
before_filter :require_user, :only =&gt; [
:update, :edit, :settings, :disconnect_twitter, :connect_facebook_account, :google_contacts
]

before_filter :load_user, :except =&gt; [
:index, :new, :create, :remote_validate_email, :autocomplete_for_user_full_name,
:remote_validate_facebook_uid, :google_contacts
]

before_filter :check_permissions, :only =&gt; [ :edit, :update, :settings, :update_photo, :connect_facebook_account ]

before_filter :load_invitation, :only =&gt; [:new, :create]
before_filter :ensure_authenticated_to_facebook, :only =&gt; :connect_facebook_account
before_filter :initialize_form, :only =&gt; [:edit]

#
# And 20 almost independent actions goes here
# And the twice longer tests file for this controller
#

end
</code></pre>

<h3> Namespaces and nesting </h3>
The root of the problem is in ignoring the following simple rule:
<strong>The default choice for implementing new feature is do it in other controller</strong>
It's always better to have 20 controllers with one action then one controller with 20 actions.
Usually there is no compromise variant. And 20 controllers with one action ain't as bad as you imagine.<br/>
<br/>

In order to handle the large number of controller we are actively using the namespaces and nested resources features. Let me give an example: User has many projects, Project belongs to category. We need to list projects per user and per category. In the flat hierarchy you would be confused but namespaces and nesting solves the problem.<br/>

<pre><code>map.resources :categories do |c|
  c.namespace :categories do |categories|
    categories.resouces :projects
  end
end
map.resources :users do |u|
  c.namespace :users do |users|
    users.resouces :projects
  end
end

class Categories::ProjectsController

  def index
    @projects = ....
  end
end

class Users::ProjectsController

  def index
    @projects = ....
  end
end</code></pre>


Everyone heard about restful authentication but not so many people applied this idea to other not so restful from the first sight things. Like TwitterConnectionController:

<pre><code>class Users::TwitterConnectionController < ApplicationController

  def create
  end

  def destroy
  end
end</code></pre>

Many people will be pushing all such staff to UsersController until their editors would run out of memory.

<h3>Out of scope</h3>

State control actions are not in REST but should be one day. Placing them in the same controller with CRUD is generally a good idea:

<pre><code>class ArticlesController 

  def {new, create, update, edit, destroy}
  end

  def publish
    @article.publish!
    redirect_to articles_path
  end

end</code></pre>

<h3>Some sugar from generators</h3>

Rails <em>generate</em> script supports namespaces very well:
<pre><code>$ ./script/generate <del>rspec_</del>controller users/categories
      create  app/controllers/users
      create  app/helpers/users
      create  app/views/users/categories
      create  spec/controllers/users
      create  spec/helpers/users
      create  spec/views/users/categories
      create  spec/controllers/users/categories_controller_spec.rb
      create  spec/helpers/users/categories_helper_spec.rb
      create  app/controllers/users/categories_controller.rb
      create  app/helpers/users/categories_helper.rb</code></pre>

And classes created in appropriate namespace and folder as well as specs for them.
The only one thing you should do manually is add routes. 

<h3>Drawbacks</h3>

Every engeneering solution has it's drawbacks. While you have different controllers that operates on the same classes you might need to reuse functionality among them.
I preffer to solve it by mixing in a module:
<pre><code>class Users::ProjectController

 include UserNestedResource

end</code></pre>

Some people use inheritance instead. Both ways are almost the same. Nothing hard here as well.

<h3>Summary</h3>

At the end I 'll just repeat it again:<br/> 
Default policy for placing two actions that has some kind of connection is <strong>SPLIT</strong>.
]]></content:encoded>
<wp:post_id>37</wp:post_id>
<wp:post_date>2010-06-08 00:14:37</wp:post_date>
<wp:post_date_gmt>2010-06-07 21:14:37</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>nesting-namespace-route-non-flat-controllers-hierarchy-rails</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1276516365</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
<wp:comment>
<wp:comment_id>697</wp:comment_id>
<wp:comment_author><![CDATA[Fearless Fool]]></wp:comment_author>
<wp:comment_author_email>rdpoor@gmail.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>108.0.108.79</wp:comment_author_IP>
<wp:comment_date>2011-03-22 06:56:44</wp:comment_date>
<wp:comment_date_gmt>2011-03-22 03:56:44</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Useful stuff -- it solves an important problem.  

Is there maybe a typo in the second map.resources block?  I suspect it should be "u.namespace :users do |users|..." rather than "c.namespace...".  

Thanks again.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>698</wp:comment_id>
<wp:comment_author><![CDATA[Natisha Kahn]]></wp:comment_author>
<wp:comment_author_email>Paar@google.com</wp:comment_author_email>
<wp:comment_author_url>http://macallanridge.com/member/5770/</wp:comment_author_url>
<wp:comment_author_IP>108.62.168.113</wp:comment_author_IP>
<wp:comment_date>2011-03-23 09:30:12</wp:comment_date>
<wp:comment_date_gmt>2011-03-23 06:30:12</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Oh, this is quite interesting. Actulally, I found your blog on google search. I will tell my friend about your blog later.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
	</item>
<item>
<title>Ultimate rspec matcher to test validation</title>
<link>http://gusiev.com/2010/06/ultimate-rspec-matcher-to-test-validation/</link>
<pubDate>Wed, 30 Jun 2010 17:50:17 +0000</pubDate>
<dc:creator><![CDATA[Bogdan Gusiev]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<category domain="tag"><![CDATA[ActiveRecord]]></category>

		<category domain="tag" nicename="activerecord"><![CDATA[ActiveRecord]]></category>

		<category domain="tag"><![CDATA[pattern]]></category>

		<category domain="tag" nicename="pattern"><![CDATA[pattern]]></category>

		<category domain="tag"><![CDATA[rails]]></category>

		<category domain="tag" nicename="rails"><![CDATA[rails]]></category>

		<category domain="tag"><![CDATA[rspec]]></category>

		<category domain="tag" nicename="rspec"><![CDATA[rspec]]></category>

		<category domain="tag"><![CDATA[validation]]></category>

		<category domain="tag" nicename="validation"><![CDATA[validation]]></category>

<guid isPermaLink="false">http://gusiev.com/?p=38</guid>
<description></description>
<content:encoded><![CDATA[After a first thousand of tests using Rspec I fount it very annoying to repeat my self testing the standard code as spec code is usually twice longer than code it test. I've started to look for a way to simplify the patterns and make it reusable. Among other nice rspec tricks there is possibility to write custom Rspec matchers. Spec the validation is just two lines of code for each attribute now.
<!--more-->


<h3> Existing solutions </h3>
After doing some search around I found Shoulda and remarkable gems that provide a way of doing this. Here is one of remarkable variant (others are just ugly): 
<pre><code>it { should validate_numericality_of(:age, :greater_than => 18, :only_integer => true) }</code></pre>
But that is huge contradiction with BDD methodology because it doesn't make you think about behavior. People use to copy-paste code from model to spec and all possible bugs within. As the result <strong>nothing is tested</strong>... I don't even say about "test first".

<h3> Easy DSL and Implementation </h3>
When I implement validation everything I care about is: what values should be accepted and what values should not. An easy DSL that realize this pattern would be:
<pre><code>describe User do
  it { should accept_values_for(:email, “john@example.com”, “lambda@gusiev.com”) }
  it { should_not accept_values_for(:email, “invalid”, nil, “a@b”, “john@.com”) }
end</code></pre> 
That's it! Two lines of code per attribute. And that is perfectly fine for "test first" principle.<br/>
Rspec authors take care about custom Rspec matcher. So the implementation is very easy.
Fork me on github: <a href="http://github.com/bogdan/accept_values_for">accept_values_for rpec matcher</a>. The <strong>accept_values_for</strong> pattern is a true BDD way and unlike Remarkable it really do testing.

<h3> validates_uniqueness_of </h3> 
This is very special validation because you always need more then one record to test it. So, the pattern for uniqueness validation is:
<pre><code>describe User do
  context "if user with email 'aa@bb.com' exists" do
    before do
      User.create!(@valid_attributes.merge(:email => 'aa@bb.com')
    end
    it { should_not accept_values_for(:email, “aa@bb.com”) }
  end
end</code></pre>
<h3> Summary </h3>
Custom matcher is just 50 lines of code that make your life much easier. Do not scare to write your own. Custom matcher to test ActiveRecord#named_scope coming soon.]]></content:encoded>
<wp:post_id>38</wp:post_id>
<wp:post_date>2010-06-30 20:50:17</wp:post_date>
<wp:post_date_gmt>2010-06-30 17:50:17</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>ultimate-rspec-matcher-to-test-validation</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1277920217</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
<wp:comment>
<wp:comment_id>382</wp:comment_id>
<wp:comment_author><![CDATA[Ultimate rspec matcher to test named_scope or scoped - Web development blog]]></wp:comment_author>
<wp:comment_author_email></wp:comment_author_email>
<wp:comment_author_url>http://gusiev.com/2010/07/bdd-rspec-matcher-to-test-named_scope-scoped-rails-3/</wp:comment_author_url>
<wp:comment_author_IP>194.0.200.15</wp:comment_author_IP>
<wp:comment_date>2010-07-11 17:06:29</wp:comment_date>
<wp:comment_date_gmt>2010-07-11 14:06:29</wp:comment_date_gmt>
<wp:comment_content><![CDATA[[...] 2010 After having a good practice on using Ultimate rspec matcher to test validation I think it&#8217;s time to implement one for testing named scopes - custom finders. Testing these [...] ]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type>pingback</wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>682</wp:comment_id>
<wp:comment_author><![CDATA[Kendall Hockley]]></wp:comment_author>
<wp:comment_author_email>187Swann@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://www.netnewspublisher.com/actor-denzel-washington-named-americas-favorite-movie-star</wp:comment_author_url>
<wp:comment_author_IP>93.191.53.244</wp:comment_author_IP>
<wp:comment_date>2011-01-16 05:00:36</wp:comment_date>
<wp:comment_date_gmt>2011-01-16 02:00:36</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Thanks for sharing]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>404</wp:comment_id>
<wp:comment_author><![CDATA[Elliot Winkler]]></wp:comment_author>
<wp:comment_author_email>elliot.winkler@gmail.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>173.10.212.105</wp:comment_author_IP>
<wp:comment_date>2010-07-21 01:03:59</wp:comment_date>
<wp:comment_date_gmt>2010-07-20 22:03:59</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Yeah I've often wondered whether it's a good idea to use Remarkable. It does seem that I'm just copying and pasting code from my model to the test, with the assumption that Remarkable is doing the right thing. Interesting to think about.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>354</wp:comment_id>
<wp:comment_author><![CDATA[Lucas Prim]]></wp:comment_author>
<wp:comment_author_email>lucas.prim@gmail.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>189.101.235.141</wp:comment_author_IP>
<wp:comment_date>2010-07-05 17:46:32</wp:comment_date>
<wp:comment_date_gmt>2010-07-05 14:46:32</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Just saved me a bunch of lines!
Great initiative! Ty!]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>674</wp:comment_id>
<wp:comment_author><![CDATA[Bogdan Gusiev]]></wp:comment_author>
<wp:comment_author_email>agresso@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://gusiev.com</wp:comment_author_url>
<wp:comment_author_IP>213.160.145.74</wp:comment_author_IP>
<wp:comment_date>2010-12-07 14:38:20</wp:comment_date>
<wp:comment_date_gmt>2010-12-07 11:38:20</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Thanks, for good comment.

You found a right spot of the duscussion: stubs vs no stubs.

Tests should save you from mistakes. Stubs will save you from typos or 'lost during refactor' problem. And they will just spawn more maintanance as you change implementation.


I trust AR and don't want to test it again but plugins can break everything.

May be the case above is a little different because we don't suppose to change AR validation to something else, but use no stubs in this case doesn't make tests more complicated.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>1</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>673</wp:comment_id>
<wp:comment_author><![CDATA[nathanvda]]></wp:comment_author>
<wp:comment_author_email>nathan@dixis.com</wp:comment_author_email>
<wp:comment_author_url>http://www.dixis.com</wp:comment_author_url>
<wp:comment_author_IP>194.78.97.253</wp:comment_author_IP>
<wp:comment_date>2010-12-07 14:16:12</wp:comment_date>
<wp:comment_date_gmt>2010-12-07 11:16:12</wp:comment_date_gmt>
<wp:comment_content><![CDATA[A good tip, and a nice viewpoint.

Why i use remarkable is kind of like stubbing: i do not want to test whether ActiveRecord works, i just want to test whether i have the right calls in my model. 

Also i do not agree that using remarkable is not true BDD, as i clearly express behaviour of my model. While the test is very close to the actual implementation, it still is behaviour. I want that my model checks the numericality of :age, and it should be greater than 18. Isn't that behaviour?

I get what you are saying, and it is a very pure approach, but i do believe you are testing too much. As we are using ActiveRecord, a tested framework, we do not need to test the behaviour of ActiveRecord itself. If you want to be able to switch out ActiveRecord, and replace it by DataMapper or Mongo.

But i guess this also comes down to the debate about mocking and stubbing: if you mock/stub code then you increase binding and some pieces will get harder to refactor. On the other hand: you decouple your tests.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
	</item>
<item>
<title>Ultimate rspec matcher to test named_scope or scoped</title>
<link>http://gusiev.com/2010/07/bdd-rspec-matcher-to-test-named_scope-scoped-rails-3/</link>
<pubDate>Sun, 11 Jul 2010 14:05:57 +0000</pubDate>
<dc:creator><![CDATA[Bogdan Gusiev]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<category domain="tag"><![CDATA[ActiveRecord]]></category>

		<category domain="tag" nicename="activerecord"><![CDATA[ActiveRecord]]></category>

		<category domain="tag"><![CDATA[bdd]]></category>

		<category domain="tag" nicename="bdd"><![CDATA[bdd]]></category>

		<category domain="tag"><![CDATA[matcher]]></category>

		<category domain="tag" nicename="matcher"><![CDATA[matcher]]></category>

		<category domain="tag"><![CDATA[named_scope]]></category>

		<category domain="tag" nicename="named_scope"><![CDATA[named_scope]]></category>

		<category domain="tag"><![CDATA[rspec]]></category>

		<category domain="tag" nicename="rspec"><![CDATA[rspec]]></category>

<guid isPermaLink="false">http://gusiev.com/?p=39</guid>
<description></description>
<content:encoded><![CDATA[After having a good practice on using <a href="http://gusiev.com/2010/06/ultimate-rspec-matcher-to-test-validation/">Ultimate rspec matcher to test validation</a> I think it's time to implement one for testing named scopes - custom finders. Testing these finders is daily task. Here is how it can be done with minimum amount of code and maximum readability.
<!--more-->
<h3>Discovery <del>(Animal Planet)</del></h3>

What do we expect from the custom finder?
We expect that it should find assets A, B, C and should not find assets D, E, F.
And sometimes the order is important: it should find A, B C with exact order.

With respect to <em>let</em> rspec feature let's take an example: Product has and belongs to many categories. We need to have a scope to filter products within the specified category:

<pre><code>describe "#by_category_id" do
      let(:given_category) do 
        Factory.create(:given_category)
      end
 

      let(:product_in_given_category) do
        Factory.create(
          :product,
          :categories => [category]
        )
      end

      let(:product_not_in_given_category) do
        Factory.create(
          :product,
          :categories => [Factory.create(:category)]
        )
      end

      # This might be tricky to redefine subject as the finder result
      # but in this way we can delegate the matcher to subject and 
      # avoid writing test descriptions.
      subject { Product.by_category_id(given_category.id) }

      it { should discover(product_in_given_category) }
      it { should_not discover(product_not_in_given_category) }

    end
</code></pre> 

Factory girl was used in this example because factories kickass when we test finders. As you can see the example has a perfect readability with no one line of plain English text. I didn't include the description in my examples but you can easily make them if they make sense for you.<br/>
Note: Be aware of the lazy loading of your finder. <em>let</em> is initialized lazy too. You should make sure it is called before the actual query to the database.
If you don't want to care about lazy loading their is <em>let!</em> method that could be easily copy-pasted from Rspec 2.0. Unlike <em>let</em> it doesn't have lazy initialization:
<pre><code>def let!(name, &block)
  let(name, &block)
  before { __send__(name) } 
end
</code></pre>

<h3>Testing sort order</h3>

If the ordering is done in non-trivial way let's <em>discover.with_exact_order</em>. 
<pre><code>describe "#most_commented named scope" do
  let(:uncommented_post) { Factory.create(:post)}
  let!(:less_commented_post) { Factory.create(:post, :comments => [Factory.build(:comment)])}
  let!(:more_commented_post) { 
    Factory.create(:post, :comments => [Factory.build(:comment), Factory.build(:comment)])}
  }

  subject { described_class.most_commented }
 it {should discover(more_commented_post, less_commented_post).with_exact_order }
 it {should_not discover(uncommented_post) }
end</code></pre>

Be careful with default order. MySQL and Postgres sort objects as they were created by default.
That is why generate objects in reverse order e.g. <em>less_commented_post</em> before <em>more_commented_post</em> is important to make sure that ordering is your code behavior rather than default db behavior.
 
<h3> Summary </h3>
I 've add this matcher to the <a href="http://gusiev.com/2010/06/ultimate-rspec-matcher-to-test-validation/">previous one</a>. Both matchers are available here <a href="http://github.com/bogdan/accept_values_for">accept_values_for</a>. Let's start thinking of what else we can do.]]></content:encoded>
<wp:post_id>39</wp:post_id>
<wp:post_date>2010-07-11 17:05:57</wp:post_date>
<wp:post_date_gmt>2010-07-11 14:05:57</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>bdd-rspec-matcher-to-test-named_scope-scoped-rails-3</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1279195233</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
<wp:comment>
<wp:comment_id>414</wp:comment_id>
<wp:comment_author><![CDATA[iain]]></wp:comment_author>
<wp:comment_author_email>iain@iain.nl</wp:comment_author_email>
<wp:comment_author_url>http://iain.nl/</wp:comment_author_url>
<wp:comment_author_IP>85.147.80.167</wp:comment_author_IP>
<wp:comment_date>2010-07-25 14:06:45</wp:comment_date>
<wp:comment_date_gmt>2010-07-25 11:06:45</wp:comment_date_gmt>
<wp:comment_content><![CDATA[I like accept_value_for. I don't know about discover.

Why not do:

  subject { Post.approved }
  it { should include(expected_to_match) }
  it { should_not include(expected_not_to_match) }

Or, for more control, I just check the arrays themselves:

  it { should == [ expected_to_match ] }

This will let you check the order and the 'expected_not_to_match' object cannot be there.

BTW: any ideas on supporting ActiveModel with AcceptValuesFor?]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
	</item>
<item>
<title>Populate database pattern - why is it so cool?</title>
<link>http://gusiev.com/2010/08/populate-db-pattern-fake-data/</link>
<pubDate>Thu, 26 Aug 2010 16:49:32 +0000</pubDate>
<dc:creator><![CDATA[Bogdan Gusiev]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<category domain="tag"><![CDATA[data]]></category>

		<category domain="tag" nicename="data"><![CDATA[data]]></category>

		<category domain="tag"><![CDATA[database]]></category>

		<category domain="tag" nicename="database"><![CDATA[database]]></category>

		<category domain="tag"><![CDATA[fake]]></category>

		<category domain="tag" nicename="fake"><![CDATA[fake]]></category>

		<category domain="tag"><![CDATA[pattern]]></category>

		<category domain="tag" nicename="pattern"><![CDATA[pattern]]></category>

		<category domain="tag"><![CDATA[populate]]></category>

		<category domain="tag" nicename="populate"><![CDATA[populate]]></category>

		<category domain="tag"><![CDATA[ruby]]></category>

		<category domain="tag" nicename="ruby"><![CDATA[ruby]]></category>

<guid isPermaLink="false">http://gusiev.com/?p=40</guid>
<description></description>
<content:encoded><![CDATA[Once my co-worker propose an idea to fill database with some fake data because we didn't have a  gui forms yet and we have to show something that works to customer. That was a start for great pattern - <strong>populator</strong>.
<!--more-->

<h3>Advantages</h3>
Later we didn't drop that functionality because it was helpful for everyone to always see what's new appear in application. And we find more and more useful aspects of having populator. It was so easy to attach new people to project because we deliver a short set of data within a source code that demonstrates everything we have in our app. Now whole team has a full data set and see if any page doesn't work because of a side effect. Frontend people feel more comfortable with populator because they don't care of how to create many assets in order to see pagination and things like that . Also UI issues became easier to detect because every element present on a screen for every person letting him detect browser specific bugs. 

<h3> Implementation</h3>

I won't recommend any specific library to populate the db except the one to generate fake(Lorem ipsum) content. We prefer <a href="http://github.com/stympy/faker">Faker</a> but that is up to personal choice.
Important note is that inserting data directly into db is bad idea because all application logic is ignored in this case: validation will be ignored and counters cache might be broken. That is why Populate gem is not recommended.<br/><br/>
One nice improvement we made is pass _SCALE_ parameter to populator in order to control how many objects should be generated. Use minimal amount if you need to test that populator works and regular amount to get working system.<br/>
Another good idea is soft save(ignore if not valid) and output the number of created objects after at the end. This letting you if something went wrong during populate process.<br/>
<br/>
Here is an example of how it may look like:
<pre><code>User.transaction do
  # apply the SCALE parameter to the argument. 
  # Default SCALE is 10 so 10 * 1 = 10. 
  # Generate 10 users by default
  scale(1).times do 
    user = User.new
    user.email = Faker::Internet.email
    user.first_name = Faker::Name.first_name
    user.last_name = Faker::Name.last_name
    user.password = user.password_confirmation = 'monkey'
    user.save # this may be false in case of uniqueness restriction or other problems
  end
end


users = User.all
puts "Users: #{users.count}" # make sure we actually made some users </code></pre>

<h3>At the end</h3>
I beleive that Populator should be a part of the build of every project. Yes, it needs some support but in fact it saves lots and lots of time.
]]></content:encoded>
<wp:post_id>40</wp:post_id>
<wp:post_date>2010-08-26 19:49:32</wp:post_date>
<wp:post_date_gmt>2010-08-26 16:49:32</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>populate-db-pattern-fake-data</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1282841372</wp:meta_value>
</wp:postmeta>
<wp:comment>
<wp:comment_id>678</wp:comment_id>
<wp:comment_author><![CDATA[baltech]]></wp:comment_author>
<wp:comment_author_email>balajiwebsoft@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://www.baltech.in</wp:comment_author_url>
<wp:comment_author_IP>122.161.244.250</wp:comment_author_IP>
<wp:comment_date>2010-12-28 09:25:14</wp:comment_date>
<wp:comment_date_gmt>2010-12-28 06:25:14</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Nice information to populate the data bese]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>443</wp:comment_id>
<wp:comment_author><![CDATA[antono]]></wp:comment_author>
<wp:comment_author_email>antono.vasiljev@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://antono.info/</wp:comment_author_url>
<wp:comment_author_IP>93.84.220.59</wp:comment_author_IP>
<wp:comment_date>2010-08-27 02:46:25</wp:comment_date>
<wp:comment_date_gmt>2010-08-26 23:46:25</wp:comment_date_gmt>
<wp:comment_content><![CDATA[BTW now i think that factories is a good idea for db population :)]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>444</wp:comment_id>
<wp:comment_author><![CDATA[Bogdan Gusiev]]></wp:comment_author>
<wp:comment_author_email>agresso@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://gusiev.com</wp:comment_author_url>
<wp:comment_author_IP>77.88.216.22</wp:comment_author_IP>
<wp:comment_date>2010-08-27 11:12:10</wp:comment_date>
<wp:comment_date_gmt>2010-08-27 08:12:10</wp:comment_date_gmt>
<wp:comment_content><![CDATA[I don't think so.

If you are trying to use rspec factories to populate db, You are trying cover both cases but don't make each of them good.

So you definitely need to have some specific factories for db population.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>1</wp:comment_user_id>
</wp:comment>
	</item>
<item>
<title>Good passwords theory</title>
<link>http://gusiev.com/2010/09/good-passwords-theory/</link>
<pubDate>Thu, 30 Sep 2010 08:25:19 +0000</pubDate>
<dc:creator><![CDATA[Bogdan Gusiev]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<category domain="tag"><![CDATA[password]]></category>

		<category domain="tag" nicename="password"><![CDATA[password]]></category>

		<category domain="tag"><![CDATA[random]]></category>

		<category domain="tag" nicename="random"><![CDATA[random]]></category>

		<category domain="tag"><![CDATA[security]]></category>

		<category domain="tag" nicename="security"><![CDATA[security]]></category>

		<category domain="tag"><![CDATA[usability]]></category>

		<category domain="tag" nicename="usability"><![CDATA[usability]]></category>

<guid isPermaLink="false">http://gusiev.com/?p=31</guid>
<description></description>
<content:encoded><![CDATA[All of us are using passwords and most of us are typing them several times a day. And everyone knows the criteria to generate a good password. Random passwords are very strong from protection point of view but not from usability point of view. 
No body think about password unforgettable-ness and less-painful-to-type-ness. I saw many passwords that are very painful because they are just random. 

And I think it's nice to lose some randomness and make it easier to type and remember.
There is still a lot of enough strong passwords that match this criteria as well. 
<br/><br/>
Try to type and remember something like:
<pre><code>sudosuamigo1;
s3host-large
you&me2gether</code></pre>
Instead of:
<pre><code>1aWhuyZ
!nzu?Us0
n]1m!uaA</code></pre>
 
And you feel much better.
]]></content:encoded>
<wp:post_id>31</wp:post_id>
<wp:post_date>2010-09-30 11:25:19</wp:post_date>
<wp:post_date_gmt>2010-09-30 08:25:19</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>good-passwords-theory</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1285835120</wp:meta_value>
</wp:postmeta>
<wp:comment>
<wp:comment_id>662</wp:comment_id>
<wp:comment_author><![CDATA[Paul Harris]]></wp:comment_author>
<wp:comment_author_email>faraz_aleem@hotmail.com</wp:comment_author_email>
<wp:comment_author_url>http://www.veztekusa.com</wp:comment_author_url>
<wp:comment_author_IP>119.152.45.251</wp:comment_author_IP>
<wp:comment_date>2010-11-26 09:04:51</wp:comment_date>
<wp:comment_date_gmt>2010-11-26 06:04:51</wp:comment_date_gmt>
<wp:comment_content><![CDATA[can't agree with you more.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>649</wp:comment_id>
<wp:comment_author><![CDATA[Saas]]></wp:comment_author>
<wp:comment_author_email>joseph.wittman@yahoo.com</wp:comment_author_email>
<wp:comment_author_url>http://www.surgeforward.com</wp:comment_author_url>
<wp:comment_author_IP>76.104.220.63</wp:comment_author_IP>
<wp:comment_date>2010-11-10 20:25:28</wp:comment_date>
<wp:comment_date_gmt>2010-11-10 17:25:28</wp:comment_date_gmt>
<wp:comment_content><![CDATA[I tend to agree.  I use some "easy to remember passwords" and they always come up strong on the meters, they are easy to type, and easy for me to remember as well.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>620</wp:comment_id>
<wp:comment_author><![CDATA[Jonathon]]></wp:comment_author>
<wp:comment_author_email>jonathon@arctickiwi.com</wp:comment_author_email>
<wp:comment_author_url>http://www.arctickiwi.com</wp:comment_author_url>
<wp:comment_author_IP>83.244.218.208</wp:comment_author_IP>
<wp:comment_date>2010-10-22 17:38:22</wp:comment_date>
<wp:comment_date_gmt>2010-10-22 14:38:22</wp:comment_date_gmt>
<wp:comment_content><![CDATA[My strategy for picking strong passwords is think of a line from a favourite song and use the first letter of each word, e.g.:

Hey Jude don't make it bad. Take a sad song and make it better.

becomes:

hJdmibtassamib

Then replace some letters with numbers, mix up the case and add some punctuation where it makes sense:

hJdm1b.T@ss&amp;m1b!

Viola]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>580</wp:comment_id>
<wp:comment_author><![CDATA[Damien]]></wp:comment_author>
<wp:comment_author_email>42@dmathieu.com</wp:comment_author_email>
<wp:comment_author_url>http://dmathieu.com</wp:comment_author_url>
<wp:comment_author_IP>82.239.196.57</wp:comment_author_IP>
<wp:comment_date>2010-09-30 12:04:59</wp:comment_date>
<wp:comment_date_gmt>2010-09-30 09:04:59</wp:comment_date_gmt>
<wp:comment_content><![CDATA[At school, one of my teachers gave us this solution :
Pick a random word in the dictionnary and remember it.

Then replace all the vowels by numbers.
For example if my random word was "rubyonrails", the password would look like :

r1b23nr45ls

You can add more complexity by doing numbers and special characters from the top of your keyboard. With mine (azerty french), I would have :

r1b&amp;2nré2ls

That's quite secure and as long as you know which word you've picked and how to generate it, you can always remember your password.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
	</item>
<item>
<title>Dynamic context in Rspec - don't repeat yourself</title>
<link>http://gusiev.com/2010/11/dynamic-context-in-rspec-dont-repeat-yourself/</link>
<pubDate>Wed, 03 Nov 2010 20:24:45 +0000</pubDate>
<dc:creator><![CDATA[Bogdan Gusiev]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<category domain="tag"><![CDATA[behavior]]></category>

		<category domain="tag" nicename="behavior"><![CDATA[behavior]]></category>

		<category domain="tag"><![CDATA[context]]></category>

		<category domain="tag" nicename="context"><![CDATA[context]]></category>

		<category domain="tag"><![CDATA[rspec]]></category>

		<category domain="tag" nicename="rspec"><![CDATA[rspec]]></category>

		<category domain="tag"><![CDATA[testing]]></category>

		<category domain="tag" nicename="testing"><![CDATA[testing]]></category>

<guid isPermaLink="false">http://gusiev.com/?p=41</guid>
<description></description>
<content:encoded><![CDATA[Advanced rspec features allow to use very effective technique to organize tests. You are able to construct and define context in more flexible way than before.
We use to have less problems with subject and behavior. And <strong>context</strong> is what testing is all about. Just because web apps manage data, behavior seriously depends on current state of the database. 
<!--more-->
<br/><br/>

Well organized contexts makes a real problem of testing. Unlike TestUnit, Rspec examples may have nested contexts and even dynamic contexts with the <em>let</em> feature. <br/>
In spite of lazy initialization let blocks they are defined before <em>before each</em> hook. Understand by example. <br/> <br/>
In this example orders should be delivered to confirmed customer account just after creation and should not be delivered if the account is not confirmed yet.
<pre><code>describe Order do
  context "after create" do #defining a partial context
    before(:each) do
      subject.customer.confirmed = confirmed
      subject.save!
    end

    context "when customer is confirmed" do 
      let(:confirmed) { true }
      it { should be_delivered }
    end
    
    context "when customer is not confirmed" do 
      let(:confirmed) { false }
      it { should_not be_delivered }
    end
  end
end</code></pre>

Here you can see the partial context definition and custom behavior in two nested context.
We can call not yet declared function and define it later and differently in different contexts.<br/> <br/>

Another example that is kind of pattern matching(erlang term), designed to test utility functions.<br/>
Suppose we have a boolean expression evaluation function:
<pre><code>describe Expression
  describe ".run" do

    subject { Expression.run(arg) }

    context "with '&' where both true" do
      let(:arg) { "true & true" }
      it {should be_true}
    end

    context "with '&' where one false" do
      let(:arg) { "false & true" }
      it {should be_false}
    end
    ........
  end
end</code></pre>

Very good strategy to run same function with different arguments.
<br/> <br/>
Rspec is far ahead of all unit testing frameworks. Unlike most of Rspec clones (e.g. for other programming languages), Rspec authors got in deep to the testing problems and invent flexible and elegant syntax.]]></content:encoded>
<wp:post_id>41</wp:post_id>
<wp:post_date>2010-11-03 23:24:45</wp:post_date>
<wp:post_date_gmt>2010-11-03 20:24:45</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>dynamic-context-in-rspec-dont-repeat-yourself</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1288815885</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>Debug ajax requests in more easy way</title>
<link>http://gusiev.com/2011/03/ajax-jquery-debug-javascript/</link>
<pubDate>Fri, 18 Mar 2011 18:06:42 +0000</pubDate>
<dc:creator><![CDATA[Bogdan Gusiev]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<category domain="tag"><![CDATA[ajax]]></category>

		<category domain="tag" nicename="ajax"><![CDATA[ajax]]></category>

		<category domain="tag"><![CDATA[debug]]></category>

		<category domain="tag" nicename="debug"><![CDATA[debug]]></category>

		<category domain="tag"><![CDATA[javascript]]></category>

		<category domain="tag" nicename="javascript"><![CDATA[javascript]]></category>

		<category domain="tag"><![CDATA[jquery]]></category>

		<category domain="tag" nicename="jquery"><![CDATA[jquery]]></category>

<guid isPermaLink="false">http://gusiev.com/?p=45</guid>
<description></description>
<content:encoded><![CDATA[When I have to debug ajax requests, I always feel pain in the ass accessing the exception message and backtrace. It require at least 3 clicks to get them and only in the plain html format, that web framework use to generate. Is it better to see it at once in the browser popup?  
<!--more-->
<br/><br/>
This can be done with Ajax callbacks offered by javascript framework(if yours doesn't - get rid of it). We can catch errors there and display popup. JQuery example with #ajaxError callback that fires on every unsuccessful ajax call:
<pre><code>(function() {
      var popup = null;
      $(document).ajaxError(function(event, xhr, settings, exception) {
        if (popup) {
          popup.close();
          popup = null;
        }
        popup = window.open(null, "error", "width=800,height=600");
        $(popup.document.documentElement).html(xhr.responseText);
        return true;
      });
    }());</code></pre>

Checked in FF and Chrome(IE is not a browser).
<a href="http://img6.imagebanana.com/img/drl8wpd9/screenshot_014.png">Screenshot</a> with the result. Be aware of browser popup blocker. <br/>
You always have a control when popup the error. I like it to be "in any case". But You can customize it with <em>xhr.status</em> and <em>if</em> statement on the server side.
<br/><br/>
In some cases it might be useful not only in the development but in production as well. But it should be an iframe inside of pretty html layout, so that designers won't blame programmers too much.]]></content:encoded>
<wp:post_id>45</wp:post_id>
<wp:post_date>2011-03-18 21:06:42</wp:post_date>
<wp:post_date_gmt>2011-03-18 18:06:42</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>ajax-jquery-debug-javascript</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1300471603</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
<wp:comment>
<wp:comment_id>693</wp:comment_id>
<wp:comment_author><![CDATA[Leonid Shevtsov]]></wp:comment_author>
<wp:comment_author_email>leonid@shevtsov.me</wp:comment_author_email>
<wp:comment_author_url>http://leonid.shevtsov.me</wp:comment_author_url>
<wp:comment_author_IP>94.179.0.200</wp:comment_author_IP>
<wp:comment_date>2011-03-18 23:11:14</wp:comment_date>
<wp:comment_date_gmt>2011-03-18 20:11:14</wp:comment_date_gmt>
<wp:comment_content><![CDATA[I'd just like to add that Firebug itself can render an AJAX HTML response.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
	</item>
<item>
<title>Do git commits associated to hoptoad errors</title>
<link>http://gusiev.com/2011/03/do-git-commits-associated-to-hoptoad-errors/</link>
<pubDate>Mon, 28 Mar 2011 19:07:43 +0000</pubDate>
<dc:creator><![CDATA[Bogdan Gusiev]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<category domain="tag"><![CDATA[commit]]></category>

		<category domain="tag" nicename="commit"><![CDATA[commit]]></category>

		<category domain="tag"><![CDATA[exception]]></category>

		<category domain="tag" nicename="exception"><![CDATA[exception]]></category>

		<category domain="tag"><![CDATA[git]]></category>

		<category domain="tag" nicename="git"><![CDATA[git]]></category>

		<category domain="tag"><![CDATA[hoptoad]]></category>

		<category domain="tag" nicename="hoptoad"><![CDATA[hoptoad]]></category>

		<category domain="tag"><![CDATA[ruby]]></category>

		<category domain="tag" nicename="ruby"><![CDATA[ruby]]></category>

<guid isPermaLink="false">http://gusiev.com/?p=46</guid>
<description></description>
<content:encoded><![CDATA[We are trying to build a better development workflow by connecting all our tools together.
So, this time we tried to connect HopToad Application with git commits because sometimes it's better to just paste the link to hoptoad error rather than describe all steps to reproduce. This idea was resulted in the command line interface for hoptoad api with a little git integration - <a target="_blank" href="http://github.com/railsware/shelltoad">Shelltoad</a>.
<!--more-->
<br/><br/>
Currently, in order to resolve hoptoad error we do the following.<br/>
Check the list of errors:
<pre><code>$ shelltoad
[#3374331] production ActionController::MethodNotAllowed: Only put requests are allowed
[#4023713] production ActiveRecord::StatementInvalid: PGError: ERROR:
       duplicate key value violates unique constraint "index_companies_on_slug" :
       INSERT INTO "companies" .....
</code></pre>
View the information on the required error.
 '713' is automatically guess for 4023713
<pre><code>
$ shelltoad 713
ActiveRecord::StatementInvalid: PGError: ERROR: duplicate key value violates unique constraint
 "index_companies_on_slug" : INSERT INTO "companies"
("slug", "created_at", "title", "updated_at", "external_url", "logo_id", "custom") VALUES('abbott-associates
/var/data/www/apps/startwire/shared/bundle/ruby/1.8/gems/activerecord-
2.3.8/lib/active_record/connection_adapters/abstract_adapter.rb:221
/var/data/www/apps/startwire/releases/20110218113457/app/models/company.rb:50
/var/data/www/apps/startwire/releases/20110218113457/app/utils/network_map/populate.rb:9
/var/data/www/apps/startwire/releases/20110218113457/app/utils/network_map/populate.rb:74
/var/data/www/apps/startwire/releases/20110218113457/app/utils/network_map/populate.rb:70
....
</code></pre>
Fix the error in the code ...
Prepare git commit:
<pre><code>
$ git add .
</code></pre>
Commit the fix to git with connection to hoptoad issue id
<pre><code>
$ shelltoad commit 713
[dev 47f09ec]     http://xxx.hoptoadapp.com//errors/4023713
 1 files changed, 1 insertions(+), 1 deletions(-)
</code></pre>

Commit message will look like this:
<code><pre>http://startdatelabs.hoptoadapp.com//errors/4023713

ActiveRecord::StatementInvalid: PGError: ERROR: duplicate key value violates unique constraint
 "index_companies_on_slug" : INSERT INTO "companies"
("slug", "created_at", "title", "updated_at", "external_url", "logo_id", "custom") VALUES('abbott-associates</pre></code>


This help us maintain the links between git and hoptoad automatically.]]></content:encoded>
<wp:post_id>46</wp:post_id>
<wp:post_date>2011-03-28 22:07:43</wp:post_date>
<wp:post_date_gmt>2011-03-28 19:07:43</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>do-git-commits-associated-to-hoptoad-errors</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1301339940</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>JavaScript injection in JSON inserted directly into script tag</title>
<link>http://gusiev.com/2011/04/javascript-injection-in-json-inserted-directly-into-script-tag/</link>
<pubDate>Wed, 06 Apr 2011 06:04:49 +0000</pubDate>
<dc:creator><![CDATA[Bogdan Gusiev]]></dc:creator>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<category domain="tag"><![CDATA[escape]]></category>

		<category domain="tag" nicename="escape"><![CDATA[escape]]></category>

		<category domain="tag"><![CDATA[html]]></category>

		<category domain="tag" nicename="html"><![CDATA[html]]></category>

		<category domain="tag"><![CDATA[javascript]]></category>

		<category domain="tag" nicename="javascript"><![CDATA[javascript]]></category>

		<category domain="tag"><![CDATA[json]]></category>

		<category domain="tag" nicename="json"><![CDATA[json]]></category>

		<category domain="tag"><![CDATA[xss]]></category>

		<category domain="tag" nicename="xss"><![CDATA[xss]]></category>

<guid isPermaLink="false">http://gusiev.com/?p=47</guid>
<description></description>
<content:encoded><![CDATA[Pass data from backend to javascript is done in many different ways. One of the most simple is to inject(&lt;%= %&gt;) value as function argument inside of script tag. Unfortunately this pattern has well known XSS vulnerability but in a little different form than same injection in html template.
<!--more-->
<pre><code>&lt;script type="text/javascript"&gt;
    App.initizalizeSomething(<%= data.to_json %>)
&lt;/script&gt;</code></pre>

The reason is that browser treat <strong>&lt;/script&gt;</strong> as close script tag no matter where is it inserted into script. So, the script tag can be closed unexpectedly and opened again with any code if the <em>data</em> argument will contain correctly formed sequence, like:
<pre><code>&lt;/script&gt;&lt;script&gt;alert('hello')&lt;/script&gt;</code></pre>

Use <em>#html_escape</em> helper is wrong here because it has different type of escaping.
For example you don't need to escape double quote in this case.

Rails core team is aware of that problem and implemented special helper:
<pre><code>    # A utility method for escaping HTML entities in JSON strings
    # using \uXXXX JavaScript escape sequences for string literals:
    #
    #   json_escape("is a > 0 & a < 10?")
    #   # => is a \u003E 0 \u0026 a \u003C 10?
    #
    # Note that after this operation is performed the output is not
    # valid JSON. In particular double quotes are removed:
    #
    #   json_escape('{"name":"john","created_at":"2010-04-28T01:39:31Z","id":1}')
    #   # => {name:john,created_at:2010-04-28T01:39:31Z,id:1}
    #
    # This method is also aliased as +j+, and available as a helper
    # in Rails templates:
    #
    #   <%=j @person.to_json %>
    #
    def json_escape(s)</code></pre>
Implementation can be found in <a href="https://github.com/rails/rails/blob/master/activesupport/lib/active_support/core_ext/string/output_safety.rb#L53" target="_blank">Rails source code</a>. ]]></content:encoded>
<wp:post_id>47</wp:post_id>
<wp:post_date>2011-04-06 09:04:49</wp:post_date>
<wp:post_date_gmt>2011-04-06 06:04:49</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>javascript-injection-in-json-inserted-directly-into-script-tag</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1302113887</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
<wp:comment>
<wp:comment_id>803</wp:comment_id>
<wp:comment_author><![CDATA[mikerosss]]></wp:comment_author>
<wp:comment_author_email>shamwowoww@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://www.lockrings21.org</wp:comment_author_url>
<wp:comment_author_IP>188.143.232.37</wp:comment_author_IP>
<wp:comment_date>2011-05-03 23:40:07</wp:comment_date>
<wp:comment_date_gmt>2011-05-03 20:40:07</wp:comment_date_gmt>
<wp:comment_content><![CDATA[I just added your blog site to my blogroll, I pray you would give some thought to doing the same.]]></wp:comment_content>
<wp:comment_approved>spam</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>802</wp:comment_id>
<wp:comment_author><![CDATA[p90x]]></wp:comment_author>
<wp:comment_author_email>Sosby9@hotmail.com</wp:comment_author_email>
<wp:comment_author_url>http://www.p90xfitness.info</wp:comment_author_url>
<wp:comment_author_IP>208.115.220.24</wp:comment_author_IP>
<wp:comment_date>2011-05-03 16:50:14</wp:comment_date>
<wp:comment_date_gmt>2011-05-03 13:50:14</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Preferably, when you gain knowledge, are you able to mind updating your website with an increase of information? It is very ideal for me.]]></wp:comment_content>
<wp:comment_approved>spam</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>804</wp:comment_id>
<wp:comment_author><![CDATA[Hilton Carsten]]></wp:comment_author>
<wp:comment_author_email>Lynds@yahoo.com</wp:comment_author_email>
<wp:comment_author_url>http://www.preminmbags.com</wp:comment_author_url>
<wp:comment_author_IP>195.115.47.9</wp:comment_author_IP>
<wp:comment_date>2011-05-05 13:20:51</wp:comment_date>
<wp:comment_date_gmt>2011-05-05 10:20:51</wp:comment_date_gmt>
<wp:comment_content><![CDATA[One of my best friend siad:"I can't help me to buy <a href="http://www.premiumbags.net/" title="Designed Handbags" rel="nofollow">Designed handbags</a>!They are just like my soulmate!"Well,she is right,The <a href="http://www.premiumbags.net/" rel="nofollow">Gucci outlet</a> are designed by the famous desingers,full of artistic temparament!You can also select <a href="http://www.myprettysalon.com/" rel="nofollow">GHD hair straighteners </a> from a variety of different <a href="http://www.myprettysalon.com/" rel="nofollow">GHD flat irons </a> styles in our GHD outlet </a> store.]]></wp:comment_content>
<wp:comment_approved>spam</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>805</wp:comment_id>
<wp:comment_author><![CDATA[cheap karen millen dress]]></wp:comment_author>
<wp:comment_author_email>robertalamb@compulsiontocompassion.com</wp:comment_author_email>
<wp:comment_author_url>http://www.karenmilleneveningdresses.com</wp:comment_author_url>
<wp:comment_author_IP>207.204.228.60</wp:comment_author_IP>
<wp:comment_date>2011-05-05 17:20:55</wp:comment_date>
<wp:comment_date_gmt>2011-05-05 14:20:55</wp:comment_date_gmt>
<wp:comment_content><![CDATA[thanks for this great post wow... it's very wonderful]]></wp:comment_content>
<wp:comment_approved>spam</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>807</wp:comment_id>
<wp:comment_author><![CDATA[replica mont blanc pens]]></wp:comment_author>
<wp:comment_author_email>Ebenstein10@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://www.wheelersgifts.com/</wp:comment_author_url>
<wp:comment_author_IP>77.47.129.43</wp:comment_author_IP>
<wp:comment_date>2011-05-05 19:56:02</wp:comment_date>
<wp:comment_date_gmt>2011-05-05 16:56:02</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Mens Must Have Accessories www.wheelersgifts.com/replica-t-shirt]]></wp:comment_content>
<wp:comment_approved>spam</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
	</item>
</channel>
</rss>
